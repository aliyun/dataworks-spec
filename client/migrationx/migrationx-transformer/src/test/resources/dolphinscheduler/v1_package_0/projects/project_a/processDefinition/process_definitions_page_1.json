[
  {
    "processDefinitionConnects": "[{\"endPointSourceId\":\"tasks-1748\",\"endPointTargetId\":\"tasks-84902\"},{\"endPointSourceId\":\"tasks-1748\",\"endPointTargetId\":\"tasks-23222\"},{\"endPointSourceId\":\"tasks-55520\",\"endPointTargetId\":\"tasks-1748\"}]",
    "processDefinitionJson": "{\"tenantId\":-1,\"globalParams\":[],\"tasks\":[{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SHELL\",\"params\":{\"rawScript\":\"whoami\",\"localParams\":[],\"resourceList\":[]},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":\"0\",\"taskInstancePriority\":\"MEDIUM\",\"name\":\"shell_1\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"conditions_0\"],\"id\":\"tasks-23222\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"PYTHON\",\"params\":{\"rawScript\":\"print ${test}\",\"localParams\":[{\"prop\":\"test\",\"direct\":\"IN\",\"type\":\"VARCHAR\",\"value\":\"11111\"}],\"resourceList\":[]},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":\"0\",\"taskInstancePriority\":\"MEDIUM\",\"name\":\"test_py_args\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"conditions_0\"],\"id\":\"tasks-84902\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"shell_1\"],\"failedNode\":[\"test_py_args\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"CONDITIONS\",\"params\":{},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":\"0\",\"taskInstancePriority\":\"MEDIUM\",\"name\":\"conditions_0\",\"dependence\":{\"dependTaskList\":[{\"dependItemList\":[{\"depTasks\":\"shell_condtion_0\",\"status\":\"SUCCESS\"}],\"relation\":\"AND\"}],\"relation\":\"AND\"},\"retryInterval\":\"1\",\"preTasks\":[\"shell_condtion_0\"],\"id\":\"tasks-1748\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SHELL\",\"params\":{\"rawScript\":\"echo hello\",\"localParams\":[],\"resourceList\":[]},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":\"0\",\"taskInstancePriority\":\"MEDIUM\",\"name\":\"shell_condtion_0\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[],\"id\":\"tasks-55520\",\"workerGroup\":\"default\"}],\"timeout\":0}",
    "processDefinitionLocations": "{\"tasks-23222\":{\"name\":\"shell_1\",\"targetarr\":\"tasks-1748\",\"nodenumber\":\"0\",\"x\":713,\"y\":175},\"tasks-84902\":{\"name\":\"test_py_args\",\"targetarr\":\"tasks-1748\",\"nodenumber\":\"0\",\"x\":761,\"y\":408},\"tasks-1748\":{\"name\":\"conditions_0\",\"targetarr\":\"tasks-55520\",\"nodenumber\":\"0\",\"x\":336,\"y\":262},\"tasks-55520\":{\"name\":\"shell_condtion_0\",\"targetarr\":\"\",\"nodenumber\":\"1\",\"x\":161,\"y\":136}}",
    "processDefinitionName": "inner_flow_0",
    "projectName": "project_a",
    "processDefinitionId": 3
  },
  {
    "processDefinitionConnects": "[{\"endPointSourceId\":\"tasks-24651\",\"endPointTargetId\":\"tasks-18892\"},{\"endPointSourceId\":\"tasks-24651\",\"endPointTargetId\":\"tasks-19350\"},{\"endPointSourceId\":\"tasks-2-10r42k\",\"endPointTargetId\":\"tasks-2-13q2wc\"},{\"endPointSourceId\":\"tasks-2-10r42k\",\"endPointTargetId\":\"tasks-2-2x63m8\"},{\"endPointSourceId\":\"tasks-2-10r42k\",\"endPointTargetId\":\"tasks-2-3gy2ci\"},{\"endPointSourceId\":\"tasks-2-10r42k\",\"endPointTargetId\":\"tasks-2-552559\"},{\"endPointSourceId\":\"tasks-2-10r42k\",\"endPointTargetId\":\"tasks-2-1cea9\"},{\"endPointSourceId\":\"tasks-24651\",\"endPointTargetId\":\"tasks-29131\"},{\"endPointSourceId\":\"tasks-18892\",\"endPointTargetId\":\"tasks-2-10r42k\"},{\"endPointSourceId\":\"tasks-96807\",\"endPointTargetId\":\"tasks-40537\"},{\"endPointSourceId\":\"tasks-96807\",\"endPointTargetId\":\"tasks-45412\"},{\"endPointSourceId\":\"tasks-58143\",\"endPointTargetId\":\"tasks-30982\"},{\"endPointSourceId\":\"tasks-19350\",\"endPointTargetId\":\"tasks-15616\"},{\"endPointSourceId\":\"tasks-20232\",\"endPointTargetId\":\"tasks-70324\"},{\"endPointSourceId\":\"tasks-19861\",\"endPointTargetId\":\"tasks-96807\"},{\"endPointSourceId\":\"tasks-19861\",\"endPointTargetId\":\"tasks-24651\"},{\"endPointSourceId\":\"tasks-19861\",\"endPointTargetId\":\"tasks-48304\"},{\"endPointSourceId\":\"tasks-48304\",\"endPointTargetId\":\"tasks-3360\"},{\"endPointSourceId\":\"tasks-3360\",\"endPointTargetId\":\"tasks-20232\"},{\"endPointSourceId\":\"tasks-29131\",\"endPointTargetId\":\"tasks-58143\"},{\"endPointSourceId\":\"tasks-2-10r42k\",\"endPointTargetId\":\"tasks-6520\"},{\"endPointSourceId\":\"tasks-48304\",\"endPointTargetId\":\"tasks-38489\"},{\"endPointSourceId\":\"tasks-19861\",\"endPointTargetId\":\"tasks-63567\"},{\"endPointSourceId\":\"tasks-24651\",\"endPointTargetId\":\"tasks-19851\"},{\"endPointSourceId\":\"tasks-19851\",\"endPointTargetId\":\"tasks-16137\"}]",
    "processDefinitionJson": "{\"tenantId\":6,\"globalParams\":[],\"tasks\":[{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SQL\",\"params\":{\"postStatements\":[],\"connParams\":\"\",\"receiversCc\":\"\",\"udfs\":\"\",\"type\":\"POSTGRESQL\",\"title\":\"\",\"sql\":\"--------------------------------------------------------------------------------------------------------------\\n----一期需求：20210609\\n--add phone_lock_flag 20211122\\n--add systemtype(ios,android) 20220310\\n--------------------------------------------------------------------------------------------------------------\\ndelete from tb_bidata.dws_okcard_apply_info where time_type \u003c\u003e \u00276\u0027 and stat_type not in (\u0027target_visit\u0027, \u0027delete_user\u0027) and report_date \u003e\u003d \u00272022-01-02\u0027;\\ndelete from tb_bidata.dws_okcard_apply_info where time_type in (\u00274\u0027,\u00275\u0027) and stat_type not in (\u0027target_visit\u0027, \u0027delete_user\u0027) and report_date \u003e\u003d \u00272022-01-01\u0027;\\ndelete from tb_bidata.dws_okcard_apply_info where time_type \u003d \u00276\u0027 and report_date\u003ddateadd(day,-1,current_date);\\n\\n--------------------------------------------------------------------------------------------------------------\\n--part 1：目标用户更新为： 有锁 + 非锁 白名单 20220331\\n--------------------------------------------------------------------------------------------------------------\\ninsert into tb_bidata.dws_okcard_apply_info\\nwith object_user as (\\nselect * from etl_dwd.ng_okcard_target_user\\n)\\n\\n,obj_apply as (\\nselect a.* from etl_dwd.ng_okcard_apply_log a inner join object_user b on a.member_id\u003db.member_id\\n)\\n--目标用户申请数(新增指标)\\nselect date(t1.create_time) report_date\\n,count(distinct t1.member_id ) target_apply_users\\n,count(t1.member_id) target_apply_cnt\\n,\u0027ob_apply\u0027 stat_type\\n,\u00271\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\n,t1.systemtype\\nfrom obj_apply t1\\nwhere t1.create_time \u003e\u003d\u00272022-01-02\u0027 group by 1,7,8\\n\\nunion all\\n--目标用户申请数(新增指标)\\nselect dateadd(day,-7,next_day(t1.create_time,\u0027Su\u0027)) report_date\\n,count(distinct t1.member_id ) target_apply_users\\n,count(t1.member_id) target_apply_cnt\\n,\u0027ob_apply\u0027 stat_type\\n,\u00272\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\n,t1.systemtype\\nfrom obj_apply t1\\nwhere t1.create_time \u003e\u003d\u00272022-01-02\u0027 group by 1,7,8\\n\\nunion all\\n--目标用户申请数(新增指标)\\nselect last_day(t1.create_time) report_date\\n,count(distinct t1.member_id ) target_apply_users\\n,count(t1.member_id) target_apply_cnt\\n,\u0027ob_apply\u0027 stat_type\\n,\u00273\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\n,t1.systemtype\\nfrom obj_apply t1\\nwhere t1.create_time \u003e\u003d\u00272022-01-02\u0027 group by 1,7,8\\n\\nunion all\\n--目标用户申请数(新增指标)\\nselect date(concat(concat(concat(to_char(t1.create_time, \u0027YYYY\u0027),\u0027-\u0027),lpad((floor(substring(t1.create_time,6,2)/3.1)*3)+1,2,\u00270\u0027)),\u0027-1\u0027)) report_date\\n,count(distinct t1.member_id ) target_apply_users\\n,count(t1.member_id) target_apply_cnt\\n,\u0027ob_apply\u0027 stat_type\\n,\u00274\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\n,t1.systemtype\\nfrom obj_apply t1\\nwhere t1.create_time \u003e\u003d\u00272022-01-02\u0027 group by 1,7,8\\n\\nunion all\\n--目标用户申请数(新增指标)\\nselect date(concat(to_char(t1.create_time, \u0027YYYY\u0027),\u0027-01-01\u0027)) report_date\\n,count(distinct t1.member_id ) target_apply_users\\n,count(t1.member_id) target_apply_cnt\\n,\u0027ob_apply\u0027 stat_type\\n,\u00275\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\n,t1.systemtype\\nfrom obj_apply t1\\nwhere t1.create_time \u003e\u003d\u00272022-01-02\u0027 group by 1,7,8\\n\\nunion all\\n--目标用户申请数(新增指标)\\nselect dateadd(day,-1,current_date) report_date\\n,count(distinct t1.member_id ) target_apply_users\\n,count(t1.member_id) target_apply_cnt\\n,\u0027ob_apply\u0027 stat_type\\n,\u00276\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\n,t1.systemtype\\nfrom obj_apply t1\\nwhere t1.create_time \u003e\u003d\u00272022-01-02\u0027 group by 1,7,8;\\n--------------------------------------------------------------------------------------------\\n--手动commit\\n--------------------------------------------------------------------------------------------\\n\\n--------------------------------------------------------------------------------------------\\n--part 2：新增目标用户数\\n--------------------------------------------------------------------------------------------\\ninsert into tb_bidata.dws_okcard_apply_info\\nwith tmp as (\\nselect t1.*\\nfrom etl_dwd.ng_okcard_target_user t1\\n)\\n\\n-- 新增 目标用户数 --update 20210826 新增筛选条件：user_tag not in (\u0027MOBILE_PHONE_THRESHOLD\u0027)\\nselect date(dateadd(hour,1,t1.create_time)) report_date\\n,count(distinct t1.member_id) apply_user_cnts\\n,count(1) apply_cnts\\n,\u0027apply\u0027 stat_type\\n,\u00271\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,0 phone_lock_flag\\n,t1.systemtype   --存在为设备为null的：没有申请过okcard的目标用户\\nfrom tmp t1 where dateadd(hour,1,t1.create_time) \u003e\u003d\u00272022-01-02\u0027 group by 1,7,8\\n-- 目标用户数\\nunion all\\nselect dateadd(day,-7,next_day(dateadd(hour,1,t1.create_time),\u0027Su\u0027)) report_date\\n,count(distinct t1.member_id) apply_user_cnts\\n,count(1) apply_cnts\\n,\u0027apply\u0027 stat_type\\n,\u00272\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,0 phone_lock_flag\\n,t1.systemtype\\nfrom tmp t1 where dateadd(hour,1,t1.create_time) \u003e\u003d\u00272022-01-02\u0027 group by 1,7,8\\n-- 目标用户数\\nunion all\\nselect last_day(dateadd(hour,1,t1.create_time)) report_date\\n,count(distinct t1.member_id) apply_user_cnts\\n,count(1) apply_cnts\\n,\u0027apply\u0027 stat_type\\n,\u00273\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,0 phone_lock_flag\\n,t1.systemtype\\nfrom tmp t1 where dateadd(hour,1,t1.create_time) \u003e\u003d\u00272022-01-02\u0027 group by 1,7,8\\n-- 目标用户数\\nunion all\\nselect date(concat(concat(concat(to_char(dateadd(hour,1,t1.create_time), \u0027YYYY\u0027),\u0027-\u0027),lpad((floor(substring(dateadd(hour,1,t1.create_time),6,2)/3.1)*3)+1,2,\u00270\u0027)),\u0027-1\u0027)) report_date\\n,count(distinct t1.member_id) apply_user_cnts\\n,count(1) apply_cnts\\n,\u0027apply\u0027 stat_type\\n,\u00274\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,0 phone_lock_flag\\n,t1.systemtype\\nfrom tmp t1 where dateadd(hour,1,t1.create_time) \u003e\u003d\u00272022-01-02\u0027 group by 1,7,8\\n-- 目标用户数\\nunion all\\nselect date(concat(to_char(dateadd(hour,1,t1.create_time), \u0027YYYY\u0027),\u0027-01-01\u0027)) report_date\\n,count(distinct t1.member_id) apply_user_cnts\\n,count(1) apply_cnts\\n,\u0027apply\u0027 stat_type\\n,\u00275\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,0 phone_lock_flag\\n,t1.systemtype\\nfrom tmp t1 where dateadd(hour,1,t1.create_time) \u003e\u003d\u00272022-01-02\u0027 group by 1,7,8\\n\\n----目标用户数\\nunion all\\nselect dateadd(day,-1,current_date) report_date\\n,count(distinct t1.member_id) apply_user_cnts\\n,count(1) apply_cnts\\n,\u0027apply\u0027 stat_type\\n,\u00276\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,0 phone_lock_flag\\n,t1.systemtype\\nfrom tmp t1 group by 1,7,8 ;\\n--------------------------------------------------------------------------------------------\\n--手动commit\\n--------------------------------------------------------------------------------------------\\n\\n\\n--------------------------------------------------------------------------------------------\\n--part 3: 申请用户数 (无任何限制) --added by grace：20210817\\n--------------------------------------------------------------------------------------------\\ninsert into tb_bidata.dws_okcard_apply_info\\n-- update 20210826：更新申请用户统计源表\\n-- 由 etl_dwd.ng_okcard_user t1 where t1.apply_status \u003c\u003e -1 更新为etl_dwd.ng_okcard_apply_log t1\\nselect date(t1.create_time) report_date\\n,count(distinct t1.member_id) apply_user_cnts\\n,count(1) apply_cnts\\n,\u0027apply_1\u0027 stat_type\\n,\u00271\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\n,t1.systemtype\\nfrom etl_dwd.ng_okcard_apply_log t1 where t1.create_time \u003e\u003d \u00272022-01-02\u0027 group by 1,7,8\\n-- 申请用户数\\nunion all\\nselect dateadd(day,-7,next_day(t1.create_time,\u0027Su\u0027)) report_date\\n,count(distinct t1.member_id) apply_user_cnts\\n,count(1) apply_cnts\\n,\u0027apply_1\u0027 stat_type\\n,\u00272\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\n,t1.systemtype\\nfrom etl_dwd.ng_okcard_apply_log t1 where t1.create_time \u003e\u003d \u00272022-01-02\u0027 group by 1,7,8\\n-- 申请用户数\\nunion all\\nselect last_day(t1.create_time) report_date\\n,count(distinct t1.member_id) apply_user_cnts\\n,count(1) apply_cnts\\n,\u0027apply_1\u0027 stat_type\\n,\u00273\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\n,t1.systemtype\\nfrom etl_dwd.ng_okcard_apply_log t1 where t1.create_time \u003e \u00272022-01-02\u0027 group by 1,7,8\\n-- 申请用户数\\nunion all\\nselect date(concat(concat(concat(to_char(t1.create_time, \u0027YYYY\u0027),\u0027-\u0027),lpad((floor(substring(t1.create_time,6,2)/3.1)*3)+1,2,\u00270\u0027)),\u0027-1\u0027)) report_date\\n,count(distinct t1.member_id) apply_user_cnts\\n,count(1) apply_cnts\\n,\u0027apply_1\u0027 stat_type\\n,\u00274\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\n,t1.systemtype\\nfrom etl_dwd.ng_okcard_apply_log t1 where t1.create_time \u003e\u003d \u00272022-01-02\u0027 group by 1,7,8\\n-- 申请用户数\\nunion all\\nselect date(concat(to_char(t1.create_time, \u0027YYYY\u0027),\u0027-01-01\u0027)) report_date\\n,count(distinct t1.member_id) apply_user_cnts\\n,count(1) apply_cnts\\n,\u0027apply_1\u0027 stat_type\\n,\u00275\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\n,t1.systemtype\\nfrom etl_dwd.ng_okcard_apply_log t1 group by 1,7,8\\n\\n----累计 申请用户数\\nunion all\\nselect dateadd(day,-1,current_date) report_date\\n,count(distinct t1.member_id) apply_user_cnts\\n,count(1) apply_cnts\\n,\u0027apply_1\u0027 stat_type\\n,\u00276\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\n,t1.systemtype\\nfrom etl_dwd.ng_okcard_apply_log t1  group by 1,7,8\\n\\n--------------------------------------------------------------------------------------------------------------\\n--part 4：设备锁激活成功用户数  --- 手机锁激活\\n--------------------------------------------------------------------------------------------------------------\\nunion all\\nselect date(t1.phone_lock_active_success_time) report_date\\n,count(distinct t1.member_id) apply_user_cnts ---手机锁激活人数\\n,count(1) apply_cnts\\n,\u0027device_activated\u0027 stat_type\\n,\u00271\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\n,b.systemtype\\nfrom etl_dwd.ng_okcard_user t1\\nleft join etl_dwb.ng_credit_user_android_ios b on t1.member_id\u003db.member_id and b.loan_product\u003d\u0027OKC\u0027\\nwhere t1.phone_lock_active_success_time is not null\\nand t1.phone_lock_active_success_time \u003e\u003d \u00272022-01-02\u0027 and t1.phone_lock_active_success_time \u003c current_date\\ngroup by 1,7,8 ;\\n--------------------------------------------------------------------------------------------\\n--手动commit\\n--------------------------------------------------------------------------------------------\\n\\n--------------------------------------------------------------------------------------------------------------\\n--part 5：授信通过用户数\\n--------------------------------------------------------------------------------------------------------------\\ninsert into tb_bidata.dws_okcard_apply_info\\nwith tmp_application as (\\nselect * from\\n(select a.*,row_number() over(partition by a.card_no order by a.create_time) rn--排除后期用户提额申请数据 20210907\\n,b.systemtype --ios,android\\nfrom etl_dwd.ng_okcard_application a\\nleft join etl_dwb.ng_credit_user_android_ios b on a.cid\u003db.member_id and b.loan_product\u003d\u0027OKC\u0027 ) p\\nwhere p.rn \u003d 1 )\\n\\n--授信通过--授信通过率\\nselect date(t1.create_time) report_date\\n,count(distinct case when t1.status\u003d2 and t1.cid not like \u0027%_del\u0027 then t1.card_no else null end) apply_user_cnts --授信通过人数\\n,count(1) apply_cnts--占位符，可视化没有依赖报表\\n,\u0027credit_approved\u0027 stat_type\\n,\u00271\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\n,t1.systemtype\\nfrom tmp_application t1  -- and t1.status \u003d 2 --1：申请中；2：通过；3：拒绝;\\nwhere t1.create_time \u003e\u003d \u00272022-01-02\u0027 group by 1,7,8\\nunion all\\nselect dateadd(day,-7,next_day(t1.create_time,\u0027Su\u0027)) report_date\\n,count(distinct case when t1.status\u003d2 and t1.cid not like \u0027%_del\u0027 then t1.card_no else null end) apply_user_cnts --授信通过人数\\n,count(1) apply_cnts\\n,\u0027credit_approved\u0027 stat_type\\n,\u00272\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\n,t1.systemtype\\nfrom tmp_application t1\\nwhere t1.create_time \u003e\u003d \u00272022-01-02\u0027 group by 1,7,8\\nunion all\\nselect last_day(t1.create_time) report_date\\n,count(distinct case when t1.status\u003d2 and t1.cid not like \u0027%_del\u0027 then t1.card_no else null end) apply_user_cnts --授信通过人数\\n,count(1) apply_cnts\\n,\u0027credit_approved\u0027 stat_type\\n,\u00273\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\n,t1.systemtype\\nfrom tmp_application t1\\nwhere t1.create_time \u003e\u003d \u00272022-01-02\u0027 group by 1,7,8\\nunion all\\nselect date(concat(concat(concat(to_char(t1.create_time, \u0027YYYY\u0027),\u0027-\u0027),lpad((floor(substring(t1.create_time,6,2)/3.1)*3)+1,2,\u00270\u0027)),\u0027-1\u0027)) report_date\\n,count(distinct case when t1.status\u003d2 and t1.cid not like \u0027%_del\u0027 then t1.card_no else null end) apply_user_cnts --授信通过人数\\n,count(1) apply_cnts\\n,\u0027credit_approved\u0027 stat_type\\n,\u00274\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\n,t1.systemtype\\nfrom tmp_application t1\\nwhere t1.create_time \u003e\u003d \u00272022-01-02\u0027 group by 1,7,8\\nunion all\\nselect date(concat(to_char(t1.create_time, \u0027YYYY\u0027),\u0027-01-01\u0027)) report_date\\n,count(distinct case when t1.status\u003d2 and t1.cid not like \u0027%_del\u0027 then t1.card_no else null end) apply_user_cnts --授信通过人数\\n,count(1) apply_cnts\\n,\u0027credit_approved\u0027 stat_type\\n,\u00275\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\n,t1.systemtype\\nfrom tmp_application t1\\nwhere t1.create_time \u003e\u003d \u00272022-01-02\u0027 group by 1,7,8\\n\\n--累计授信通过人数\\nunion all\\nselect dateadd(day,-1,current_date) report_date\\n,count(distinct case when t1.status\u003d2 and t1.cid not like \u0027%_del\u0027 then t1.card_no else null end) apply_user_cnts --通过人数\\n,count(1) apply_cnts\\n,\u0027credit_approved\u0027 stat_type\\n,\u00276\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\n,t1.systemtype\\nfrom tmp_application t1 group by 1,7,8\\n\\n------------------------------------------------------------------------------------------------------------------------\\n--part 5：平均额度\\n------------------------------------------------------------------------------------------------------------------------:\\nunion all\\nselect date(t1.create_time) report_date\\n,count(distinct t1.card_no) apply_user_cnts\\n,0.01*sum(t1.credit_limit_postpay) apply_cnts -- 平均额度 \u003d credit_limit_postpay/apply_user_cnts\\n,\u0027credit_quota\u0027 stat_type\\n,\u00271\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\n,t1.systemtype\\nfrom tmp_application t1 where t1.status\u003d2 and t1.create_time \u003e\u003d \u00272022-01-02\u0027 group by 1,7,8;\\n\\n\\n------------------------------------------------------------------------------------------------------------------------\\n--part 6：删除用户数、交易转化用户数\\n------------------------------------------------------------------------------------------------------------------------\\n--0901之后的删除用户开发逻辑变更\\ndelete from tb_bidata.dws_okcard_apply_info where stat_type\u003d\u0027delete_user\u0027 and report_date \u003d current_date -1 ;\\n\\ndelete from tb_bidata.dws_okcard_apply_info where stat_type\u003d\u0027txn_user\u0027 ;\\n\\ninsert into tb_bidata.dws_okcard_apply_info\\nwith tmp_application as (\\nselect * from\\n(select a.*,row_number() over(partition by a.card_no order by a.create_time) rn--排除后期用户提额申请数据 20210907\\n,b.systemtype --ios,android\\nfrom etl_dwd.ng_okcard_application a\\nleft join etl_dwb.ng_credit_user_android_ios b on a.cid\u003db.member_id and b.loan_product\u003d\u0027OKC\u0027 ) p\\nwhere p.rn \u003d 1 )\\n\\n,first_transs as (\\nselect * from (\\nselect pay_id,payer_member_id,update_time\\n,row_number() over(partition by payer_member_id order by update_time) rn\\nfrom etl_dwb.ng_okcard_transaction a where pay_status\u003d1) p\\nwhere p.rn\u003d1 )\\n------------------------------------------------------------------------------------------------------------------------\\n-- 1小时内下单用户数\\n-- 24小时内下单用户数\\n-- 3天内下单用户数\\n-- 7天下单用户数\\n-- 15天下单用户数\\nselect date(t.approved_time) report_date\\n,datediff(hour,t.approved_time,t.update_time) apply_user_cnts --datediff_hour\\n,count(distinct t.payer_member_id) apply_cnts--txn_users --下单用户数\\n,\u0027txn_user\u0027 stat_type\\n,\u00271\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,t.phone_lock_flag\\n,t.systemtype\\nfrom (\\nselect t.pay_id,t.update_time,t1.update_time approved_time,t.payer_member_id,t1.phone_lock_flag,systemtype\\nfrom first_transs t\\ninner join\\n(select cid,update_time,phone_lock_flag,systemtype from tmp_application where status \u003d 2 ) t1 on t.payer_member_id\u003dt1.cid ) t\\ngroup by 1,2,7,8\\n\\n------------------------------------------------------------------------------------------------------------------------\\n--20210907\\n---删除用户数\\nunion all\\nselect current_date -1 report_date\\n,count(distinct t1.card_no) apply_user_cnts  --删除用户数\\n,count(1) apply_cnts\\n,\u0027delete_user\u0027 stat_type\\n,\u00271\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\n,b.systemtype\\nfrom etl_dwd.ng_okcard_account t1\\nleft join etl_dwb.ng_credit_user_android_ios b on t1.cid\u003db.member_id and b.loan_product\u003d\u0027OKC\u0027\\nwhere t1.account_type\u003d6 and t1.account_status \u003d5 group by 1,7,8;\\n\\n------------------------------------------------------------------------------------------------------------------------\\n--part 7：20220406 目标用户访问app：有锁+非锁白名单\\n------------------------------------------------------------------------------------------------------------------------\\ndelete from tb_bidata.dws_okcard_apply_info where stat_type\u003d\u0027target_visit\u0027 and report_date \u003e\u003d current_date -3;\\n\\ninsert into tb_bidata.dws_okcard_apply_info\\n\\nselect date(b.visit_date) report_date\\n,count(distinct b.customer_user_id) apply_user_cnts\\n,count(1) apply_cnts\\n,\u0027target_visit\u0027 stat_type\\n,\u00271\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\n,t1.systemtype\\nfrom etl_dwd.ng_okcard_target_user t1\\ninner join tb_bidata.dwd_analysis_visit_info_all b on t1.member_id\u003db.customer_user_id\\nwhere b.visit_date \u003e\u003d current_date -3\\ngroup by 1,7,8 ;\\n\\n\",\"preStatements\":[],\"sqlType\":\"1\",\"receivers\":\"\",\"datasource\":3,\"showType\":\"TABLE\",\"localParams\":[],\"datasourceName\":\"mysql_conn\"},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":4,\"taskInstancePriority\":\"MEDIUM\",\"name\":\"dws_okcard_user\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"dwb_credit\"],\"id\":\"tasks-24651\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SQL\",\"params\":{\"postStatements\":[],\"connParams\":\"\",\"receiversCc\":\"\",\"udfs\":\"\",\"type\":\"POSTGRESQL\",\"title\":\"\",\"sql\":\"--20210617\\n-----------------------------------------------------------------------------------------------------------------------\\n----账单还款数据统计\\n------------------------------------------------------------------------------------------------------------------------\\n----每日全量更新 dt \u003d dateadd(day,-1,current_date) 的账单数据\\ndelete from tb_bidata.dws_okcard_bill_info where report_date \u003d dateadd(day,-1,current_date);\\n\\ninsert into tb_bidata.dws_okcard_bill_info\\n\\nselect dateadd(day,-1,t.dt) report_date --数据切片日期\\n,t.bill_date\\n,count(distinct t.account_id) user_cnts\\n,count(*) txn_cnts\\n----\\n,sum(t.used_amount)/100.0  used_amt-- 已用金额 --**应还金额,**当前已用金额\\n,sum(t.paid_principal)/100.0 paid_principal_amt--已还本金 **已还金额\\n,sum(t.paid_interest)/100.0 paid_interest_amt--已还利息 **已还金额\\n----\\n,sum(t.outstanding_amount)/100.0 outstanding_amt--**待还金额\u003d待还本金+待还利息+待还罚息\\n,sum(t.unpaid_principal)/100.0 unpaid_principal_amt--待还本金\u003d已用金额-已还本金\\n,sum(t.unpaid_interest)/100.0 unpaid_interest_amt--待还利息\\n,sum(t.unpaid_penalty)/100.0 unpaid_penalty_amt--待还罚息 **待收罚息金额\\n----\\n,sum(t.overdue_principal_amount)/100.0 overdue_principal_amt--逾期本金金额\\n,sum(t.paid_penalty)/100.0 paid_penalty_amt--已还罚息 **已还金额 **已收罚息金额\\n\\n--总应收罚息金额 \u003d 待收罚息金额 + 已收罚息金额\\n,unpaid_penalty_amt + paid_penalty_amt tot_penalty_amt--总应收罚息金额\\n\\n---- dpd1、dpd2、dpd3、dpd5、dpd7、dpd15、dpd30、dpd45、dpd60、dpd60+\\n,0.01*sum(case when datediff(day,t.repayment_date,t.dt) \u003d 2 then t.unpaid_principal else 0 end)/(used_amt+0.0001) dpd1\\n,0.01*sum(case when datediff(day,t.repayment_date,t.dt) \u003d 3 then t.unpaid_principal else 0 end)/(used_amt+0.0001) dpd2\\n,0.01*sum(case when datediff(day,t.repayment_date,t.dt) \u003d 4 then t.unpaid_principal else 0 end)/(used_amt+0.0001) dpd3\\n,0.01*sum(case when datediff(day,t.repayment_date,t.dt) \u003d 6 then t.unpaid_principal else 0 end)/(used_amt+0.0001) dpd5\\n,0.01*sum(case when datediff(day,t.repayment_date,t.dt) \u003d 8 then t.unpaid_principal else 0 end)/(used_amt+0.0001) dpd7\\n,0.01*sum(case when datediff(day,t.repayment_date,t.dt) \u003d 16 then t.unpaid_principal else 0 end)/(used_amt+0.0001) dpd15\\n,0.01*sum(case when datediff(day,t.repayment_date,t.dt) \u003d 31 then t.unpaid_principal else 0 end)/(used_amt+0.0001) dpd30\\n,0.01*sum(case when datediff(day,t.repayment_date,t.dt) \u003d 46 then t.unpaid_principal else 0 end)/(used_amt+0.0001) dpd45\\n,0.01*sum(case when datediff(day,t.repayment_date,t.dt) \u003d 61 then t.unpaid_principal else 0 end)/(used_amt+0.0001) dpd60\\n,0.01*sum(case when datediff(day,t.repayment_date,t.dt) \u003e 61 then t.unpaid_principal else 0 end)/(used_amt+0.0001) dpd60_\\n\\n---- 当前授信金额\\n,sum(t1.credit_limit_postpay)/100.0 credit_quota\\n\\n--M1金额,M2金额,M3金额 --逾期本金\\n,sum(case when datediff(day,t.repayment_date,t.dt) between 1 and 30 then t.unpaid_principal else 0 end)/100.0 m1_amt\\n,sum(case when datediff(day,t.repayment_date,t.dt) between 31 and 60 then t.unpaid_principal else 0 end)/100.0 m2_amt\\n,sum(case when datediff(day,t.repayment_date,t.dt) between 61 and 90 then t.unpaid_principal else 0 end)/100.0 m3_amt\\n\\n,\u0027NG\u0027 country_code\\n,t.phone_lock_flag\\nfrom etl_dwd.ng_okcard_debit_bill_slice t\\ninner join (select card_no,credit_limit_postpay\\n,row_number() over(partition by t1.card_no order by t1.create_time) rn from etl_dwd.ng_okcard_application t1 where t1.status \u003d 2 ) t1\\non t.card_no\u003dt1.card_no\\nwhere t.dt\u003dcurrent_date and t1.rn \u003d 1 group by 1,2,t.phone_lock_flag;\\n\\n--------------------------------------------------------------------------------------------------------------------\\n--------------------------------------------------------------------------------------------------------------------\\n--added on 20210728\\n---全量展示所有dpd信息\\n----每日全量更新 dt \u003d dateadd(day,-1,current_date) 的账单数据\\ndelete from tb_bidata.dws_okcard_dpd where report_date \u003d dateadd(day,-1,current_date);\\n\\ninsert into tb_bidata.dws_okcard_dpd\\n\\nselect dateadd(day,-1,t.dt) report_date --数据切片日期\\n,t.bill_date\\n,datediff(day,t.repayment_date,t.dt) dpd_level\\n----\\n,sum(t.used_amount)/100.0  used_amt--应还金额\\n,sum(t.paid_principal)/100.0 paid_principal_amt--已还金额\\n,sum(t.unpaid_principal)/100.0 unpaid_principal_amt--待还本金\u003d已用金额-已还本金\\n----\\n,round(0.01*sum(t.unpaid_principal)/(used_amt+0.0001),4) dpd_rate\\n\\n,\u0027NG\u0027 country_code\\n,t.phone_lock_flag\\nfrom etl_dwd.ng_okcard_debit_bill_slice t\\nwhere t.dt\u003dcurrent_date and dpd_level \u003e\u003d0 group by 1,2,3,t.phone_lock_flag;\\n\\n\\n-----------------------------------------------------------------------------------------------------------------------\\n-----------------------------------------------------------------------------------------------------------------------\\n-----------------------------------------------------------------------------------------------------------------------\\n--用户为单位的详情信息\\ndelete from tb_bidata.dwd_okcard_user_debit_info;\\n\\ninsert into tb_bidata.dwd_okcard_user_debit_info\\n\\nwith success_txn as (\\nselect pay_id\\n,payer_member_id\\n,business_amount\\n,update_time\\n,date(concat(to_char(date(update_time),\u0027YYYY-MM\u0027),\\n case when to_char(date(update_time),\u0027DD\u0027)\u003c16 then \u0027-01\u0027 else \u0027-16\u0027 end)) bill_update_time\\n\\n,row_number() over(partition by payer_member_id order by update_time) rn\\n\\nfrom etl_dwb.ng_okcard_transaction where pay_status\u003d1 )\\n\\n,total_txn as (select payer_member_id,sum(business_amount) business_amount,count(*) txn_cnts from success_txn group by 1)\\n\\n,debit_bill as (select a.card_no\\n,b.cid\\n,a.outstanding_amount --**待还金额\u003d待还本金+待还利息+待还罚息\\n--stauts:0 未欠款，1 未逾期待还，2 逾期待还，3 已还清\\n,case when a.repay_status \u003e\u003d 1 then \u0027有欠款\u0027 else \u0027未欠款\u0027 end repay_status\\n,case when a.is_overdue \u003e\u003d 1 then \u0027有逾期\u0027 else \u0027未逾期\u0027 end is_overdue\\nfrom (select card_no\\n,sum(case when stauts\u003d2 then 1 else 0 end) repay_status-- \u003e\u003d1，则为有欠款\\n,sum(case when stauts\u003d2 then 1 else 0 end) is_overdue -- \u003e\u003d1，则为逾期\\n,sum(outstanding_amount)  outstanding_amount\\nfrom etl_dwd.ng_okcard_debit_bill_slice where dt \u003d current_date group by 1) a\\ninner join (select card_no,cid,credit_limit_postpay\\n,row_number() over(partition by card_no order by create_time) rn\\nfrom etl_dwd.ng_okcard_application where status \u003d 2 ) b\\non a.card_no\u003db.card_no  and b.rn \u003d 1)\\n\\nselect t1.cid member_id\\n,datediff(year,t2.birthday,current_date) age\\n,t2.gender\\n--palmpay注册时间\\n--palmpay注册距今时长\\t当前时间-palmpay注册时间\\n,t2.create_time register_time\\n,datediff(day,t2.create_time,current_date) register_duration\\n,case when t2.bvn_ciphertext is not null then \u0027bvn已认证\u0027 else \u0027bvn未认证\u0027 end is_bvn\\n,t2.mobile_money_account_tier\\n,t1.create_time okcard_approved_time\\n,t1.credit_limit_postpay/100.0 initial_credit_quota\\n\\n--用户激活账期\\t发生第一笔成功交易所在的账期\\n--用户激活时间\\t发生第一笔成功交易的时间\\n,t4.bill_update_time first_trans_bill_time\\n,t4.update_time first_trans_time\\n\\n--用户激活耗时\\t用户激活时间-Okcard授信通过时间\\n,datediff(hour,t1.create_time,t4.update_time) transacted_hour\\n\\n--距今累计消费金额\\n--距今累计消费次数\\n,t5.business_amount/100.0 total_business_amt\\n,t5.txn_cnts\\n\\n--当前剩余待还金额\\n--当前还款状态\\t已还清、未还清\\n--当前是否有逾期\\t是/否\\n,t6.outstanding_amount\\n,t6.repay_status\\n,t6.is_overdue\\n\\nfrom (select cid,card_no,create_time,credit_limit_postpay\\n,row_number() over(partition by card_no order by create_time) rn\\nfrom etl_dwd.ng_okcard_application\\nwhere status \u003d 2 --1：申请中；2：通过；3：拒绝; --授信通过\\n) t1\\n\\ninner join report_mongo.ng_member t2 on t1.cid \u003d t2.member_id\\n\\n--首次交易 t\\nleft join (select * from success_txn where rn\u003d1 ) t4 on t2.member_id\u003dt4.payer_member_id\\n\\n--用户累计交易\\nleft join total_txn t5 on t2.member_id\u003dt5.payer_member_id\\n\\n--借贷信息\\nleft join debit_bill t6 on t1.card_no\u003dt6.card_no\\nwhere t1.rn \u003d 1;\\n\\n\\n\",\"preStatements\":[],\"sqlType\":\"1\",\"receivers\":\"\",\"datasource\":3,\"showType\":\"TABLE\",\"localParams\":[],\"datasourceName\":\"mysql_conn\"},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":4,\"taskInstancePriority\":\"HIGH\",\"name\":\"dws_okcard_bill\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"dws_okcard_transaction\"],\"id\":\"tasks-40537\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SQL\",\"params\":{\"postStatements\":[],\"connParams\":\"\",\"receiversCc\":\"\",\"udfs\":\"\",\"type\":\"POSTGRESQL\",\"title\":\"\",\"sql\":\"-------------------------------------------------------------------------------------------------------------------------\\n---------------------------------------------------------------------------------------------------------------------------\\n-----20210804 需求方，张宝杰\\n----主动还款：trans_type : \\\"g7\\\"\\n----代扣还款：trans_type : \\\"36\\\", payee_member_id : \\\"MC3578879706\\\"\\n--\\n----status:0 未欠款(未出账单就还清)，1 未逾期待还，2 逾期待还，\\n----status:3 已还清 ***已出账单后还清的话，stauts \u003d 3（已还清）\\n--\\n--\\n----自动代扣\\n----select * from report_mongo.ng_t_merchant_deduce_pay_order\\n----where merchant_no\u003d\u0027MC3336887714\u0027 limit 10\\n----orderStatus：订单状态：0、待支付；1、支付中；2、成功；3、失败； 4；关闭\\n--\\n--delete from tb_bidata.dws_okcard_repay_info where report_date \u003d dateadd(day,-1,current_date);\\n--\\n--insert into tb_bidata.dws_okcard_repay_info\\n--\\n--with\\n----还款账户\\n--tmp_repayment as\\n--(select payer_member_id\\n--,case when payer_account_type \u003d 1 then \u0027balance\u0027\\n--\\t  when payer_account_type \u003d 5 then \u0027bank_card\u0027\\n--\\t  when payer_account_type \u003d 6 then \u0027bank_account\u0027\\n--\\t  when payer_account_type \u003d 7 then \u0027point_account\u0027\\n--\\t  else \u0027others\u0027 end repayment_method\\n--,case when trans_type\u003d\u0027g7\u0027 then \u0027主动\u0027\\n--\\t  when trans_type\u003d\u002736\u0027 then \u0027代扣\u0027 end repayment_type\\n----,count(distinct payer_member_id) user_cnt\\n----,count(*) repayment_cnt\\n----,sum(business_amount)/100 repayment_amt\\n--from etl_dwb.ng_okcard_repayment where pay_status\u003d1 group by 1,2,3 )\\n--\\n---- bill_id为单位的 结清\\n--,tmp_okcard_order as (\\n--select bill_id\\n--,sum(t.amount) amount\\n--,max(date(update_time)) closed_date\\n--from etl_dwd.ng_okcard_order t\\n--where operation_type in (2,4)--operation_type 1：支付，2：主动还款，3：撤销，4：代扣还款\\n--and status\u003d1 group by 1)\\n--\\n------ 日还款\\n--,day_repayment as (\\n--select date(update_time) repay_dt\\n--,count(distinct card_no) repay_user\\n--,sum(amount) repay_amt\\n--,count(1) repay_cnt\\n--from etl_dwd.ng_okcard_order t\\n--where operation_type in (2,4)--operation_type 1：支付，2：主动还款，3：撤销，4：代扣还款\\n--and status\u003d1 group by 1)\\n--\\n--------------------------------------------------------------------------------------\\n--------------------------------------------------------------------------------------\\n--select dateadd(day,-1,t.dt) report_date --数据更新日期\\n--,t.repayment_date--还款日\\n--,t3.mobile_money_account_tier--用户等级\\n--,t3.gender--用户性别\\n--,t4.repayment_method--还款方式\\n--,t4.repayment_type--还款类型\\n--,t4.repayment_method deduce_method--代扣方式\\n--\\n----出账人数\\n--,count(distinct case when t.bill_status\u003d1 then t.card_no else null end) billed_user\\n----应还人数\\n--,count(distinct case when t.used_amount \u003e 0 then t.card_no else null end) used_users\\n----应还本金\\n--,sum(t.used_amount)/100 used_amt\\n--\\n--------已还------------\\n----累计已还人数\\n--,count(distinct case when t.paid_principal \u003e0 then t.card_no else null end) total_paid_user\\n----累计已还笔数\\n--,sum(t7.repay_cnt) total_paid_cnts --sum(t4.repayment_cnt) total_paid_cnts\\n----累计已还本金\\n--,sum(t.paid_principal)/100 total_paid_principals\\n----累计已还罚息\\n--,sum(t.paid_penalty)/100 total_paid_penaltys\\n----累计已还利息\\n--,sum(t.paid_interest)/100 total_paid_interests\\n----累计已还金额\\n--,total_paid_principals + total_paid_penaltys + total_paid_interests total_paid_amt\\n--\\n--------待还------------\\n----累计待还人数\\n--,count(case when t.unpaid_principal \u003e0 then t.card_no else null end) total_unpaid_user\\n----累计待还本金\\n--,sum(t.unpaid_principal)/100 total_unpaid_principals\\n----累计待还罚息\\n--,sum(t.unpaid_penalty)/100 total_unpaid_penaltys\\n----累计待还利息\\n--,sum(t.unpaid_interest)/100 total_unpaid_interests\\n----累计待还金额\\n--,total_unpaid_principals + total_unpaid_penaltys + total_unpaid_interests total_unpaid_amt\\n--\\n---------逾期---------stauts\u003d2：逾期待还----------\\n----逾期人数\\n--,count(distinct case when t.stauts \u003d 2 then t.card_no else null end) overdue_user\\n----逾期本金\\n--,sum(case when t.stauts \u003d 2 then t.unpaid_principal else 0 end)/100 overdue_unpaid_principal\\n----逾期罚息\\n--,sum(case when t.stauts \u003d 2 then t.unpaid_penalty else 0 end)/100 overdue_unpaid_penalty\\n----逾期利息\\n--,sum(case when t.stauts \u003d 2 then t.unpaid_interest else 0 end)/100 overdue_unpaid_interest\\n----逾期金额\\n--,overdue_unpaid_interest + overdue_unpaid_penalty + overdue_unpaid_principal overdue_amt\\n--\\n----人数逾期率 \u003d 逾期人数/应还人数 \u003d overdue_user/used_users\\n----金额逾期率 \u003d 逾期本金/应还本金 \u003d overdue_unpaid_principal/used_amt\\n--\\n---------结清----------------\\n----累计结清人数\\n--,count(distinct case when t.stauts \u003d 3 then t.card_no else null end) total_closed_user\\n----累计结清本金\\n--,sum(case when t.stauts \u003d 3 then t.paid_principal else 0 end)/100 total_closed_principal\\n----累计结清罚息\\n--,sum(case when t.stauts \u003d 3 then t.paid_penalty else 0 end)/100 total_closed_penalty\\n----累计结清利息\\n--,sum(case when t.stauts \u003d 3 then t.paid_interest else 0 end)/100 total_closed_interest\\n----累计结清金额\\n--,total_closed_principal + total_closed_penalty + total_closed_interest total_closed_amt\\n--\\n--------当日还款--------------------\\n----当日还款人数\\n--,t7.repay_user day_repayment_user --t4.user_cnt\\n----当日还款笔数\\n--,t7.repay_cnt day_repayment_cnt--t4.repayment_cnt\\n----当日还款本金\\n--,(sum(t.paid_principal)-sum(b.paid_principal))/100 day_paid_principal\\n----当日还款罚息\\n--,(sum(t.paid_penalty)-sum(b.paid_penalty))/100 day_paid_penalty\\n----当日还款利息\\n--,(sum(t.paid_interest)-sum(b.paid_interest))/100 day_paid_interest\\n----当日还款金额\\n--,t7.repay_amt/100 day_repayment_amt--t4.repayment_amt\\n--\\n---------当日结清-------------stauts\u003d2\\n----当日结清人数\\n--,count(distinct case when t5.closed_date \u003d dateadd(day,-1,t.dt) and t5.amount \u003e\u003d t.used_amount then t.card_no else null end) closed_user\\n----当日结清本金\\n--,sum(case when t5.closed_date \u003d dateadd(day,-1,t.dt) and t5.amount \u003e\u003d t.used_amount then t.paid_principal else 0 end)/100 closed_paid_principal\\n----当日结清罚息\\n--,sum(case when t5.closed_date \u003d dateadd(day,-1,t.dt) and t5.amount \u003e\u003d t.used_amount then t.paid_penalty else 0 end)/100 closed_paid_penalty\\n----当日结清利息\\n--,sum(case when t5.closed_date \u003d dateadd(day,-1,t.dt) and t5.amount \u003e\u003d t.used_amount then t.paid_interest else 0 end)/100 closed_paid_interest\\n----当日结清金额\\n--,sum(case when t5.closed_date \u003d dateadd(day,-1,t.dt) and t5.amount \u003e\u003d t.used_amount then t.used_amount else 0 end)/100 closed_used_amt\\n----\\n--,\u0027NG\u0027 country_code\\n--\\n--from (select * from etl_dwd.ng_okcard_debit_bill_slice where dt \u003d current_date)t\\n--inner join (select card_no,cid\\n--from etl_dwd.ng_okcard_application where status \u003d 2) t1\\n--on t.card_no\u003dt1.card_no\\n--\\n----取当日还款\\n--inner join (select dt,id,paid_principal,paid_penalty,paid_interest\\n--from etl_dwd.ng_okcard_debit_bill_slice where dt \u003d dateadd(day,-1,current_date)) b\\n--on b.id \u003d t.id --and b.dt \u003d dateadd(day,-1,t.dt)\\n--\\n--inner join etl_dwd.ng_member t3 on t1.cid\u003dt3.member_id\\n--\\n--left join tmp_repayment t4 on t4.payer_member_id \u003d t3.member_id\\n--\\n--left join day_repayment t7 on t7.repay_dt \u003d dateadd(day,-1,t.dt)\\n--\\n----一个账期bill_id内的累计还款\\n--left join tmp_okcard_order t5 on t.id \u003d t5.bill_id\\n--\\n--group by 1,2,3,4,5,6,7,day_repayment_amt,t7.repay_cnt,t7.repay_user;\\n--\\n--\\n\\n\\n-------------------------------------------------------------------------------------------------------------------------\\n--20210804 张娜 nana start\\n-------------------------------------------------------------------------------------------------------------------------\\n\\ndelete from tb_bidata.dws_okcard_full_info where time_type\u003c\u003e\u00279\u0027;\\ndelete from tb_bidata.dws_okcard_full_info where time_type\u003d\u00279\u0027 and report_date \u003d dateadd(day,-1,current_date);\\n\\n\\ninsert into tb_bidata.dws_okcard_full_info\\n\\n\\nwith tmp_1 as (select t1.*\\n,row_number() over(partition by t1.card_no order by t1.create_time) rn from etl_dwd.ng_okcard_application t1 where t1.status \u003d 2 )\\n\\n,dws_okcard_bill_tmp as (select dateadd(day,-1,t1.dt) dt\\n\\n,count(distinct t1.account_id) as users\\n,count(distinct case when t1.used_amount\u003e0 then t1.account_id end) as used_users--已用额度人数\\n,count(distinct case when t1.bill_status\u003d1 then t1.account_id end) as outbill_users--账单人数\\n,count(distinct case when t1.bill_status\u003d1 and t1.used_amount\u003e0 then t1.account_id end) as outbill_used_users--已出账单已用人数\\n\\n--结清\\n,count(distinct case when t1.used_amount\u003e0 and t1.outstanding_amount\u003c\u003d0 then t1.account_id end) as settle_users --结清人数\\n,sum(case when t1.used_amount\u003e0 and t1.outstanding_amount\u003c\u003d0 then (t1.paid_principal+t1.paid_penalty) end)/100  as settle_amt--结清金额\\n,sum(case when t1.used_amount\u003e0 and t1.outstanding_amount\u003c\u003d0 then (t1.paid_principal) end)/100  as settle_principal--结清金本金\\n,sum(t1.used_amount )/100 as used_amt ----结清金额\\n\\n--已出账单\\n,sum(case when t1.bill_status\u003d1 then t1.used_amount end)/100 as outbill_used_amt--已出账单已用金额\\n,sum(t1.unpaid_principal )/100 as unpaid_principal_amt--待还本金\\n,sum(case when t1.bill_status\u003d1 then t1.unpaid_principal end)/100 as outbill_unpaid_principal_amt--已出账单待还本金\\n\\n,sum(t1.paid_principal )/100 as paid_principal_amt ----已还本金\\n,sum(case when t1.bill_status\u003d1 then t1.paid_principal end)/100 as outbill_paid_principal_amt--已出账单已还本金\\n,sum(t1.paid_penalty )/100 as paid_penalty_amt--已还罚息\\n,sum(t1.unpaid_penalty )/100 as unpaid_penalty_amt--待还罚息\\n--已出账单结清\\n,count(distinct case when t1.bill_status\u003d1 and t1.used_amount\u003e0 and t1.outstanding_amount\u003c\u003d0 then t1.account_id end) as outbill_settle_users --已出账单结清人数\\n,sum(case when t1.bill_status\u003d1 and t1.used_amount\u003e0 and t1.outstanding_amount\u003c\u003d0 then t1.paid_penalty end)/100  as outbill_settle_penalty --已出账单结清罚息\\n,sum(case when t1.bill_status\u003d1 and t1.used_amount\u003e0 and t1.outstanding_amount\u003c\u003d0 then (t1.paid_principal) end)/100  as outbill_settle_principal --已出账单结清本金\\n\\n--已出账单逾期人数\\n,sum(case when t1.stauts\u003d2 and datediff(day,t1.repayment_date,t1.dt) between 1 and 7 then 1 end) as over_1_7d_unpaid_user   --已出账单逾期1-7d人数\\n,sum(case when t1.stauts\u003d2 and datediff(day,t1.repayment_date,t1.dt)between 8 and 14 then 1 end) as over_8_14d_unpaid_user  --已出账单逾期8-14d人数\\n,sum(case when t1.stauts\u003d2 and datediff(day,t1.repayment_date,t1.dt)between 15 and 30 then 1 end) as over_15_30d_unpaid_user--已出账单逾期15-30d人数\\n,sum(case when t1.stauts\u003d2 and datediff(day,t1.repayment_date,t1.dt)between 31 and 60 then 1 end) as over_m2_unpaid_user    --已出账单逾期31-60d人数\\n,sum(case when t1.stauts\u003d2 and datediff(day,t1.repayment_date,t1.dt)between 61 and 90 then 1 end) as over_m3_unpaid_user    --已出账单逾期61-90d人数\\n,sum(case when t1.stauts\u003d2 and datediff(day,t1.repayment_date,t1.dt)\u003e\u003d91 then 1 end) as over_wo_unpaid_user                 --已出账单逾期90d+人数\\n\\n--已出账单逾期金额\\n,sum(case when t1.stauts\u003d2 and datediff(day,t1.repayment_date,t1.dt) between 1 and 7 then t1.unpaid_principal end)/100 as over_1_7d_unpaid_amt   --已出账单逾期1-7d金额\\n,sum(case when t1.stauts\u003d2 and datediff(day,t1.repayment_date,t1.dt)between 8 and 14 then t1.unpaid_principal end)/100 as over_8_14d_unpaid_amt  --已出账单逾期8-14d金额\\n,sum(case when t1.stauts\u003d2 and datediff(day,t1.repayment_date,t1.dt)between 15 and 30 then t1.unpaid_principal end)/100 as over_15_30d_unpaid_amt--已出账单逾期15-30d金额\\n,sum(case when t1.stauts\u003d2 and datediff(day,t1.repayment_date,t1.dt)between 31 and 60 then t1.unpaid_principal end)/100 as over_m2_unpaid_amt    --已出账单逾期31-60d金额\\n,sum(case when t1.stauts\u003d2 and datediff(day,t1.repayment_date,t1.dt)between 61 and 90 then t1.unpaid_principal end)/100 as over_m3_unpaid_amt    --已出账单逾期61-90d金额\\n,sum(case when t1.stauts\u003d2 and datediff(day,t1.repayment_date,t1.dt)\u003e\u003d91 then t1.unpaid_principal end)/100 as over_wo_unpaid_amt                 --已出账单逾期90d+金额\\n,sum(case when t1.bill_status\u003d0 then t1.unpaid_principal end)/100 as notout_unpaid_amt\\n\\nfrom etl_dwd.ng_okcard_debit_bill_slice  t1 group by 1)\\n\\nselect d1.dt report_date\\n,d1.apply_users\\n,d2.phone_lock_active_users\\n,d3.active_users\\n,round(d3.active_users::float/d1.apply_users,4) as active_user_rate\\n,d3.credit_limit\\n,d3.average_credit_limit\\n,d3.min_credit_limit\\n,d3.max_credit_limit\\n,d4.first_trans_users\\n,round(d4.first_trans_users::float/d3.active_users,4) as first_trans_rate\\n,d4.new_first_trans_users\\n,d4.old_first_trans_users\\n,d5.trans_users\\n,d5.volume\\n,d5.value\\n,round(d5.volume::float/d5.trans_users,2) as pre_user_volume\\n,round(d5.value/d5.trans_users,2) as pre_volume_value\\n,d6.users as bill_users\\n,d6.used_users\\n,d6.settle_users\\n,d6.settle_amt\\n,d6.settle_principal\\n,d6.used_amt\\n,d6.paid_principal_amt\\n,(d6.paid_penalty_amt+d6.paid_principal_amt) as paid_amt\\n,d6.unpaid_principal_amt\\n,(d6.unpaid_penalty_amt+d6.unpaid_principal_amt) as unpaid_amt\\n,d6.outbill_used_users\\n,d6.outbill_used_amt\\n,(d6.outbill_paid_principal_amt+d6.paid_penalty_amt) as outbill_paid_amt\\n,d6.outbill_paid_principal_amt\\n,d6.paid_penalty_amt\\n,(d6.outbill_unpaid_principal_amt+d6.unpaid_penalty_amt) as outbill_unpaid_amt\\n,d6.outbill_unpaid_principal_amt,d6.unpaid_penalty_amt\\n,d6.outbill_settle_users\\n,(d6.outbill_settle_principal+d6.outbill_settle_penalty) as outbill_settle_amt\\n,d6.outbill_settle_principal,d6.outbill_settle_penalty\\n,d6.over_1_7d_unpaid_amt\\n,d6.over_8_14d_unpaid_amt\\n,d6.over_15_30d_unpaid_amt\\n,d6.over_m2_unpaid_amt\\n,d6.over_m3_unpaid_amt\\n,d6.over_wo_unpaid_amt\\n,d6.over_1_7d_unpaid_user\\n,d6.over_8_14d_unpaid_user\\n,d6.over_15_30d_unpaid_user\\n,d6.over_m2_unpaid_user\\n,d6.over_m3_unpaid_user\\n,d6.over_wo_unpaid_user\\n,d7.back_users\\n,d7.back_cnt\\n,d7.back_amt\\n,d8.back_users as withholding_back_users\\n,d8.back_cnt as withholding_back_cnt\\n,d8.back_amt as withholding_back_amt\\n,\u00271\u0027 time_type\\n,\u0027NG\u0027 country_code\\nfrom\\n---1.申请人数\\n(\\nselect t1.report_date dt\\n,t1.apply_user_cnts apply_users\\nfrom tb_bidata.dws_okcard_apply_info t1\\nwhere stat_type\u003d\u0027apply\u0027 and time_type\u003d\u00271\u0027 and country_code\u003d\u0027NG\u0027) d1\\n\\n---2.手机锁激活人数\\nleft join (\\nselect t1.report_date dt\\n,t1.apply_user_cnts phone_lock_active_users\\nfrom tb_bidata.dws_okcard_apply_info t1\\nwhere stat_type\u003d\u0027device_activated\u0027 and country_code\u003d\u0027NG\u0027)d2\\non d1.dt\u003dd2.dt\\n\\n---3.授信\\nleft join (select date(t1.update_time) dt\\n,count(distinct t1.mobile_no) as active_users---授信成功人数\\n,sum(t1.credit_limit_postpay)/100.0 as credit_limit---累计授信额度\\n,round(credit_limit/active_users,2) as average_credit_limit ---平均授信额度\\n,max(t1.credit_limit_postpay)/100 as max_credit_limit\\n,min(t1.credit_limit_postpay)/100 as min_credit_limit\\nfrom tmp_1 t1 group by 1 )d3\\non d1.dt\u003dd3.dt\\n\\n---4.交易激活\\nleft join (select date(tt.update_time) dt\\n,count(distinct tt.payer_member_id) first_trans_users---总激活人数\\n,count(case when date(tt.update_time)\u003ddate(t2.create_time) then tt.payer_member_id end)  new_first_trans_users--当天注册的激活用户\\n,first_trans_users-new_first_trans_users as old_first_trans_users --非当天注册的激活用户\\nfrom (select t1.payer_member_id,t1.update_time\\n,row_number() over(partition by t1.payer_member_id order by t1.update_time) rn\\nfrom etl_dwb.ng_okcard_transaction t1 where t1.pay_status\u003d1 ) tt\\ninner join etl_dwd.ng_member t2 on tt.payer_member_id\u003dt2.member_id\\nwhere tt.rn\u003d1 group by 1 ) d4\\non d1.dt\u003dd4.dt\\n\\n---5.交易活跃\\nleft join (\\nselect t1.report_date dt\\n,t1.user_cnts trans_users---交易人数\\n,t1.txn_cnt volume---交易笔数\\n,t1.pay_amt as value ---交易金额\\nfrom tb_bidata.dws_okcard_transaction t1\\nwhere t1.trans_type\u003d\u0027overall\u0027 and t1.pay_status\u003d1\\nand t1.time_type\u003d11 and t1.country_code\u003d\u0027NG\u0027 ) d5\\non d1.dt\u003dd5.dt\\n\\n---6.账期\\nleft join (select * from dws_okcard_bill_tmp) d6\\non d1.dt \u003d d6.dt\\n\\n---7.还款 --g7\\nleft join (select date(t1.update_time) dt,\\n\\ncount(distinct t1.payer_member_id) as back_users,\\ncount(1) as back_cnt,\\nsum(t1.business_amount )/100 as back_amt ,\\n\\nsum(case when t1.payer_account_type\u003d1 then t1.business_amount end)/100 as balance_back_amt,\\nsum(case when t1.payer_account_type\u003d5 then t1.business_amount end)/100 as bankcard_back_amt,\\nsum(case when t1.payer_account_type\u003d6 then t1.business_amount end)/100 as bankaccount_back_amt,\\n\\ncount(case when t1.payer_account_type\u003d1 then t1.payer_member_id end) as balance_back_cnt,\\ncount(case when t1.payer_account_type\u003d5 then t1.payer_member_id end) as bankcard_back_cnt,\\ncount(case when t1.payer_account_type\u003d6 then t1.payer_member_id end) as bankaccount_back_cnt,\\n\\ncount(distinct case when t1.payer_account_type\u003d1 then t1.payer_member_id end) as balance_back_user,\\ncount(distinct case when t1.payer_account_type\u003d5 then t1.payer_member_id end) as bankcard_back_user,\\ncount(distinct case when t1.payer_account_type\u003d6 then t1.payer_member_id end) as bankaccount_back_user\\n\\nfrom etl_dwb.ng_okcard_repayment t1\\n--inner join (select * from report_mongo.ng_t_postpay_application t where t.account_type\u003d6 and t.status\u003d2  and dateadd(hour,1,t.create_time) \u003e\u003d\u00272021-07-01\u0027 ) t2\\n--on t1.payer_member_id \u003dt2.cid\\nwhere t1.pay_status\u003d1 group by 1 ) d7\\non d1.dt\u003dd7.dt\\n\\n---8.还款 --g7 --(代扣还款)\\nleft join (select date(t1.update_time) dt,\\ncount(distinct t1.card_no) as back_users,\\ncount(1) as back_cnt,\\nsum(t1.amount)/100 as back_amt\\nfrom etl_dwd.ng_okcard_order t1\\nwhere t1.status\u003d1 and t1.operation_type\u003d4--1：支付，2：主动还款，3：撤销，4：代扣还款\\ngroup by 1 ) d8\\non d1.dt\u003dd8.dt\\n\\nunion all\\n\\nselect d1.dt report_date\\n,d1.apply_users\\n,d2.phone_lock_active_users\\n,d3.active_users\\n,round(d3.active_users::float/d1.apply_users,4) as active_user_rate\\n,d3.credit_limit\\n,d3.average_credit_limit\\n,d3.min_credit_limit\\n,d3.max_credit_limit\\n,d4.first_trans_users\\n,round(d4.first_trans_users::float/d3.active_users,4) as first_trans_rate\\n,d4.new_first_trans_users\\n,d4.old_first_trans_users\\n,d5.trans_users\\n,d5.volume\\n,d5.value\\n,round(d5.volume::float/d5.trans_users,2) as pre_user_volume\\n,round(d5.value/d5.trans_users,2) as pre_volume_value\\n,d6.users as bill_users\\n,d6.used_users\\n,d6.settle_users\\n,d6.settle_amt\\n,d6.settle_principal\\n,d6.used_amt\\n,d6.paid_principal_amt\\n,(d6.paid_penalty_amt+d6.paid_principal_amt) as paid_amt\\n,d6.unpaid_principal_amt\\n,(d6.unpaid_penalty_amt+d6.unpaid_principal_amt) as unpaid_amt\\n,d6.outbill_used_users\\n,d6.outbill_used_amt\\n,(d6.outbill_paid_principal_amt+d6.paid_penalty_amt) as outbill_paid_amt\\n,d6.outbill_paid_principal_amt\\n,d6.paid_penalty_amt\\n,(d6.outbill_unpaid_principal_amt+d6.unpaid_penalty_amt) as outbill_unpaid_amt\\n,d6.outbill_unpaid_principal_amt,d6.unpaid_penalty_amt\\n,d6.outbill_settle_users\\n,(d6.outbill_settle_principal+d6.outbill_settle_penalty) as outbill_settle_amt\\n,d6.outbill_settle_principal,d6.outbill_settle_penalty\\n,d6.over_1_7d_unpaid_amt\\n,d6.over_8_14d_unpaid_amt\\n,d6.over_15_30d_unpaid_amt\\n,d6.over_m2_unpaid_amt\\n,d6.over_m3_unpaid_amt\\n,d6.over_wo_unpaid_amt\\n,d6.over_1_7d_unpaid_user\\n,d6.over_8_14d_unpaid_user\\n,d6.over_15_30d_unpaid_user\\n,d6.over_m2_unpaid_user\\n,d6.over_m3_unpaid_user\\n,d6.over_wo_unpaid_user\\n,d7.back_users\\n,d7.back_cnt\\n,d7.back_amt\\n,d8.back_users as withholding_back_users\\n,d8.back_cnt as withholding_back_cnt\\n,d8.back_amt as withholding_back_amt\\n,\u00272\u0027 time_type\\n,\u0027NG\u0027 country_code\\nfrom\\n---1.申请人数\\n(select dateadd(day,-7,next_day(t1.create_time,\u0027W\u0027)) dt\\n,count(distinct t1.member_id) apply_users\\nfrom etl_dwd.ng_okcard_user t1 group by 1) d1\\n\\n---2.手机锁激活人数\\nleft join (\\nselect dateadd(day,-7,next_day(t1.report_date,\u0027W\u0027)) dt\\n,sum(t1.apply_user_cnts) phone_lock_active_users\\nfrom tb_bidata.dws_okcard_apply_info t1\\nwhere stat_type\u003d\u0027device_activated\u0027 and country_code\u003d\u0027NG\u0027 group by 1)d2\\non d1.dt\u003dd2.dt\\n\\n---3.授信\\nleft join (select dateadd(day,-7,next_day(t1.update_time,\u0027W\u0027)) dt\\n,count(distinct t1.mobile_no) as active_users---授信成功人数\\n,sum(t1.credit_limit_postpay)/100.0 as credit_limit---累计授信额度\\n,round(credit_limit/active_users,2) as average_credit_limit ---平均授信额度\\n,max(t1.credit_limit_postpay)/100 as max_credit_limit\\n,min(t1.credit_limit_postpay)/100 as min_credit_limit\\nfrom tmp_1 t1 group by 1 )d3\\non d1.dt\u003dd3.dt\\n\\n---4.交易激活\\nleft join (select dateadd(day,-7,next_day(tt.update_time,\u0027W\u0027)) dt\\n,count(distinct tt.payer_member_id) first_trans_users---总激活人数\\n,count(case when date(tt.update_time)\u003ddate(t2.create_time) then tt.payer_member_id end)  new_first_trans_users--当天注册的激活用户\\n,first_trans_users-new_first_trans_users as old_first_trans_users --非当天注册的激活用户\\nfrom (select t1.payer_member_id,t1.update_time\\n,row_number() over(partition by t1.payer_member_id order by t1.update_time) rn\\nfrom etl_dwb.ng_okcard_transaction t1 where t1.pay_status\u003d1 ) tt\\ninner join etl_dwd.ng_member t2 on tt.payer_member_id\u003dt2.member_id\\nwhere tt.rn\u003d1 group by 1 ) d4\\non d1.dt\u003dd4.dt\\n\\n---5.交易活跃\\nleft join (SELECT dateadd(day,-7,next_day(t1.update_time,\u0027W\u0027)) dt,\\ncount(DISTINCT t1.payer_member_id) trans_users,---交易人数\\ncount(1) volume,---交易笔数\\nsum(t1.pay_amount)/100.0 as value ---交易金额\\nfrom etl_dwb.ng_okcard_transaction t1\\nwhere t1.pay_status\u003d1 group by 1 ) d5\\non d1.dt\u003dd5.dt\\n\\n---6.账期\\nleft join (select * from dws_okcard_bill_tmp) d6\\non d1.dt \u003d d6.dt\\n\\n---7.还款 --g7\\nleft join (select dateadd(day,-7,next_day(t1.update_time,\u0027W\u0027)) dt,\\n\\ncount(distinct t1.payer_member_id) as back_users,\\ncount(1) as back_cnt,\\nsum(t1.business_amount )/100 as back_amt ,\\n\\nsum(case when t1.payer_account_type\u003d1 then t1.business_amount end)/100 as balance_back_amt,\\nsum(case when t1.payer_account_type\u003d5 then t1.business_amount end)/100 as bankcard_back_amt,\\nsum(case when t1.payer_account_type\u003d6 then t1.business_amount end)/100 as bankaccount_back_amt,\\n\\ncount(case when t1.payer_account_type\u003d1 then t1.payer_member_id end) as balance_back_cnt,\\ncount(case when t1.payer_account_type\u003d5 then t1.payer_member_id end) as bankcard_back_cnt,\\ncount(case when t1.payer_account_type\u003d6 then t1.payer_member_id end) as bankaccount_back_cnt,\\n\\ncount(distinct case when t1.payer_account_type\u003d1 then t1.payer_member_id end) as balance_back_user,\\ncount(distinct case when t1.payer_account_type\u003d5 then t1.payer_member_id end) as bankcard_back_user,\\ncount(distinct case when t1.payer_account_type\u003d6 then t1.payer_member_id end) as bankaccount_back_user\\n\\nfrom etl_dwb.ng_okcard_repayment t1\\n--inner join (select * from report_mongo.ng_t_postpay_application t where t.account_type\u003d6 and t.status\u003d2  and dateadd(hour,1,t.create_time) \u003e\u003d\u00272021-07-01\u0027 ) t2\\n--on t1.payer_member_id \u003dt2.cid\\nwhere t1.pay_status\u003d1 group by 1 ) d7\\non d1.dt\u003dd7.dt\\n\\n---8.还款 --g7 --(代扣还款)\\nleft join (select dateadd(day,-7,next_day(t1.update_time,\u0027W\u0027)) dt,\\ncount(distinct t1.card_no) as back_users,\\ncount(1) as back_cnt,\\nsum(t1.amount)/100 as back_amt\\nfrom etl_dwd.ng_okcard_order t1\\nwhere t1.status\u003d1 and t1.operation_type\u003d4--1：支付，2：主动还款，3：撤销，4：代扣还款\\ngroup by 1 ) d8\\non d1.dt\u003dd8.dt\\n\\nunion all\\n\\nselect d1.dt report_date\\n,d1.apply_users\\n,d2.phone_lock_active_users\\n,d3.active_users\\n,round(d3.active_users::float/d1.apply_users,4) as active_user_rate\\n,d3.credit_limit\\n,d3.average_credit_limit\\n,d3.min_credit_limit\\n,d3.max_credit_limit\\n,d4.first_trans_users\\n,round(d4.first_trans_users::float/d3.active_users,4) as first_trans_rate\\n,d4.new_first_trans_users\\n,d4.old_first_trans_users\\n,d5.trans_users\\n,d5.volume\\n,d5.value\\n,round(d5.volume::float/d5.trans_users,2) as pre_user_volume\\n,round(d5.value/d5.trans_users,2) as pre_volume_value\\n,d6.users as bill_users\\n,d6.used_users\\n,d6.settle_users\\n,d6.settle_amt\\n,d6.settle_principal\\n,d6.used_amt\\n,d6.paid_principal_amt\\n,(d6.paid_penalty_amt+d6.paid_principal_amt) as paid_amt\\n,d6.unpaid_principal_amt\\n,(d6.unpaid_penalty_amt+d6.unpaid_principal_amt) as unpaid_amt\\n,d6.outbill_used_users\\n,d6.outbill_used_amt\\n,(d6.outbill_paid_principal_amt+d6.paid_penalty_amt) as outbill_paid_amt\\n,d6.outbill_paid_principal_amt\\n,d6.paid_penalty_amt\\n,(d6.outbill_unpaid_principal_amt+d6.unpaid_penalty_amt) as outbill_unpaid_amt\\n,d6.outbill_unpaid_principal_amt,d6.unpaid_penalty_amt\\n,d6.outbill_settle_users\\n,(d6.outbill_settle_principal+d6.outbill_settle_penalty) as outbill_settle_amt\\n,d6.outbill_settle_principal,d6.outbill_settle_penalty\\n,d6.over_1_7d_unpaid_amt\\n,d6.over_8_14d_unpaid_amt\\n,d6.over_15_30d_unpaid_amt\\n,d6.over_m2_unpaid_amt\\n,d6.over_m3_unpaid_amt\\n,d6.over_wo_unpaid_amt\\n,d6.over_1_7d_unpaid_user\\n,d6.over_8_14d_unpaid_user\\n,d6.over_15_30d_unpaid_user\\n,d6.over_m2_unpaid_user\\n,d6.over_m3_unpaid_user\\n,d6.over_wo_unpaid_user\\n,d7.back_users\\n,d7.back_cnt\\n,d7.back_amt\\n,d8.back_users as withholding_back_users\\n,d8.back_cnt as withholding_back_cnt\\n,d8.back_amt as withholding_back_amt\\n,\u00273\u0027 time_type\\n,\u0027NG\u0027 country_code\\nfrom\\n---1.申请人数\\n(\\nselect t1.report_date dt\\n,t1.apply_user_cnts apply_users\\nfrom tb_bidata.dws_okcard_apply_info t1\\nwhere stat_type\u003d\u0027apply\u0027 and time_type\u003d\u00273\u0027 and country_code\u003d\u0027NG\u0027) d1\\n\\n---2.手机锁激活人数\\nleft join (\\nselect last_day(t1.report_date) dt\\n,sum(t1.apply_user_cnts) phone_lock_active_users\\nfrom tb_bidata.dws_okcard_apply_info t1\\nwhere stat_type\u003d\u0027device_activated\u0027 and country_code\u003d\u0027NG\u0027 group by 1)d2\\non d1.dt\u003dd2.dt\\n\\n---3.授信\\nleft join (select last_day(t1.update_time) dt\\n,count(distinct t1.mobile_no) as active_users---授信成功人数\\n,sum(t1.credit_limit_postpay)/100.0 as credit_limit---累计授信额度\\n,round(credit_limit/active_users,2) as average_credit_limit ---平均授信额度\\n,max(t1.credit_limit_postpay)/100 as max_credit_limit\\n,min(t1.credit_limit_postpay)/100 as min_credit_limit\\nfrom tmp_1 t1 group by 1 )d3\\non d1.dt\u003dd3.dt\\n\\n---4.交易激活\\nleft join (select last_day(tt.update_time) dt\\n,count(distinct tt.payer_member_id) first_trans_users---总激活人数\\n,count(case when date(tt.update_time)\u003ddate(t2.create_time) then tt.payer_member_id end)  new_first_trans_users--当天注册的激活用户\\n,first_trans_users-new_first_trans_users as old_first_trans_users --非当天注册的激活用户\\nfrom (select t1.payer_member_id,t1.update_time\\n,row_number() over(partition by t1.payer_member_id order by t1.update_time) rn\\nfrom etl_dwb.ng_okcard_transaction t1 where t1.pay_status\u003d1 ) tt\\ninner join etl_dwd.ng_member t2 on tt.payer_member_id\u003dt2.member_id\\nwhere tt.rn\u003d1 group by 1 ) d4\\non d1.dt\u003dd4.dt\\n\\n---5.交易活跃\\nleft join (\\nselect t1.report_date dt\\n,t1.user_cnts trans_users---交易人数\\n,t1.txn_cnt volume---交易笔数\\n,t1.pay_amt as value ---交易金额\\nfrom tb_bidata.dws_okcard_transaction t1\\nwhere t1.trans_type\u003d\u0027overall\u0027 and t1.pay_status\u003d1\\nand t1.time_type\u003d\u002711-3\u0027 and t1.country_code\u003d\u0027NG\u0027 ) d5\\non d1.dt\u003dd5.dt\\n\\n---6.账期\\nleft join (select * from dws_okcard_bill_tmp) d6\\non d1.dt \u003d d6.dt\\n\\n---7.还款 --g7\\nleft join (select last_day(t1.update_time) dt,\\n\\ncount(distinct t1.payer_member_id) as back_users,\\ncount(1) as back_cnt,\\nsum(t1.business_amount )/100 as back_amt ,\\n\\nsum(case when t1.payer_account_type\u003d1 then t1.business_amount end)/100 as balance_back_amt,\\nsum(case when t1.payer_account_type\u003d5 then t1.business_amount end)/100 as bankcard_back_amt,\\nsum(case when t1.payer_account_type\u003d6 then t1.business_amount end)/100 as bankaccount_back_amt,\\n\\ncount(case when t1.payer_account_type\u003d1 then t1.payer_member_id end) as balance_back_cnt,\\ncount(case when t1.payer_account_type\u003d5 then t1.payer_member_id end) as bankcard_back_cnt,\\ncount(case when t1.payer_account_type\u003d6 then t1.payer_member_id end) as bankaccount_back_cnt,\\n\\ncount(distinct case when t1.payer_account_type\u003d1 then t1.payer_member_id end) as balance_back_user,\\ncount(distinct case when t1.payer_account_type\u003d5 then t1.payer_member_id end) as bankcard_back_user,\\ncount(distinct case when t1.payer_account_type\u003d6 then t1.payer_member_id end) as bankaccount_back_user\\n\\nfrom etl_dwb.ng_okcard_repayment t1\\n--inner join (select * from report_mongo.ng_t_postpay_application t where t.account_type\u003d6 and t.status\u003d2  and dateadd(hour,1,t.create_time) \u003e\u003d\u00272021-07-01\u0027 ) t2\\n--on t1.payer_member_id \u003dt2.cid\\nwhere t1.pay_status\u003d1 group by 1 ) d7\\non d1.dt\u003dd7.dt\\n\\n---8.还款 --g7 --(代扣还款)\\nleft join (select last_day(t1.update_time) dt,\\ncount(distinct t1.card_no) as back_users,\\ncount(1) as back_cnt,\\nsum(t1.amount)/100 as back_amt\\nfrom etl_dwd.ng_okcard_order t1\\nwhere t1.status\u003d1 and t1.operation_type\u003d4--1：支付，2：主动还款，3：撤销，4：代扣还款\\ngroup by 1 ) d8\\non d1.dt\u003dd8.dt\\n\\n\\nunion all\\n\\nselect d1.dt report_date\\n,d1.apply_users\\n,d2.phone_lock_active_users\\n,d3.active_users\\n,round(d3.active_users::float/d1.apply_users,4) as active_user_rate\\n,d3.credit_limit\\n,d3.average_credit_limit\\n,d3.min_credit_limit\\n,d3.max_credit_limit\\n,d4.first_trans_users\\n,round(d4.first_trans_users::float/d3.active_users,4) as first_trans_rate\\n,d4.new_first_trans_users\\n,d4.old_first_trans_users\\n,d5.trans_users\\n,d5.volume\\n,d5.value\\n,round(d5.volume::float/d5.trans_users,2) as pre_user_volume\\n,round(d5.value/d5.trans_users,2) as pre_volume_value\\n,d6.users as bill_users\\n,d6.used_users\\n,d6.settle_users\\n,d6.settle_amt\\n,d6.settle_principal\\n,d6.used_amt\\n,d6.paid_principal_amt\\n,(d6.paid_penalty_amt+d6.paid_principal_amt) as paid_amt\\n,d6.unpaid_principal_amt\\n,(d6.unpaid_penalty_amt+d6.unpaid_principal_amt) as unpaid_amt\\n,d6.outbill_used_users\\n,d6.outbill_used_amt\\n,(d6.outbill_paid_principal_amt+d6.paid_penalty_amt) as outbill_paid_amt\\n,d6.outbill_paid_principal_amt\\n,d6.paid_penalty_amt\\n,(d6.outbill_unpaid_principal_amt+d6.unpaid_penalty_amt) as outbill_unpaid_amt\\n,d6.outbill_unpaid_principal_amt,d6.unpaid_penalty_amt\\n,d6.outbill_settle_users\\n,(d6.outbill_settle_principal+d6.outbill_settle_penalty) as outbill_settle_amt\\n,d6.outbill_settle_principal,d6.outbill_settle_penalty\\n,d6.over_1_7d_unpaid_amt\\n,d6.over_8_14d_unpaid_amt\\n,d6.over_15_30d_unpaid_amt\\n,d6.over_m2_unpaid_amt\\n,d6.over_m3_unpaid_amt\\n,d6.over_wo_unpaid_amt\\n,d6.over_1_7d_unpaid_user\\n,d6.over_8_14d_unpaid_user\\n,d6.over_15_30d_unpaid_user\\n,d6.over_m2_unpaid_user\\n,d6.over_m3_unpaid_user\\n,d6.over_wo_unpaid_user\\n,d7.back_users\\n,d7.back_cnt\\n,d7.back_amt\\n,d8.back_users as withholding_back_users\\n,d8.back_cnt as withholding_back_cnt\\n,d8.back_amt as withholding_back_amt\\n,\u00279\u0027 time_type\\n,\u0027NG\u0027 country_code\\nfrom\\n---1.申请人数\\n(select dateadd(day,-1,current_date) dt\\n,count(distinct t1.member_id) apply_users\\nfrom etl_dwd.ng_okcard_user t1)  d1\\n\\n---2.手机锁激活人数\\nleft join (\\nselect dateadd(day,-1,current_date) dt\\n,sum(t1.apply_user_cnts) phone_lock_active_users\\nfrom tb_bidata.dws_okcard_apply_info t1\\nwhere stat_type\u003d\u0027device_activated\u0027 and country_code\u003d\u0027NG\u0027 group by 1)d2\\non d1.dt\u003dd2.dt\\n\\n---3.授信\\nleft join (select dateadd(day,-1,current_date) dt\\n,count(distinct t1.mobile_no) as active_users---授信成功人数\\n,sum(t1.credit_limit_postpay)/100.0 as credit_limit---累计授信额度\\n,round(credit_limit/active_users,2) as average_credit_limit ---平均授信额度\\n,max(t1.credit_limit_postpay)/100 as max_credit_limit\\n,min(t1.credit_limit_postpay)/100 as min_credit_limit\\nfrom tmp_1 t1 group by 1 )d3\\non d1.dt\u003dd3.dt\\n\\n---4.交易激活\\nleft join (select dateadd(day,-1,current_date) dt\\n,count(distinct tt.payer_member_id) first_trans_users---总激活人数\\n,count(case when date(tt.update_time)\u003ddate(t2.create_time) then tt.payer_member_id end)  new_first_trans_users--当天注册的激活用户\\n,first_trans_users-new_first_trans_users as old_first_trans_users --非当天注册的激活用户\\nfrom (select t1.payer_member_id,t1.update_time\\n,row_number() over(partition by t1.payer_member_id order by t1.update_time) rn\\nfrom etl_dwb.ng_okcard_transaction t1 where t1.pay_status\u003d1 ) tt\\ninner join etl_dwd.ng_member t2 on tt.payer_member_id\u003dt2.member_id\\nwhere tt.rn\u003d1 group by 1 ) d4\\non d1.dt\u003dd4.dt\\n\\n---5.交易活跃\\nleft join (SELECT dateadd(day,-1,current_date) dt,\\ncount(DISTINCT t1.payer_member_id) trans_users,---交易人数\\ncount(1) volume,---交易笔数\\nsum(t1.pay_amount)/100.0 as value ---交易金额\\nfrom etl_dwb.ng_okcard_transaction t1\\nwhere t1.pay_status\u003d1 group by 1 ) d5\\non d1.dt\u003dd5.dt\\n\\n---6.账期\\nleft join (select * from dws_okcard_bill_tmp) d6\\non d1.dt \u003d d6.dt\\n\\n---7.还款 --g7\\nleft join (select dateadd(day,-1,current_date) dt,\\n\\ncount(distinct t1.payer_member_id) as back_users,\\ncount(1) as back_cnt,\\nsum(t1.business_amount )/100 as back_amt ,\\n\\nsum(case when t1.payer_account_type\u003d1 then t1.business_amount end)/100 as balance_back_amt,\\nsum(case when t1.payer_account_type\u003d5 then t1.business_amount end)/100 as bankcard_back_amt,\\nsum(case when t1.payer_account_type\u003d6 then t1.business_amount end)/100 as bankaccount_back_amt,\\n\\ncount(case when t1.payer_account_type\u003d1 then t1.payer_member_id end) as balance_back_cnt,\\ncount(case when t1.payer_account_type\u003d5 then t1.payer_member_id end) as bankcard_back_cnt,\\ncount(case when t1.payer_account_type\u003d6 then t1.payer_member_id end) as bankaccount_back_cnt,\\n\\ncount(distinct case when t1.payer_account_type\u003d1 then t1.payer_member_id end) as balance_back_user,\\ncount(distinct case when t1.payer_account_type\u003d5 then t1.payer_member_id end) as bankcard_back_user,\\ncount(distinct case when t1.payer_account_type\u003d6 then t1.payer_member_id end) as bankaccount_back_user\\n\\nfrom etl_dwb.ng_okcard_repayment t1\\n--inner join (select * from report_mongo.ng_t_postpay_application t where t.account_type\u003d6 and t.status\u003d2  and dateadd(hour,1,t.create_time) \u003e\u003d\u00272021-07-01\u0027 ) t2\\n--on t1.payer_member_id \u003dt2.cid\\nwhere t1.pay_status\u003d1 group by 1 ) d7\\non d1.dt\u003dd7.dt\\n\\n---8.还款 --g7 --(代扣还款)\\nleft join (select dateadd(day,-1,current_date) dt,\\ncount(distinct t1.card_no) as back_users,\\ncount(1) as back_cnt,\\nsum(t1.amount)/100 as back_amt\\nfrom etl_dwd.ng_okcard_order t1\\nwhere t1.status\u003d1 and t1.operation_type\u003d4--1：支付，2：主动还款，3：撤销，4：代扣还款\\ngroup by 1 ) d8\\non d1.dt\u003dd8.dt;\\n-------------------------------------------------------------------------------------------------------------------------\\n--20210804 张娜 nana end\\n-------------------------------------------------------------------------------------------------------------------------\\n\\n\\n\",\"preStatements\":[],\"sqlType\":\"1\",\"receivers\":\"\",\"datasource\":3,\"showType\":\"TABLE\",\"localParams\":[],\"datasourceName\":\"mysql_conn\"},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":1,\"taskInstancePriority\":\"MEDIUM\",\"name\":\"dws_okcard_dim\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"dws_okcard_user\"],\"id\":\"tasks-18892\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SQL\",\"params\":{\"postStatements\":[],\"connParams\":\"\",\"receiversCc\":\"\",\"udfs\":\"\",\"type\":\"POSTGRESQL\",\"title\":\"\",\"sql\":\"\\n--------------------------------------------------------------------------------------------\\n--------------------------------------------------------------------------------------------\\n--2.新激活OK Card 用户留存表(参照Palmpay 指标）\\n--目的：统计新激活交易用户在后续的交易情况，验证产品本身对用户的吸引力。\\n--统计需求：OK Card新增交易用户,并与Palmpay 新增交易用户后续数据对比，加图表\\ndelete from tb_bidata.dws_okcard_retention_full;\\n\\ninsert into tb_bidata.dws_okcard_retention_full\\nwith tmp as (select a.*,row_number() over(partition by a.cid order by a.create_time) rn from etl_dwd.ng_okcard_account a)\\n\\n--- 交易留存 - 月\\nselect dd.first_txn_mon first_trans_date\\n,dd.trans_type --是否为okcard交易\\n,dd.retention_type --留存类型：W1,W2,W3\\n,count(distinct dd.payer_member_id) user_cnts --月度交易总人数\\n,\u00273\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,dd.phone_lock_flag\\nfrom (\\nselect t3.payer_member_id\\n,t3.update_time\\n,last_day(t1.first_trans_time) first_txn_mon\\n,case when t3.payer_account_type\u003d28 then \u0027okcard\u0027 else \u0027palmpay\u0027 end trans_type\\n,concat(t3.payer_account_type||\u0027\u0027,\u0027_\u0027||p.phone_lock_flag) phone_lock_flag\\n,case when datediff(day,t1.first_trans_time,t3.update_time)\u003d0 then \u0027NEW\u0027\\n\\t  when datediff(day,t1.first_trans_time,t3.update_time)\u003c8 and datediff(day,t1.first_trans_time,t3.update_time)\u003e\u003d1 then \u00271W\u0027\\n\\t  when datediff(day,t1.first_trans_time,t3.update_time)\u003c15 and datediff(day,t1.first_trans_time,t3.update_time)\u003e\u003d8 then \u00272W\u0027\\n\\t  when datediff(day,t1.first_trans_time,t3.update_time)\u003c22 and datediff(day,t1.first_trans_time,t3.update_time)\u003e\u003d15 then \u00273W\u0027\\n\\t  when datediff(day,t1.first_trans_time,t3.update_time)\u003c30 and datediff(day,t1.first_trans_time,t3.update_time)\u003e\u003d22 then \u00274W\u0027\\n end retention_type\\nfrom (select * from etl_dwb.ng_palmpay_first_txn where first_trans_time is not null)  t1\\ninner join (select payer_member_id,update_time,payer_account_type\\nfrom etl_dwb.ng_pay_flow_palmpay where pay_status\u003d1 and payer_member_id is not null) t3 on t3.payer_member_id\u003dt1.payer_member_id\\nleft join tmp p on t1.payer_member_id \u003d p.cid and p.rn \u003d 1\\nwhere datediff(day,t1.first_trans_time,t3.update_time)\u003c30\\n) dd group by 1,2,3,dd.phone_lock_flag ;\\n\\n\\n----------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------\\n--3.交易用户留存表(账期维度)\\n\\n--目的：统计账期新增交易用户在后续账期的交易情况，验证产品本身对用户的吸引力，了解当前账期的交易用户构成。\\n--统计需求：每一个账期新增的交易用户后续账期的使用情况\\n\\ndelete from tb_bidata.dws_okcard_retention_billdate;\\n\\ninsert into tb_bidata.dws_okcard_retention_billdate\\n\\n-- 账期留存\\n-- bill_remain  use_amount\u003e0\\nwith bill_active as\\n(select card_no,used_amount,bill_date,phone_lock_flag\\n,row_number() over(partition by card_no order by bill_date) rn\\nfrom etl_dwd.ng_okcard_debit_bill where used_amount\u003e0 )\\n\\n,tmp_continue as (\\nselect a.bill_date first_bill_date\\n,b.bill_date rent_bill_date\\n,max(b.rn) max_rn\\nfrom (select * from bill_active where rn \u003d 1) a inner join bill_active b on a.card_no\u003db.card_no group by 1,2)\\n\\nselect t1.bill_date first_bill_date\\n,t2.bill_date rent_bill_date\\n,t2.rn bill_seq--用户按照bill_date排序账期顺序\\n,case when t2.rn \u003e\u003d t3.max_rn then \u0027连续\u0027 else \u0027未连续\u0027 end is_max_continue\\n,count(distinct t2.card_no) billed_user\\n,sum(t2.used_amount)/100.0 used_amt\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\nfrom (select * from bill_active where rn \u003d 1) t1\\ninner join bill_active t2 on t1.card_no\u003dt2.card_no\\nleft join tmp_continue t3 on t1.bill_date \u003d t3.first_bill_date and t2.bill_date \u003d t3.rent_bill_date\\ngroup by 1,2,3,4,t1.phone_lock_flag;\\n\\n---------------------------------------------\\n---20211018\\n--张娜邮件需求\\n--搬砖方：林志彬\\n-----------------------------------------------------------------------------------------------------------------------------\\n---okcard交易留存\\n\\n\\nDELETE FROM tb_bidata.dws_okcard_retention_zn\\nWHERE 1\u003d1;\\nINSERT INTO tb_bidata.dws_okcard_retention_zn\\n\\nwith tmp as (\\nselect * FROM etl_dwb.ng_okcard_transaction\\nwhere pay_status\u003d1 and payer_member_id is not null )\\n\\n--------------------\\n,tmp_day as(\\nselect payer_member_id\\n\\t,date(t1.update_time) as month\\n\\t,phone_lock_flag\\n\\t,count(*) pay_cnt\\n\\t,sum(t1.pay_amount)/100  as pay_amt\\nFROM tmp t1\\ngroup by 1,2,3\\n)\\n\\n------------------------\\n,tmp_week as(\\nselect payer_member_id\\n\\t,dateadd(day,-7,next_day( date(t1.update_time),\u0027Fri\u0027)) as month\\n\\t,phone_lock_flag\\n\\t,count(*)  pay_cnt\\n\\t,sum(t1.pay_amount)/100  as pay_amt\\nFROM tmp t1\\ngroup by 1,2,3\\n)\\n\\n------------------------\\n,tmp_month as(\\nselect payer_member_id\\n  ,last_day(t1.update_time) as month\\n  ,phone_lock_flag\\n  ,count(*)  pay_cnt\\n  ,sum(t1.pay_amount)/100  as pay_amt\\nFROM tmp t1\\ngroup by 1,2,3\\n)\\n\\n---首次交易时间\\n,user_first_trans as (\\n    select  payer_member_id\\n    ,min(t1.update_time)  as firset_01_date\\n FROM tmp t1 group by 1 )\\n\\n\\n\\n--天\\n---------计算每个月留存，按照月，新老用户，计算笔数，金额，人数，次月留存人数\\nselect\\nmonth\\n,user_flag\\n,phone_lock_flag\\n,count(distinct payer_member_id) as users_cnt\\n,count(distinct case when reten_next_month \u003d 1 then payer_member_id else null end) as reten_next_cnt\\n,sum(pay_cnt) as pay_cnt_sum\\n,sum(pay_amt) as amt_sum\\n,\u00271\u0027 time_type\\nfrom\\n\\t(\\n\\tselect\\n\\tt1.*\\n\\t,case when t2.month2 is null then 0 else 1 end as reten_next_month\\n  ,case when t1.month \u003d date(t3.firset_01_date) then \u0027new\u0027 else \u0027old\u0027 end as user_flag\\n\\tfrom tmp_day t1\\n\\tleft outer join\\n\\t\\t(\\n\\t\\tselect\\n\\t\\tpayer_member_id\\n\\t\\t,dateadd(day,-1,month) month2\\n\\t\\tfrom tmp_day\\n\\t\\t) t2\\n\\ton t1.payer_member_id \u003d t2.payer_member_id and t1.month \u003d date(t2.month2)\\n\\tleft outer join user_first_trans t3\\n\\ton t1.payer_member_id \u003d t3.payer_member_id\\n\\t) group by 1,2,3\\n\\n\\n--周\\nunion all\\n---------计算每个月留存，按照月，新老用户，计算笔数，金额，人数，次月留存人数\\nselect\\nmonth\\n,user_flag\\n,phone_lock_flag\\n,count(distinct payer_member_id) as users_cnt\\n,count(distinct case when reten_next_month \u003d 1 then payer_member_id else null end) as reten_next_cnt\\n,sum(pay_cnt) as pay_cnt_sum\\n,sum(pay_amt) as amt_sum\\n,\u00272\u0027 time_type\\nfrom (\\n\\tselect\\n\\tt1.*\\n\\t,case when t2.month2 is null then 0 else 1 end as reten_next_month\\n  ,case when t1.month \u003d  dateadd(day,-7,next_day( date(t3.firset_01_date),\u0027Fri\u0027))then \u0027new\u0027 else \u0027old\u0027 end as user_flag\\n\\tfrom tmp_week t1\\n\\tleft outer join\\n\\t\\t(\\n\\t\\tselect\\n\\t\\tpayer_member_id\\n\\t\\t,dateadd(day,-7,month) month2\\n\\t\\t,pay_cnt\\n\\t\\tfrom tmp_week\\n\\t\\t) t2\\n\\ton t1.payer_member_id \u003d t2.payer_member_id and t1.month \u003d date(t2.month2)\\n\\tleft outer join user_first_trans  t3\\n\\ton t1.payer_member_id \u003d t3.payer_member_id\\n\\t)\\ngroup by 1,2,3\\n\\n\\n--月\\nunion all\\n--计算每个月留存，按照月，新老用户，计算笔数，金额，人数，次月留存人数\\nselect\\nmonth\\n,user_flag\\n,phone_lock_flag\\n,count(distinct payer_member_id) as users_cnt\\n,count(distinct case when reten_next_month \u003d 1 then payer_member_id else null end) as reten_next_cnt\\n,sum(pay_cnt) as pay_cnt_sum\\n,sum(pay_amt) as amt_sum\\n,\u00273\u0027 time_type\\nfrom\\n  (\\n  select\\n  t1.*\\n  ,case when t2.month2 is null then 0 else 1 end as reten_next_month\\n  ,case when t1.month \u003d last_day(t3.firset_01_date) then \u0027new\u0027 else \u0027old\u0027 end as user_flag\\n  from tmp_month t1\\n  left outer join\\n    (\\n    select\\n    payer_member_id\\n    ,dateadd(month,-1,month) month2\\n    ,pay_cnt\\n    from tmp_month\\n    ) t2\\n  on t1.payer_member_id \u003d t2.payer_member_id and t1.month \u003d last_day(t2.month2)\\n  left outer join user_first_trans t3\\n  on t1.payer_member_id \u003d t3.payer_member_id  ) group by 1,2,3;\\n\\n\\n\\n\\n\\n---------------------------------------------------------------------------------------------------------------\\n--下面的sql待定，未建表\\n--- 交易留存 - 月\\n--select dd.first_txn_mon first_trans_date\\n--,dd.trans_type --是否为okcard交易\\n--,dd.retention_type --留存类型：W1,W2,W3\\n--,dd.user_flag\\n--,count(DISTINCT dd.payer_member_id) user_cnts --月度交易总人数\\n--,\u00273\u0027 time_type\\n--,\u0027NG\u0027 country_code\\n--from (\\n--SELECT t3.payer_member_id\\n--,t3.update_time\\n--,date(t1.first_trans_time) first_txn_mon\\n--,case when t3.payer_account_type\u003d28 then \u0027okcard\u0027 else \u0027palmpay\u0027 end trans_type\\n--,case when datediff(day,t1.first_trans_time,t2.update_time)\u003d0 then \u0027new\u0027 else \u0027old\u0027 end as user_flag\\n--,case\\n--\\t  WHEN datediff(day,t1.first_trans_time,t3.update_time)\u003d1 THEN \u0027次日\u0027\\n--\\t  WHEN datediff(day,t1.first_trans_time,t3.update_time)\u003c8 and datediff(day,t1.first_trans_time,t3.update_time)\u003e\u003d2 THEN \u00277日\u0027\\n--\\t  WHEN datediff(day,t1.first_trans_time,t3.update_time)\u003c15 and datediff(day,t1.first_trans_time,t3.update_time)\u003e\u003d8 THEN \u002714日\u0027\\n-- END retention_type\\n--FROM (select * from etl_dwb.ng_palmpay_first_txn where first_trans_time is not null)  t1\\n--inner join (select payer_member_id,update_time,payer_account_type\\n--from etl_dwb.ng_pay_flow_palmpay where pay_status\u003d1 and payer_member_id is not null and payer_account_type\u003d28) t3\\n--on t3.payer_member_id\u003dt1.payer_member_id\\n--inner join (select payer_member_id,update_time,payer_account_type\\n--from etl_dwb.ng_pay_flow_palmpay where pay_status\u003d1 and payer_member_id is not null and payer_account_type\u003d28) t2\\n--on t2.payer_member_id\u003dt1.payer_member_id\\n--where datediff(day,t1.first_trans_time,t3.update_time)\u003c15\\n--) dd group by 1,2,3,4\\n--order by 1\\n--;\\n-----test 手机锁\\n--with tmp as (\\n--select * FROM etl_dwb.ng_okcard_transaction\\n--where  pay_status\u003d1 and payer_member_id is not null  )\\n--\\n----------------------\\n--\\n--select t1.payer_member_id\\n--\\t,date(t1.update_time) as month\\n--\\t,t2.phone_lock_status\\n--\\t,count(*) pay_cnt\\n--\\t,sum(t1.pay_amount)/100  as pay_amt\\n--FROM tmp t1\\n--left join (select member_id\\n--           ,phone_lock_status\\n--           from report_mongo.ng_okcard_user\\n--           where create_time \u003e\u003d\u00272021-07-01\u0027 and dateadd(hour,1,create_time) \u003c dateadd(day,1,current_date)\\n--          ) t2 on t1.payer_member_id\u003dt2.member_id\\n--where t1.update_time \u003e \u00272020-11-01\u0027\\n--group by 1,2,3\\n\\n\\n----------------------------------------------------------------------------------------------------------------------\\n--需求：流失用户，留存用户 ~~ start\\n----------------------------------------------------------------------------------------------------------------------\\n--1.流失用户表\\n--目的：根据各账期流失用户情况指定召回措施\\n--统计需求：每一个账期新增的交易用户后续账期的使用情况\\n\\ndelete from tb_bidata.dws_okcard_lost_user;\\n\\ninsert into tb_bidata.dws_okcard_lost_user\\n\\nwith success_apply as (select card_no,min(create_time) update_time from etl_dwd.ng_okcard_application where status\u003d2 group by 1)\\n\\n,tmp_debit_used as (select card_no,begin_time --2021-07-01;2021-07-16;\\nfrom etl_dwd.ng_okcard_debit_bill where used_amount\u003e0 group by 1,2)\\n\\n,tmp_bill as (select card_no,bill_date\\n,row_number() over(partition by card_no order by bill_date) rn from etl_dwd.ng_okcard_debit_bill)\\n\\nselect t1.bill_date --2021-07-16;2021-08-01\\n,count(case when t1.used_amount\u003c\u003d0\\nand t2.update_time between t1.begin_time and t1.end_time then t1.card_no end) unused_users\\n,count(case when t4.card_no is not null then t1.card_no end) first_credit_user\\n--交易过无欠款，下1个账期再无交易\\n,count(case when t1.used_amount\u003e0 and t3.card_no is null and t1.outstanding_amount \u003c\u003d0 then t1.card_no end) used_1_users\\n,count(case when t1.used_amount\u003e0 then t1.card_no end) tot_used_users\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\nfrom etl_dwd.ng_okcard_debit_bill t1\\nleft join success_apply t2 on t1.card_no \u003dt2.card_no\\nleft join tmp_debit_used t3 on t1.card_no\u003dt3.card_no and t1.bill_date\u003dt3.begin_time\\nleft join (select * from tmp_bill where rn \u003d 1) t4 on t1.card_no\u003dt4.card_no and t1.bill_date \u003d t4.bill_date\\nwhere t1.bill_date \u003e \u00272021-07-01\u0027 group by 1,t1.phone_lock_flag;\\n\\n\\n--\\n----直接放到bi处理\\n\\n----2期及以上用户占比\\t连续2期及以上用户占比\\t连续3期及以上用户占比\\t每个账期均连续使用用户占比\\n--select t.rent_bill_date\\n--,t.tot_billed_user\\n--,round(t1.eq_2_billed_user::decimal/t.tot_billed_user,2) eq_2_billed_rate --2期及以上用户占比\\n--,round(t2.lt_2_billed_user::decimal/t.tot_billed_user,2) lt_2_billed_rate --连续2期及以上用户占比\\n--,round(t3.lt_3_billed_user::decimal/t.tot_billed_user,2) lt_3_billed_rate --连续3期及以上用户占比\\n--,round(t4.continue_billed_user::decimal/t.tot_billed_user,2) continue_billed_user_rate--每个账期均连续使用用户占比\\n--from (select rent_bill_date,sum(billed_user) tot_billed_user from tb_bidata.dws_okcard_retention_billdate group by 1) t\\n--left join (select rent_bill_date,sum(billed_user) eq_2_billed_user from tb_bidata.dws_okcard_retention_billdate where bill_seq \u003e\u003d2 group by 1) t1 on t.rent_bill_date\u003dt1.rent_bill_date\\n--left join (select rent_bill_date,sum(billed_user) lt_2_billed_user from tb_bidata.dws_okcard_retention_billdate where bill_seq \u003e\u003d2 and is_max_continue\u003d\u0027连续\u0027 group by 1 ) t2 on t.rent_bill_date\u003dt2.rent_bill_date\\n--left join (select rent_bill_date,sum(billed_user) lt_3_billed_user from tb_bidata.dws_okcard_retention_billdate where bill_seq \u003e\u003d3 and is_max_continue\u003d\u0027连续\u0027 group by 1 ) t3 on t.rent_bill_date\u003dt3.rent_bill_date\\n--left join (select rent_bill_date,sum(billed_user) continue_billed_user from tb_bidata.dws_okcard_retention_billdate where is_max_continue\u003d\u0027连续\u0027 group by 1 ) t4 on t.rent_bill_date\u003dt4.rent_bill_date\\n--\\n----------------------------------------------------------------------------------------------------------------------\\n--需求：流失用户，留存用户 ~~ end\\n----------------------------------------------------------------------------------------------------------------------\\n\\n\\n----------------------------------------------------------------------------------------------------------------------\\n--20220822：新用户、老用户、回流用户\\n---BI二次加工：\\n----新用户\\n--SELECT *,1.0*retent_users/users,\u0027新用户\u0027 flag\\n--FROM tb_bidata.dws_okcard_retent_huiliu\\n--WHERE new_user_flag\u003d1\\n--union all\\n----老用户\\n--SELECT *,1.0*retent_users/users,\u0027老用户\u0027 flag\\n--FROM tb_bidata.dws_okcard_retent_huiliu\\n--WHERE new_user_flag\u003d0  AND order_last_mon_flag \u003d1\\n--union all\\n----回流用户\\n--SELECT *,1.0*retent_users/users,\u0027回流用户\u0027 flag\\n--FROM tb_bidata.dws_okcard_retent_huiliu\\n--WHERE new_user_flag\u003d0 AND order_last_mon_flag \u003d0\\n ----------------------------------------------------------------------------------------------------------------------\\n---part1：不区分 trans_type\\ndelete from tb_bidata.dws_okcard_retent_huiliu where 1\u003d1;\\nINSERT into tb_bidata.dws_okcard_retent_huiliu\\nwith t1 as\\n(select\\npayer_member_id\\n,last_day(update_time) as dd\\n,count(*) as cnt\\n,sum(pay_amount)/100/410.0 as amt\\nfrom etl_dwb.ng_okcard_transaction t where t.pay_status \u003d 1 group by 1,2\\n)\\n\\nselect t1.dd as dd\\n,\u0027overall\u0027 trans_type\\n,case when last_day(t4.fisrt_day)\u003dt1.dd then 1 else 0 end as new_user_flag  --本月激活\\n,case when t3.payer_member_id is not null then 1 else 0 end as order_last_mon_flag --上个月是否有交易\\n,sum(t1.cnt) as cnt_sum\\n,sum(t1.amt) as amt_sum\\n,count(distinct t1.payer_member_id) as users\\n,count(distinct t2.payer_member_id) as retent_users\\nfrom t1 left outer join t1 t2 --次月是否留存\\non t1.payer_member_id \u003d t2.payer_member_id and t1.dd \u003d last_day(dateadd(mon,-1,t2.dd))\\nleft outer join t1 t3 --前一个月是否有交易\\non t1.payer_member_id \u003d t3.payer_member_id and t1.dd \u003d last_day(dateadd(mon,1,t3.dd))\\nleft outer join (select payer_member_id ,min(update_time) as fisrt_day from etl_dwb.ng_okcard_transaction t where t.pay_status \u003d 1 group by 1) t4\\non t1.payer_member_id \u003d t4.payer_member_id group by 1,2,3,4;\\n\\n\\n---part2：区分 trans_type的回流\\n\\nINSERT into tb_bidata.dws_okcard_retent_huiliu\\nwith t1 as\\n(select\\npayer_member_id,trans_type\\n,last_day(update_time) as dd\\n,count(*) as cnt\\n,sum(pay_amount)/100/410.0 as amt\\nfrom etl_dwb.ng_okcard_transaction t where t.pay_status \u003d 1 group by 1,2,3\\n)\\n\\nselect t1.dd as dd\\n,t1.trans_type\\n,case when last_day(t4.fisrt_day)\u003dt1.dd then 1 else 0 end as new_user_flag  --本月激活\\n,case when t3.payer_member_id is not null then 1 else 0 end as order_last_mon_flag --上个月是否有交易\\n,sum(t1.cnt) as cnt_sum\\n,sum(t1.amt) as amt_sum\\n,count(distinct t1.payer_member_id) as users\\n,count(distinct t2.payer_member_id) as retent_users\\nfrom t1 left outer join t1 t2 --次月是否留存\\non t1.payer_member_id \u003d t2.payer_member_id and t1.dd \u003d last_day(dateadd(mon,-1,t2.dd)) and t1.trans_type\u003dt2.trans_type\\nleft outer join t1 t3 --前一个月是否有交易\\non t1.payer_member_id \u003d t3.payer_member_id and t1.dd \u003d last_day(dateadd(mon,1,t3.dd)) and t1.trans_type \u003d t3.trans_type\\nleft outer join (select payer_member_id ,trans_type,min(update_time) as fisrt_day from etl_dwb.ng_okcard_transaction t where t.pay_status \u003d 1 group by 1,2) t4\\non t1.payer_member_id \u003d t4.payer_member_id and t1.trans_type\u003dt4.trans_type group by 1,2,3,4;\\n\\n\\n\\n\\n\\n\\n\",\"preStatements\":[],\"sqlType\":\"1\",\"receivers\":\"\",\"datasource\":3,\"showType\":\"TABLE\",\"localParams\":[],\"datasourceName\":\"mysql_conn\"},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":1,\"taskInstancePriority\":\"MEDIUM\",\"name\":\"dws_okcard_retention\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"dws_okcard_transaction\"],\"id\":\"tasks-45412\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SQL\",\"params\":{\"postStatements\":[],\"connParams\":\"\",\"receiversCc\":\"\",\"udfs\":\"\",\"type\":\"POSTGRESQL\",\"title\":\"\",\"sql\":\"\\n--- 20210914 --账龄回收率表vintage vecovery rate\\n\\ndelete from tb_bidata.dws_okcard_vintage;\\n\\ninsert into tb_bidata.dws_okcard_vintage\\n\\nwith tmp_water as (\\nselect bill_id,pay_id,repay_date actual_repay_date\\n,principal_amt,penalty_amt,amount\\nfrom etl_dwb.ng_okcard_repay_water\\n)\\n\\n,tmp_debit_bill as (select * from etl_dwd.ng_okcard_debit_bill_slice where dt \u003d current_date)\\n\\n\\nselect t.bill_date\\n--mob_level：0~1为mob0,1~2为mob1,2~3为mob2，类推.....左闭右开\\n,round(datediff(day,t.begin_time,t1.actual_repay_date)/15.0,1) mob_level\\n,sum(t.used_amount)/100.0  used_amt --已用金额 --**应还金额,**当前已用金额,**放款本金\\n,sum(t1.principal_amt)/100.0 paid_principal_amt --已还本金\\n,sum(t1.penalty_amt)/100.0 paid_penalty_amt --已还罚息\\n\\n,\u00271\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,t.phone_lock_flag\\nfrom tmp_debit_bill t\\nleft join tmp_water t1  on t1.bill_id \u003d t.id\\n\\ngroup by 1,2,t.phone_lock_flag;\\n\\n\\n--------------------------------------------------------------------------------------------------------\\n--------------------------------------------------------------------------------------------------------\\n------bi数据源--------\\n--with tmp_total as (select bill_date\\n--,sum(paid_principal_amt) tot_paid_principal\\n--,sum(paid_penalty_amt) tot_paid_penalty\\n--,sum(used_amt) tot_used_amt\\n--from tb_bidata.dws_okcard_vintage group by 1)\\n--\\n--,tmp as (select a.bill_date\\n--,case when a.mob_level \u003c 1 then \u0027mob0\u0027\\n--      when a.mob_level \u003e\u003d 1 and a.mob_level \u003c 2 then \u0027mob1\u0027\\n--      when a.mob_level \u003e\u003d 2 and a.mob_level \u003c 3 then \u0027mob2\u0027\\n--      when a.mob_level \u003e\u003d 3 and a.mob_level \u003c 4 then \u0027mob3\u0027\\n--      when a.mob_level \u003e\u003d 4 and a.mob_level \u003c 5 then \u0027mob4\u0027\\n--      when a.mob_level \u003e\u003d 5 and a.mob_level \u003c 6 then \u0027mob5\u0027\\n--      when a.mob_level \u003e\u003d 6 and a.mob_level \u003c 7 then \u0027mob6\u0027\\n--      when a.mob_level \u003e\u003d 7 then \u0027_mob6\u0027 end mob_level\\n--,sum(a.paid_principal_amt) paid_principal_amt\\n--,sum(a.paid_penalty_amt) paid_penalty_amt\\n--,sum(a.used_amt) used_amt\\n--,max(b.tot_paid_principal) tot_paid_principal\\n--,max(b.tot_paid_penalty) tot_paid_penalty\\n--,max(b.tot_used_amt) tot_used_amt\\n--,\u00271\u0027 time_type\\n--,\u0027NG\u0027 country_code\\n--from tb_bidata.dws_okcard_vintage a\\n--left join tmp_total b on a.bill_date \u003d b.bill_date group by 1,2)\\n--\\n--select a.bill_date\\n--,\u0027本金\u0027 stat_type\\n--,round(a.tot_paid_principal/a.tot_used_amt,2) tot_vintage_rate  --总回收率-overall。截止当前已还本金/放款本金\\n--,case when a.mob_level \u003d \u0027mob0\u0027  then round(a.paid_principal_amt /a.tot_used_amt,2) end  mob0_rate\\n--,case when a.mob_level \u003d \u0027mob1\u0027  then round(a.paid_principal_amt/a.tot_used_amt,2) end  mob1_rate\\n--,case when a.mob_level \u003d \u0027mob2\u0027  then round(a.paid_principal_amt/a.tot_used_amt,2) end  mob2_rate\\n--,case when a.mob_level \u003d \u0027mob3\u0027  then round(a.paid_principal_amt/a.tot_used_amt,2) end  mob3_rate\\n--,case when a.mob_level \u003d \u0027mob4\u0027  then round(a.paid_principal_amt/a.tot_used_amt,2) end  mob4_rate\\n--,case when a.mob_level \u003d \u0027mob5\u0027  then round(a.paid_principal_amt/a.tot_used_amt,2) end  mob5_rate\\n--,case when a.mob_level \u003d \u0027mob6\u0027  then round(a.paid_principal_amt/a.tot_used_amt,2) end  mob6_rate\\n--,case when a.mob_level \u003d \u0027_mob6\u0027 then round(a.paid_principal_amt/a.tot_used_amt,2) end  _mob6_rate\\n--,\u00271\u0027 time_type\\n--,\u0027NG\u0027 country_code\\n--from tmp a\\n--union all\\n--select a.bill_date\\n--,\u0027罚息\u0027 stat_type\\n--,round(a.tot_paid_penalty /a.tot_used_amt,2) tot_vintage_rate  --总回收率-overall。截止当前已还本金/放款本金\\n--,case when a.mob_level \u003d \u0027mob0\u0027  then round(a.paid_penalty_amt /a.tot_used_amt,2) end mob0_rate\\n--,case when a.mob_level \u003d \u0027mob1\u0027  then round(a.paid_penalty_amt/a.tot_used_amt,2) end mob1_rate\\n--,case when a.mob_level \u003d \u0027mob2\u0027  then round(a.paid_penalty_amt/a.tot_used_amt,2) end mob2_rate\\n--,case when a.mob_level \u003d \u0027mob3\u0027  then round(a.paid_penalty_amt/a.tot_used_amt,2) end mob3_rate\\n--,case when a.mob_level \u003d \u0027mob4\u0027  then round(a.paid_penalty_amt/a.tot_used_amt,2) end mob4_rate\\n--,case when a.mob_level \u003d \u0027mob5\u0027  then round(a.paid_penalty_amt/a.tot_used_amt,2) end mob5_rate\\n--,case when a.mob_level \u003d \u0027mob6\u0027  then round(a.paid_penalty_amt/a.tot_used_amt,2) end mob6_rate\\n--,case when a.mob_level \u003d \u0027_mob6\u0027 then round(a.paid_penalty_amt/a.tot_used_amt,2) end _mob6_rate\\n--,\u00271\u0027 time_type\\n--,\u0027NG\u0027 country_code\\n--from tmp a\\n--union all\\n--select a.bill_date\\n--,\u0027本金+罚息\u0027 stat_type\\n--,round((a.tot_paid_principal + a.tot_paid_penalty) /a.tot_used_amt,2) tot_vintage_rate  --总回收率-overall。截止当前已还本金/放款本金\\n--,case when a.mob_level \u003d \u0027mob0\u0027  then round((a.paid_principal_amt + a.paid_penalty_amt) /a.tot_used_amt,2) end mob0_rate\\n--,case when a.mob_level \u003d \u0027mob1\u0027  then round((a.paid_principal_amt + a.paid_penalty_amt)/a.tot_used_amt,2) end mob1_rate\\n--,case when a.mob_level \u003d \u0027mob2\u0027  then round((a.paid_principal_amt + a.paid_penalty_amt)/a.tot_used_amt,2) end mob2_rate\\n--,case when a.mob_level \u003d \u0027mob3\u0027  then round((a.paid_principal_amt + a.paid_penalty_amt)/a.tot_used_amt,2) end mob3_rate\\n--,case when a.mob_level \u003d \u0027mob4\u0027  then round((a.paid_principal_amt + a.paid_penalty_amt)/a.tot_used_amt,2) end mob4_rate\\n--,case when a.mob_level \u003d \u0027mob5\u0027  then round((a.paid_principal_amt + a.paid_penalty_amt)/a.tot_used_amt,2) end mob5_rate\\n--,case when a.mob_level \u003d \u0027mob6\u0027  then round((a.paid_principal_amt + a.paid_penalty_amt)/a.tot_used_amt,2) end mob6_rate\\n--,case when a.mob_level \u003d \u0027_mob6\u0027 then round((a.paid_principal_amt + a.paid_penalty_amt)/a.tot_used_amt,2) end _mob6_rate\\n--,\u00271\u0027 time_type\\n--,\u0027NG\u0027 country_code\\n--from tmp a\\n\\n--------------------------------------------------------------------------------------------------------\\n--------------------------------------------------------------------------------------------------------\\n\\n\",\"preStatements\":[],\"sqlType\":\"1\",\"receivers\":\"\",\"datasource\":3,\"showType\":\"TABLE\",\"localParams\":[],\"datasourceName\":\"mysql_conn\"},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":1,\"taskInstancePriority\":\"MEDIUM\",\"name\":\"dws_okcard_vintage\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"dws_okcard_user\"],\"id\":\"tasks-29131\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SQL\",\"params\":{\"postStatements\":[],\"connParams\":\"\",\"receiversCc\":\"\",\"udfs\":\"\",\"type\":\"POSTGRESQL\",\"title\":\"\",\"sql\":\"-----------------------------------------------------------------------------------------------------------------------\\n--交易 transaction data --20210617\\n-----------------------------------------------------------------------------------------------------------------------\\n--part1: 区分trans_type和不区分trans_type的交易活跃\\n--part2: 区分trans_type的首次交易用户在时间范围内交易的人数、笔数、金额\\n--part3: 不区分trans_type的首次交易用户在时间范围内交易的人数、笔数、金额\\n\\ndelete from tb_bidata.dws_okcard_transaction where time_type in (\u002711\u0027,\u00271\u0027) and report_date\u003e\u003d dateadd(day,-5,CURRENT_DATE) and country_code \u003d \u0027NG\u0027;\\ndelete from tb_bidata.dws_okcard_transaction where time_type in (\u002711-2\u0027,\u00272\u0027) and report_date\u003d dateadd(day,-7,next_day(dateadd(day,-1,CURRENT_DATE),\u0027Su\u0027)) and country_code \u003d \u0027NG\u0027;\\ndelete from tb_bidata.dws_okcard_transaction where time_type in (\u002711-3\u0027,\u00273\u0027) and report_date\u003d last_day(dateadd(day,-1,CURRENT_DATE)) and country_code \u003d \u0027NG\u0027;\\n\\n--part 1：区分trans_type和不区分trans_type的交易活跃\\ninsert into tb_bidata.dws_okcard_transaction\\nwith tmp as (\\nselect pay_id,payer_member_id,trans_type,business_amount\\n,pay_amount,b.update_time,pay_status||\u0027\u0027 pay_status,b.phone_lock_flag --20211122新增区分非锁判断\\n,ai.systemtype --ios,android\\nfrom etl_dwb.ng_okcard_transaction b\\nleft join etl_dwb.ng_credit_user_android_ios ai on b.payer_member_id\u003dai.member_id and ai.loan_product\u003d\u0027OKC\u0027\\nwhere b.create_time \u003e current_date - 40 )\\n\\n--汇总的活跃--天\\nselect date(t.update_time) report_date\\n,\u0027overall\u0027 trans_type\\n,t.pay_status\\n,count(distinct t.payer_member_id) user_cnts\\n,count(1) txn_cnt\\n,sum(t.business_amount)/100.0 txn_amt\\n,sum(t.pay_amount)/100.0 pay_amt\\n,\u002711\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,phone_lock_flag\\n,systemtype\\nfrom tmp t where t.update_time \u003e\u003d dateadd(day,-5,CURRENT_DATE) group by 1,2,3,10,11\\nunion all\\n--汇总的活跃--周\\nselect dateadd(day,-7,next_day(t.update_time,\u0027Su\u0027)) report_date\\n,\u0027overall\u0027 trans_type\\n,t.pay_status\\n,count(distinct t.payer_member_id) user_cnts\\n,count(1) txn_cnt\\n,sum(t.business_amount)/100.0 txn_amt\\n,sum(t.pay_amount)/100.0 pay_amt\\n,\u002711-2\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,phone_lock_flag\\n,systemtype\\nfrom tmp t\\nwhere dateadd(day,-7,next_day(t.update_time,\u0027Su\u0027)) \u003d dateadd(day,-7,next_day(CURRENT_DATE - 1,\u0027Su\u0027))\\ngroup by 1,2,3,10,11\\nunion all\\n--汇总的活跃--月\\nselect last_day(t.update_time) report_date\\n,\u0027overall\u0027 trans_type\\n,t.pay_status\\n,count(distinct t.payer_member_id) user_cnts\\n,count(1) txn_cnt\\n,sum(t.business_amount)/100.0 txn_amt\\n,sum(t.pay_amount)/100.0 pay_amt\\n,\u002711-3\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,phone_lock_flag\\n,systemtype\\nfrom tmp t where last_day(t.update_time) \u003d last_day(CURRENT_DATE-1) group by 1,2,3,10,11\\n----------------------------------------------------------------------------------------------------------------------------\\n--okcard交易  dau,wau,mau,qau,yau,区分业务的激活，不区分业务的激活\\n----------------------------------------------------------------------------------------------------------------------------\\nunion all\\nselect date(t.update_time) report_date\\n,t.trans_type\\n,t.pay_status\\n,count(distinct t.payer_member_id) user_cnts\\n,count(1) txn_cnt\\n,sum(t.business_amount)/100.0 txn_amt\\n,sum(t.pay_amount)/100.0 pay_amt\\n,\u00271\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,phone_lock_flag\\n,systemtype\\nfrom tmp t where t.update_time \u003e\u003d dateadd(day,-5,CURRENT_DATE)  group by 1,2,3,10,11\\nunion all\\nselect dateadd(day,-7,next_day(t.update_time,\u0027Su\u0027)) report_date\\n,t.trans_type\\n,t.pay_status\\n,count(distinct t.payer_member_id) user_cnts\\n,count(1) txn_cnt\\n,sum(t.business_amount)/100.0 txn_amt\\n,sum(t.pay_amount)/100.0 pay_amt\\n,\u00272\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,phone_lock_flag\\n,systemtype\\nfrom tmp t\\nwhere dateadd(day,-7,next_day(t.update_time,\u0027Su\u0027)) \u003d dateadd(day,-7,next_day(CURRENT_DATE - 1,\u0027Su\u0027))\\ngroup by 1,2,3,10,11\\nunion all\\nselect last_day(t.update_time) report_date\\n,t.trans_type\\n,t.pay_status\\n,count(distinct t.payer_member_id) user_cnts\\n,count(1) txn_cnt\\n,sum(t.business_amount)/100.0 txn_amt\\n,sum(t.pay_amount)/100.0 pay_amt\\n,\u00273\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,phone_lock_flag\\n,systemtype\\nfrom tmp t  where last_day(t.update_time) \u003d last_day(CURRENT_DATE-1) group by 1,2,3,10,11;\\n---------------------------------------------------------------------------------------\\n----part 2、 考虑到内存缓存数据的原因，一次性删除，分两次写入；--20211122\\n---------------------------------------------------------------------------------------\\ndelete from tb_bidata.dws_okcard_transaction where time_type in (\u00276\u0027,\u00278\u0027,\u00278-2\u0027,\u00278-3\u0027);\\n\\ninsert into tb_bidata.dws_okcard_transaction\\nwith tmp as (\\nselect pay_id,payer_member_id,trans_type,business_amount\\n,pay_amount,b.update_time,b.phone_lock_flag --20211122新增区分非锁判断\\n,ai.systemtype\\nfrom etl_dwb.ng_okcard_transaction b\\nleft join etl_dwb.ng_credit_user_android_ios ai on b.payer_member_id\u003dai.member_id and ai.loan_product\u003d\u0027OKC\u0027\\nwhere b.pay_status \u003d 1)\\n\\n,first_transs as (\\nselect * from (\\nselect a.*,row_number() over(partition by a.payer_member_id,a.trans_type order by a.update_time) rn\\nfrom tmp a  ) p where p.rn \u003d 1\\n)\\n\\n--首次交易-分业务\\nselect date(t.update_time) report_date\\n,t.trans_type\\n,\u00271\u0027 pay_status\\n,count(distinct t.payer_member_id) user_cnts\\n,count(1) txn_cnt\\n,sum(t.business_amount)/100.0 txn_amt\\n,sum(t.pay_amount)/100.0 pay_amt\\n,\u00276\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,phone_lock_flag\\n,systemtype\\nfrom first_transs t   group by 1,2,3,10,11\\n\\n--首次Okcard交易用户(区分业务)：当天激活用户当天的交易 人数，次数，金额\\nunion all\\nselect date(a.update_time) report_date\\n,a.trans_type\\n,\u00271\u0027 pay_status\\n,count(distinct a.payer_member_id) user_cnts\\n,count(1) txn_cnt\\n,sum(a.business_amount)/100.0 txn_amt\\n,sum(t.pay_amount)/100.0 pay_amt\\n,\u00278\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,a.phone_lock_flag\\n,t.systemtype\\nfrom first_transs t\\ninner join tmp a on t.payer_member_id \u003d a.payer_member_id and date(t.update_time) \u003d date(a.update_time)\\n group by 1,2,3,10,11\\nunion all\\nselect dateadd(day,-7,next_day(a.update_time,\u0027Su\u0027))  report_date\\n,a.trans_type\\n,\u00271\u0027 pay_status\\n,count(distinct a.payer_member_id) user_cnts\\n,count(1) txn_cnt\\n,sum(a.business_amount)/100.0 txn_amt\\n,sum(t.pay_amount)/100.0 pay_amt\\n,\u00278-2\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,a.phone_lock_flag\\n,t.systemtype\\nfrom first_transs t\\ninner join tmp a on t.payer_member_id \u003d a.payer_member_id and dateadd(day,-7,next_day(t.update_time,\u0027Su\u0027)) \u003d dateadd(day,-7,next_day(a.update_time,\u0027Su\u0027))\\n group by 1,2,3,10,11\\nunion all\\nselect last_day(a.update_time)  report_date\\n,a.trans_type\\n,\u00271\u0027 pay_status\\n,count(distinct a.payer_member_id) user_cnts\\n,count(1) txn_cnt\\n,sum(a.business_amount)/100.0 txn_amt\\n,sum(t.pay_amount)/100.0 pay_amt\\n,\u00278-3\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,a.phone_lock_flag\\n,t.systemtype\\nfrom first_transs t\\ninner join tmp a on t.payer_member_id \u003d a.payer_member_id and last_day(t.update_time) \u003d last_day(a.update_time)\\ngroup by 1,2,3,10,11;\\n\\n---------------------------------------------------------------------------------------\\n----part 3、 不区分交易类型的首次激活--20220506\\n---------------------------------------------------------------------------------------\\ndelete from tb_bidata.dws_okcard_transaction where time_type in (\u00277\u0027,\u00279\u0027,\u00279-2\u0027,\u00279-3\u0027);\\ninsert into tb_bidata.dws_okcard_transaction\\nwith tmp as (\\nselect pay_id,payer_member_id,trans_type,business_amount\\n,pay_amount,b.update_time,b.phone_lock_flag\\n,ai.systemtype\\nfrom etl_dwb.ng_okcard_transaction b\\nleft join etl_dwb.ng_credit_user_android_ios ai on b.payer_member_id\u003dai.member_id and ai.loan_product\u003d\u0027OKC\u0027\\nwhere b.pay_status \u003d 1)\\n,first_transs_overall as (\\nselect * from (\\nselect a.*,row_number() over(partition by a.payer_member_id order by a.update_time) rn\\nfrom tmp a  ) p where p.rn \u003d 1\\n)\\n----------------------------------------------------------------------------------------------------------------------------\\n--首次交易-不分业务 --激活 新增交易激活人数\\n----------------------------------------------------------------------------------------------------------------------------\\nselect date(t.update_time) report_date\\n,\u0027overall\u0027 trans_type\\n,\u00271\u0027 pay_status\\n,count(distinct t.payer_member_id) user_cnts\\n,count(1) txn_cnt\\n,sum(t.business_amount)/100.0 txn_amt\\n,sum(t.pay_amount)/100.0 pay_amt\\n,\u00277\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,t.phone_lock_flag\\n,systemtype\\nfrom first_transs_overall t group by 1,2,3,10,11\\n\\n--首次Okcard交易用户(不区分业务)：当天激活用户当天的交易 人数，次数，金额\\nunion all\\nselect date(a.update_time) report_date\\n,\u0027overall\u0027 trans_type\\n,\u00271\u0027 pay_status\\n,count(distinct a.payer_member_id) user_cnts\\n,count(1) txn_cnt\\n,sum(a.business_amount)/100.0 txn_amt\\n,sum(t.pay_amount)/100.0 pay_amt\\n,\u00279\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,a.phone_lock_flag\\n,t.systemtype\\nfrom first_transs_overall t\\ninner join tmp a on t.payer_member_id \u003d a.payer_member_id and date(t.update_time) \u003d date(a.update_time)\\n group by 1,2,3,10,11\\nunion all\\nselect dateadd(day,-7,next_day(a.update_time,\u0027Su\u0027)) report_date\\n,\u0027overall\u0027 trans_type\\n,\u00271\u0027 pay_status\\n,count(distinct a.payer_member_id) user_cnts\\n,count(1) txn_cnt\\n,sum(a.business_amount)/100.0 txn_amt\\n,sum(t.pay_amount)/100.0 pay_amt\\n,\u00279-2\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,a.phone_lock_flag\\n,t.systemtype\\nfrom first_transs_overall t\\ninner join tmp a\\non t.payer_member_id \u003d a.payer_member_id and dateadd(day,-7,next_day(t.update_time,\u0027Su\u0027)) \u003d dateadd(day,-7,next_day(a.update_time,\u0027Su\u0027))\\n group by 1,2,3,10,11\\nunion all\\nselect last_day(a.update_time) report_date\\n,\u0027overall\u0027 trans_type\\n,\u00271\u0027 pay_status\\n,count(distinct a.payer_member_id) user_cnts\\n,count(1) txn_cnt\\n,sum(a.business_amount)/100.0 txn_amt\\n,sum(t.pay_amount)/100.0 pay_amt\\n,\u00279-3\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,a.phone_lock_flag\\n,t.systemtype\\nfrom first_transs_overall t\\ninner join tmp a on t.payer_member_id \u003d a.payer_member_id and last_day(t.update_time) \u003d last_day(a.update_time)\\n group by 1,2,3,10,11;\\n\\n----------------------------------------------------------------------------------------------------------------------\\n---20210910：当天，最近1天，7天，30天 授信额度 和 交易类型 分布\\n----------------------------------------------------------------------------------------------------------------------\\n-- 1.1 ---交易类型 分布\\ndelete from tb_bidata.dws_okcard_trans_type_dist where report_date \u003d dateadd(day,-1,current_date);\\n\\ninsert into tb_bidata.dws_okcard_trans_type_dist\\n\\nwith success_txn as (select * from etl_dwb.ng_okcard_transaction a\\nwhere pay_status\u003d1 and update_time \u003e dateadd(day,-40,current_date) )\\n\\nselect dateadd(day,-1,current_date) report_date\\n,\u002730d\u0027 stat_type\\n,t2.trans_name\\n,count(distinct t1.payer_account_id) trans_users\\n,sum(t1.pay_amount)/100 pay_amt\\n,count(*) trans_cnt\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\nfrom success_txn t1\\nleft join etl_dwd.ng_desc_trans_type t2\\non t1.trans_type\u003dt2.trans_type\\nwhere t1.update_time between dateadd(day,-30,current_date) and current_date\\ngroup by 1,2,3,t1.phone_lock_flag\\nunion all\\nselect dateadd(day,-1,current_date) report_date\\n,\u00277d\u0027 stat_type\\n,t2.trans_name\\n,count(distinct t1.payer_account_id) trans_users\\n,sum(t1.pay_amount)/100 pay_amt\\n,count(*) trans_cnt\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\nfrom success_txn t1\\nleft join etl_dwd.ng_desc_trans_type t2\\non t1.trans_type\u003dt2.trans_type\\nwhere t1.update_time between dateadd(day,-7,current_date) and current_date\\ngroup by 1,2,3,t1.phone_lock_flag\\nunion all\\nselect  dateadd(day,-1,current_date) report_date\\n,\u00271d\u0027 stat_type\\n,t2.trans_name\\n,count(distinct t1.payer_account_id) trans_users\\n,sum(t1.pay_amount)/100 pay_amt\\n,count(*) trans_cnt\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\nfrom success_txn t1\\nleft join etl_dwd.ng_desc_trans_type t2\\non t1.trans_type\u003dt2.trans_type\\nwhere t1.update_time between dateadd(day,-1,current_date) and current_date\\ngroup by 1,2,3,t1.phone_lock_flag\\nunion all\\nselect  dateadd(day,-1,current_date) report_date\\n,\u00270d\u0027 stat_type\\n,t2.trans_name\\n,count(distinct t1.payer_account_id) trans_users\\n,sum(t1.pay_amount)/100 pay_amt\\n,count(*) trans_cnt\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\nfrom success_txn t1\\nleft join etl_dwd.ng_desc_trans_type t2\\non t1.trans_type\u003dt2.trans_type\\nwhere date(t1.update_time) \u003d dateadd(day,-1,current_date)\\ngroup by 1,2,3,t1.phone_lock_flag;\\n\\n\\n\\n\",\"preStatements\":[],\"sqlType\":\"1\",\"receivers\":\"\",\"datasource\":3,\"showType\":\"TABLE\",\"localParams\":[],\"datasourceName\":\"mysql_conn\"},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":3,\"taskInstancePriority\":\"HIGH\",\"name\":\"dws_okcard_transaction\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"dwb_credit\"],\"id\":\"tasks-96807\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SQL\",\"params\":{\"postStatements\":[],\"connParams\":\"\",\"receiversCc\":\"\",\"udfs\":\"\",\"type\":\"POSTGRESQL\",\"title\":\"\",\"sql\":\"delete from tb_bidata.dws_okcard_referearn_user_distribute where 1\u003d1;\\ninsert into tb_bidata.dws_okcard_referearn_user_distribute\\n\\nselect dt,bill_cnts,count(card_no) as users\\nfrom (\\nselect  t.dt,t.card_no,count(distinct t.bill_date) as bill_cnts\\nfrom   etl_dwd.ng_okcard_debit_bill_slice t\\nwhere t.used_amount\u003e0\\ngroup by 1,2\\n)\\ngroup by 1,2\",\"preStatements\":[],\"sqlType\":\"1\",\"receivers\":\"\",\"datasource\":3,\"showType\":\"TABLE\",\"localParams\":[],\"datasourceName\":\"mysql_conn\"},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":1,\"taskInstancePriority\":\"MEDIUM\",\"name\":\"dws_okcard_referearn_user_distribute\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"dws_okcard_dim\"],\"id\":\"tasks-2-10r42k\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SQL\",\"params\":{\"postStatements\":[],\"connParams\":\"\",\"receiversCc\":\"\",\"udfs\":\"\",\"type\":\"POSTGRESQL\",\"title\":\"\",\"sql\":\"delete from tb_bidata.dws_okcard_referearn_bill_history_distribute where 1\u003d1;\\ninsert into tb_bidata.dws_okcard_referearn_bill_history_distribute\\n\\nselect t1.dt,t1.bill_date,t2.bill_cnt,count(t1.card_no) as users\\nfrom (select t.dt,t.bill_date,t.card_no\\nfrom   etl_dwd.ng_okcard_debit_bill_slice t\\nwhere  t.used_amount\u003e0 and t.bill_status\u003d0 ) t1\\nleft join (select t.dt,t.card_no,count(distinct t.bill_date) as bill_cnt\\nfrom   etl_dwd.ng_okcard_debit_bill_slice t\\nwhere  t.used_amount\u003e0 and t.bill_status\u003d1\\ngroup by 1,2) t2\\non t1.card_no \u003d t2.card_no and t1.dt\u003dt2.dt\\ngroup by 1,2,3\",\"preStatements\":[],\"sqlType\":\"1\",\"receivers\":\"\",\"datasource\":3,\"showType\":\"TABLE\",\"localParams\":[],\"datasourceName\":\"mysql_conn\"},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":1,\"taskInstancePriority\":\"MEDIUM\",\"name\":\"dws_okcard_referearn_bill_history_distribute\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"dws_okcard_referearn_user_distribute\"],\"id\":\"tasks-2-2x63m8\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SQL\",\"params\":{\"postStatements\":[],\"connParams\":\"\",\"receiversCc\":\"\",\"udfs\":\"\",\"type\":\"POSTGRESQL\",\"title\":\"\",\"sql\":\"delete from tb_bidata.dws_okcard_referearn_amount_distribute where 1\u003d1;\\ninsert into tb_bidata.dws_okcard_referearn_amount_distribute\\n\\nselect  t1.dt,t1.bill_date,\\ncase when t1.used_amount/100.0\u003c1000 then \u00271000以下\u0027\\nwhen t1.used_amount/100.0\u003c2000 then \u00271000-1999\u0027  when t1.used_amount/100.0\u003c3000 then \u00272000-2999\u0027\\nwhen t1.used_amount/100.0\u003c5000 then \u00273000-4999\u0027  when t1.used_amount/100.0\u003c10000 then \u00275000-9999\u0027\\nwhen t1.used_amount/100.0\u003c15000 then \u002710000-14999\u0027  when t1.used_amount/100.0\u003c20000 then \u002715000-19999\u0027\\nelse \u002720000以上\u0027 end as used_amount_type\\n,count(*) nn\\nfrom etl_dwd.ng_okcard_debit_bill_slice  t1\\nwhere  t1.used_amount\u003e0\\nGROUP BY 1,2,3\",\"preStatements\":[],\"sqlType\":\"1\",\"receivers\":\"\",\"datasource\":3,\"showType\":\"TABLE\",\"localParams\":[],\"datasourceName\":\"mysql_conn\"},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":1,\"taskInstancePriority\":\"MEDIUM\",\"name\":\"dws_okcard_referearn_amount_distribute\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"dws_okcard_referearn_user_distribute\"],\"id\":\"tasks-2-552559\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SQL\",\"params\":{\"postStatements\":[],\"connParams\":\"\",\"receiversCc\":\"\",\"udfs\":\"\",\"type\":\"POSTGRESQL\",\"title\":\"\",\"sql\":\"delete from tb_bidata.dws_okcard_referearn_cnt_distribute where 1\u003d1;\\ninsert into tb_bidata.dws_okcard_referearn_cnt_distribute\\n\\nselect  bill_date\\n,case when cnt\u003d1 then \u00271\u0027 when cnt between 2 and 3 then \u00272-3\u0027\\nwhen cnt between 4 and 5 then \u00274-5\u0027 when cnt between 6 and 10 then \u00276-10\u0027\\nwhen cnt between 11 and 15 then \u002711-15\u0027   when cnt between 16 and 20 then \u002716-20\u0027\\nwhen cnt between 21 and 30 then \u002721-30\u0027 when cnt between 31 and 40 then \u002731-40\u0027\\nwhen cnt between 41 and 50 then \u002741-50\u0027 else \u002750+\u0027 end as trans_cnt_type\\n,count(payer_member_id) as users\\nfrom (\\nselect case when date_part(day,t1.update_time) between 1 and 15 then dateadd(day,15,date_trunc(\u0027month\u0027,t1.update_time))\\nelse dateadd(day,1,last_day(t1.update_time)) end as bill_date\\n,t1.payer_member_id\\n,count(t1.update_time) as cnt\\nfrom  etl_dwb.ng_okcard_transaction t1\\nwhere t1.pay_status\u003d1\\nand  t1.update_time \u003e\u003d\u00272021-07-02\u0027\\nGROUP BY 1,2\\n)\\nGROUP BY 1,2\",\"preStatements\":[],\"sqlType\":\"1\",\"receivers\":\"\",\"datasource\":3,\"showType\":\"TABLE\",\"localParams\":[],\"datasourceName\":\"mysql_conn\"},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":1,\"taskInstancePriority\":\"MEDIUM\",\"name\":\"dws_okcard_referearn_cnt_distribute\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"dws_okcard_referearn_user_distribute\"],\"id\":\"tasks-2-13q2wc\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SQL\",\"params\":{\"postStatements\":[],\"connParams\":\"\",\"receiversCc\":\"\",\"udfs\":\"\",\"type\":\"POSTGRESQL\",\"title\":\"\",\"sql\":\"delete from tb_bidata.dws_okcard_referearn_cnt_distribute_dt  where 1\u003d1;\\ninsert into tb_bidata.dws_okcard_referearn_cnt_distribute_dt\\n\\n\\nselect  dt\\n,case when cnt\u003d1 then \u00271\u0027 when cnt between 2 and 3 then \u00272-3\u0027\\nwhen cnt between 4 and 5 then \u00274-5\u0027 when cnt between 6 and 10 then \u00276-10\u0027\\nwhen cnt between 11 and 15 then \u002711-15\u0027   when cnt between 16 and 20 then \u002716-20\u0027\\nwhen cnt between 21 and 30 then \u002721-30\u0027 when cnt between 31 and 40 then \u002731-40\u0027\\nwhen cnt between 41 and 50 then \u002741-50\u0027 else \u002750+\u0027 end as trans_cnt_type\\n,count(payer_member_id) as users\\nfrom (\\nselect  date(t1.update_time) as dt ,t1.payer_member_id\\n,count(t1.update_time) as cnt ,sum(t1.pay_amount/100.0) as pay_amt\\nfrom  etl_dwb.ng_okcard_transaction t1\\nwhere t1.pay_status\u003d1\\nand t1.update_time \u003e\u003d\u00272021-07-02\u0027\\nGROUP BY 1,2\\n )\\nGROUP BY 1,2\",\"preStatements\":[],\"sqlType\":\"1\",\"receivers\":\"\",\"datasource\":3,\"showType\":\"TABLE\",\"localParams\":[],\"datasourceName\":\"mysql_conn\"},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":1,\"taskInstancePriority\":\"MEDIUM\",\"name\":\"dws_okcard_referearn_cnt_distribute_dt\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"dws_okcard_referearn_user_distribute\"],\"id\":\"tasks-2-3gy2ci\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SQL\",\"params\":{\"postStatements\":[],\"connParams\":\"\",\"receiversCc\":\"\",\"udfs\":\"\",\"type\":\"POSTGRESQL\",\"title\":\"\",\"sql\":\"delete from tb_bidata.dws_okcard_referearn_detail where time_type \u003c\u003e \u00276\u0027;\\ndelete from tb_bidata.dws_okcard_referearn_detail where time_type \u003d \u00276\u0027 and dt\u003ddateadd(day,-1,current_date);\\ninsert into tb_bidata.dws_okcard_referearn_detail\\n\\n\\nwith  regist_data_day as (\\nselect  date(dateadd(hour,1,t1.register_time)) as dt,count(DISTINCT t1.member_id) as regist_users ---re注册用户\\n,count(DISTINCT t2.member_id) as target_users   --注册用户中目标用户\\n,round(target_users::numeric/regist_users,4) as target_user_pt  ---注册用户中目标用户占比\\n,count(distinct case when t2.member_id is not null then t3.member_id end) as target_apply_users ---当日注册当日申请的目标用户\\n,count(distinct t4.cid) as okcard_active_users ---当日注册当日激活okcard用户\\n,count(distinct case when t5.friend_member_id is null then t4.cid end) as uninvite_active_users  ---非邀请 激活用户\\nfrom etl_dwm.ng_member_tags_detail t1\\nleft join (select  t.member_id\\nfrom report_mysql_ng.t_ok_card_target_user t\\nGROUP BY 1)  t2   on t1.member_id \u003d t2.member_id\\nleft join (select date(t.create_time) as apply_dt,t.member_id\\nfrom etl_dwd.ng_okcard_apply_log t\\ngroup by 1,2)  t3\\non t1.member_id \u003d t3.member_id and date(dateadd(hour,1,t1.register_time))\u003dt3.apply_dt\\nleft join  (select date(min(create_time)) as credit_dt, cid\\nfrom etl_dwd.ng_okcard_application\\nwhere status\u003d2\\nGROUP BY 2) t4\\non t1.member_id \u003d t4.cid and date(dateadd(hour,1,t1.register_time))\u003dt4.credit_dt\\nleft join (select  date(dateadd(hour,1,t.active_time)) as invite_dt,t.friend_member_id\\nfrom report_mysql_ng.t_ok_card_invite_activity t where t.active_status\u003d1\\ngroup by 1,2) t5\\non t1.member_id \u003d t5.friend_member_id and date(dateadd(hour,1,t1.register_time))\u003dt5.invite_dt\\nwhere t1.first_channel\u003d\u0027MGM-activities\u0027 and t1.second_channel\u003d\u0027ReferEarn\u0027\\nand t1.register_time \u003e\u003d\u00272021-10-27\u0027\\nGROUP BY 1\\n),\\ninvite_data_day as (\\nselect  date(dateadd(hour,1,t1.create_time)) as dt\\n,count(DISTINCT t1.member_id) as invite_users  ---邀请人\\n,count(case when t1.rn\u003d1 then 1 end) as new_invite_users   ---新增邀请人\\n,count(DISTINCT t1.friend_member_id) as friend_users   ---受邀人\\n,count(DISTINCT case when date(t1.create_time)\u003ddate(t2.create_time) then t1.friend_member_id end) as new_friend_users ---当日注册受邀人\\n,count(DISTINCT case when t3.member_id is not null then  t1.friend_member_id end ) as target_friend_users ---受邀目标用户\\n,sum(new_invite_users) over(order by dt rows unbounded preceding) as sum_invite_users\\n,sum(target_friend_users) over(order by dt rows unbounded preceding) as sum_target_friend_users\\nfrom (select t.*,row_number() over(partition by t.member_id order by t.create_time) as rn\\nfrom report_mysql_ng.t_ok_card_invite_activity t ) t1\\nleft join report_mongo.ng_member t2\\non t1.friend_member_id \u003d t2.member_id\\nleft join (select  t.member_id\\nfrom report_mysql_ng.t_ok_card_target_user t   GROUP BY 1)  t3\\non  t1.friend_member_id \u003d t3.member_id\\nGROUP BY 1\\n) ,\\nactive_data_day as (\\nselect  date(dateadd(hour,1,t1.active_time)) as dt\\n,count(DISTINCT t1.friend_member_id) as active_users   ----当日激活用户\\n,count(distinct case when date(t1.active_time)\u003ddate(t2.create_time) then t1.friend_member_id end) as newregist_active_users   ----当日注册 当日激活\\n,count(distinct case when date(t1.active_time)\u003edate(t2.create_time) then t1.friend_member_id end) as oldregist_active_users   ----非当日注册  当日激活\\n,sum(active_users) over(order by dt rows unbounded preceding) as sum_active_users\\nfrom report_mysql_ng.t_ok_card_invite_activity t1\\nleft join report_mongo.ng_member t2\\non t1.friend_member_id\u003dt2.member_id  where t1.active_status\u003d1\\nGROUP BY 1\\n),\\nwithdraw_data_day as (\\nselect  date(dateadd(hour,1,t1.create_time)) as dt  ,count(DISTINCT t1.member_id) as withdraw_users  ,sum(t1.amount/100.0) as withdraw_amts\\n,sum(withdraw_amts) over(order by dt rows unbounded preceding) as sum_withdraw_amts\\nfrom report_mysql_ng.t_ok_card_invite_activity_withdraw t1\\nwhere t1.withdraw_status\u003d1\\nGROUP BY 1\\n)\\n\\n\\n, regist_data_week as (\\nselect  date(dateadd(day,-7,next_day(dateadd(hour,1,t1.register_time),\u0027Su\u0027))) as dt,count(DISTINCT t1.member_id) as regist_users ---re注册用户\\n,count(DISTINCT t2.member_id) as target_users   --注册用户中目标用户\\n,round(target_users::numeric/regist_users,4) as target_user_pt  ---注册用户中目标用户占比\\n,count(distinct case when t2.member_id is not null then t3.member_id end) as target_apply_users ---当日注册当日申请的目标用户\\n,count(distinct t4.cid) as okcard_active_users ---当日注册当日激活okcard用户\\n,count(distinct case when t5.friend_member_id is null then t4.cid end) as uninvite_active_users  ---非邀请 激活用户\\nfrom etl_dwm.ng_member_tags_detail t1\\nleft join (select  t.member_id\\nfrom report_mysql_ng.t_ok_card_target_user t\\nGROUP BY 1)  t2   on t1.member_id \u003d t2.member_id\\nleft join (select date(dateadd(day,-7,next_day(t.create_time,\u0027Su\u0027))) as apply_dt,t.member_id\\nfrom etl_dwd.ng_okcard_apply_log t\\ngroup by 1,2)  t3\\non t1.member_id \u003d t3.member_id and date(dateadd(day,-7,next_day(dateadd(hour,1,t1.register_time),\u0027Su\u0027)))\u003dt3.apply_dt\\nleft join  (select date(dateadd(day,-7,next_day(min(create_time),\u0027Su\u0027))) as credit_dt, cid\\nfrom etl_dwd.ng_okcard_application\\nwhere status\u003d2\\nGROUP BY 2) t4\\non t1.member_id \u003d t4.cid and date(dateadd(day,-7,next_day(dateadd(hour,1,t1.register_time),\u0027Su\u0027)))\u003dt4.credit_dt\\nleft join (select  date(dateadd(day,-7,next_day(dateadd(hour,1,t.active_time),\u0027Su\u0027))) as invite_dt,t.friend_member_id\\nfrom report_mysql_ng.t_ok_card_invite_activity t where t.active_status\u003d1\\ngroup by 1,2) t5\\non t1.member_id \u003d t5.friend_member_id and date(dateadd(day,-7,next_day(dateadd(hour,1,t1.register_time),\u0027Su\u0027)))\u003dt5.invite_dt\\nwhere t1.first_channel\u003d\u0027MGM-activities\u0027 and t1.second_channel\u003d\u0027ReferEarn\u0027\\nand t1.register_time \u003e\u003d\u00272021-10-27\u0027\\nGROUP BY 1\\n),\\ninvite_data_week as (\\nselect  date(dateadd(day,-7,next_day(dateadd(hour,1,t1.create_time),\u0027Su\u0027))) as dt\\n,count(DISTINCT t1.member_id) as invite_users  ---邀请人\\n,count(case when t1.rn\u003d1 then 1 end) as new_invite_users   ---新增邀请人\\n,count(DISTINCT t1.friend_member_id) as friend_users   ---受邀人\\n,count(DISTINCT case when date(dateadd(day,-7,next_day(t1.create_time,\u0027Su\u0027)))\u003ddate(dateadd(day,-7,next_day(t2.create_time,\u0027Su\u0027))) then t1.friend_member_id end) as new_friend_users ---当日注册受邀人\\n,count(DISTINCT case when t3.member_id is not null then  t1.friend_member_id end ) as target_friend_users ---受邀目标用户\\n,sum(new_invite_users) over(order by dt rows unbounded preceding) as sum_invite_users\\n,sum(target_friend_users) over(order by dt rows unbounded preceding) as sum_target_friend_users\\nfrom (select t.*,row_number() over(partition by t.member_id order by t.create_time) as rn\\nfrom report_mysql_ng.t_ok_card_invite_activity t ) t1\\nleft join report_mongo.ng_member t2\\non t1.friend_member_id \u003d t2.member_id\\nleft join (select  t.member_id\\nfrom report_mysql_ng.t_ok_card_target_user t   GROUP BY 1)  t3\\non  t1.friend_member_id \u003d t3.member_id\\nGROUP BY 1\\n) ,\\nactive_data_week as (\\nselect  date(dateadd(day,-7,next_day(dateadd(hour,1,t1.active_time),\u0027Su\u0027))) as dt\\n,count(DISTINCT t1.friend_member_id) as active_users   ----当日激活用户\\n,count(distinct case when date(dateadd(day,-7,next_day(t1.active_time,\u0027Su\u0027)))\u003ddate(dateadd(day,-7,next_day(t1.create_time,\u0027Su\u0027))) then t1.friend_member_id end) as newregist_active_users   ----当日注册 当日激活\\n,count(distinct case when date(dateadd(day,-7,next_day(t1.active_time,\u0027Su\u0027)))\u003edate(dateadd(day,-7,next_day(t1.create_time,\u0027Su\u0027))) then t1.friend_member_id end) as oldregist_active_users   ----非当日注册  当日激活\\n,sum(active_users) over(order by dt rows unbounded preceding) as sum_active_users\\nfrom report_mysql_ng.t_ok_card_invite_activity t1\\nleft join report_mongo.ng_member t2\\non t1.friend_member_id\u003dt2.member_id  where t1.active_status\u003d1\\nGROUP BY 1\\n),\\nwithdraw_data_week as (\\nselect  date(dateadd(day,-7,next_day(dateadd(hour,1,t1.create_time),\u0027Su\u0027))) as dt  ,count(DISTINCT t1.member_id) as withdraw_users  ,sum(t1.amount/100.0) as withdraw_amts\\n,sum(withdraw_amts) over(order by dt rows unbounded preceding) as sum_withdraw_amts\\nfrom report_mysql_ng.t_ok_card_invite_activity_withdraw t1\\nwhere t1.withdraw_status\u003d1\\nGROUP BY 1\\n)\\n,regist_data_month as (\\nselect  last_day(dateadd(hour,1,t1.register_time)) as dt,count(DISTINCT t1.member_id) as regist_users ---re注册用户\\n,count(DISTINCT t2.member_id) as target_users   --注册用户中目标用户\\n,round(target_users::numeric/regist_users,4) as target_user_pt  ---注册用户中目标用户占比\\n,count(distinct case when t2.member_id is not null then t3.member_id end) as target_apply_users ---当日注册当日申请的目标用户\\n,count(distinct t4.cid) as okcard_active_users ---当日注册当日激活okcard用户\\n,count(distinct case when t5.friend_member_id is null then t4.cid end) as uninvite_active_users  ---非邀请 激活用户\\nfrom etl_dwm.ng_member_tags_detail t1\\nleft join (select  t.member_id\\nfrom report_mysql_ng.t_ok_card_target_user t\\nGROUP BY 1)  t2   on t1.member_id \u003d t2.member_id\\nleft join (select last_day(t.create_time) as apply_dt,t.member_id\\nfrom etl_dwd.ng_okcard_apply_log t\\ngroup by 1,2)  t3\\non t1.member_id \u003d t3.member_id and last_day(dateadd(hour,1,t1.register_time))\u003dt3.apply_dt\\nleft join  (select last_day(min(create_time)) as credit_dt, cid\\nfrom etl_dwd.ng_okcard_application\\nwhere status\u003d2\\nGROUP BY 2) t4\\non t1.member_id \u003d t4.cid and last_day(dateadd(hour,1,t1.register_time))\u003dt4.credit_dt\\nleft join (select  last_day(dateadd(hour,1,t.active_time)) as invite_dt,t.friend_member_id\\nfrom report_mysql_ng.t_ok_card_invite_activity t where t.active_status\u003d1\\ngroup by 1,2) t5\\non t1.member_id \u003d t5.friend_member_id and last_day(dateadd(hour,1,t1.register_time))\u003dt5.invite_dt\\nwhere t1.first_channel\u003d\u0027MGM-activities\u0027 and t1.second_channel\u003d\u0027ReferEarn\u0027\\nand t1.register_time \u003e\u003d\u00272021-10-27\u0027\\nGROUP BY 1\\n),\\ninvite_data_month as (\\nselect  last_day(dateadd(hour,1,t1.create_time)) as dt\\n,count(DISTINCT t1.member_id) as invite_users  ---邀请人\\n,count(case when t1.rn\u003d1 then 1 end) as new_invite_users   ---新增邀请人\\n,count(DISTINCT t1.friend_member_id) as friend_users   ---受邀人\\n,count(DISTINCT case when last_day(t1.create_time)\u003dlast_day(t2.create_time) then t1.friend_member_id end) as new_friend_users ---当日注册受邀人\\n,count(DISTINCT case when t3.member_id is not null then  t1.friend_member_id end ) as target_friend_users ---受邀目标用户\\n,sum(new_invite_users) over(order by dt rows unbounded preceding) as sum_invite_users\\n,sum(target_friend_users) over(order by dt rows unbounded preceding) as sum_target_friend_users\\nfrom (select t.*,row_number() over(partition by t.member_id order by t.create_time) as rn\\nfrom report_mysql_ng.t_ok_card_invite_activity t ) t1\\nleft join report_mongo.ng_member t2\\non t1.friend_member_id \u003d t2.member_id\\nleft join (select  t.member_id\\nfrom report_mysql_ng.t_ok_card_target_user t   GROUP BY 1)  t3\\non  t1.friend_member_id \u003d t3.member_id\\nGROUP BY 1\\n) ,\\nactive_data_month as (\\nselect  last_day(dateadd(hour,1,t1.active_time)) as dt\\n,count(DISTINCT t1.friend_member_id) as active_users   ----当日激活用户\\n,count(distinct case when last_day(t1.active_time)\u003dlast_day(t2.create_time) then t1.friend_member_id end) as newregist_active_users   ----当日注册 当日激活\\n,count(distinct case when last_day(t1.active_time)\u003elast_day(t2.create_time) then t1.friend_member_id end) as oldregist_active_users   ----非当日注册  当日激活\\n,sum(active_users) over(order by dt rows unbounded preceding) as sum_active_users\\nfrom report_mysql_ng.t_ok_card_invite_activity t1\\nleft join report_mongo.ng_member t2\\non t1.friend_member_id\u003dt2.member_id  where t1.active_status\u003d1\\nGROUP BY 1\\n),\\nwithdraw_data_month as (\\nselect  last_day(dateadd(hour,1,t1.create_time)) as dt  ,count(DISTINCT t1.member_id) as withdraw_users  ,sum(t1.amount/100.0) as withdraw_amts\\n,sum(withdraw_amts) over(order by dt rows unbounded preceding) as sum_withdraw_amts\\nfrom report_mysql_ng.t_ok_card_invite_activity_withdraw t1\\nwhere t1.withdraw_status\u003d1\\nGROUP BY 1\\n)\\n,\\n\\n regist_data_total as (\\nselect  dateadd(day,-1,current_date) as dt,count(DISTINCT t1.member_id) as regist_users ---re注册用户\\n,count(DISTINCT t2.member_id) as target_users   --注册用户中目标用户\\n,round(target_users::numeric/regist_users,4) as target_user_pt  ---注册用户中目标用户占比\\n,count(distinct case when t2.member_id is not null then t3.member_id end) as target_apply_users ---当日注册当日申请的目标用户\\n,count(distinct t4.cid) as okcard_active_users ---当日注册当日激活okcard用户\\n,count(distinct case when t5.friend_member_id is null then t4.cid end) as uninvite_active_users  ---非邀请 激活用户\\nfrom etl_dwm.ng_member_tags_detail t1\\nleft join (select  t.member_id\\nfrom report_mysql_ng.t_ok_card_target_user t\\nGROUP BY 1)  t2   on t1.member_id \u003d t2.member_id\\nleft join (select dateadd(day,-1,current_date) as apply_dt,t.member_id\\nfrom etl_dwd.ng_okcard_apply_log t where date(t.create_time)\u003ccurrent_date\\ngroup by 1,2)  t3\\non t1.member_id \u003d t3.member_id\\nleft join  (select dateadd(day,-1,current_date) as credit_dt, cid\\nfrom etl_dwd.ng_okcard_application\\nwhere status\u003d2\\nGROUP BY 2) t4\\non t1.member_id \u003d t4.cid\\nleft join (select  dateadd(day,-1,current_date) as invite_dt,t.friend_member_id\\nfrom report_mysql_ng.t_ok_card_invite_activity t where t.active_status\u003d1 and date(dateadd(hour,1,t.active_time)) \u003ccurrent_date\\ngroup by 1,2) t5\\non t1.member_id \u003d t5.friend_member_id\\nwhere t1.first_channel\u003d\u0027MGM-activities\u0027 and t1.second_channel\u003d\u0027ReferEarn\u0027\\nand t1.register_time \u003e\u003d\u00272021-10-27\u0027 and   date(dateadd(hour,1,t1.register_time)) \u003ccurrent_date\\nGROUP BY 1\\n),\\ninvite_data_total as (\\nselect  dateadd(day,-1,current_date) as dt\\n,count(DISTINCT t1.member_id) as invite_users  ---邀请人\\n,count(case when t1.rn\u003d1 then 1 end) as new_invite_users   ---新增邀请人\\n,count(DISTINCT t1.friend_member_id) as friend_users   ---受邀人\\n,count(DISTINCT t1.friend_member_id ) as new_friend_users ---当日注册受邀人\\n,count(DISTINCT case when t3.member_id is not null then  t1.friend_member_id end ) as target_friend_users ---受邀目标用户\\n,new_invite_users as sum_invite_users\\n,target_friend_users as sum_target_friend_users\\nfrom (select t.*,row_number() over(partition by t.member_id order by t.create_time) as rn\\nfrom report_mysql_ng.t_ok_card_invite_activity t  where date(dateadd(hour,1,t.create_time))\u003ccurrent_date ) t1\\nleft join report_mongo.ng_member t2\\non t1.friend_member_id \u003d t2.member_id\\nleft join (select  t.member_id\\nfrom report_mysql_ng.t_ok_card_target_user t   GROUP BY 1)  t3\\non  t1.friend_member_id \u003d t3.member_id\\nGROUP BY 1\\n) ,\\nactive_data_total as (\\nselect  dateadd(day,-1,current_date) as dt\\n,count(DISTINCT t1.friend_member_id) as active_users   ----当日激活用户\\n,count(distinct  t1.friend_member_id ) as newregist_active_users   ----当日注册 当日激活\\n,count(distinct  t1.friend_member_id ) as oldregist_active_users   ----非当日注册  当日激活\\n,active_users as sum_active_users\\nfrom report_mysql_ng.t_ok_card_invite_activity t1\\nleft join report_mongo.ng_member t2\\non t1.friend_member_id\u003dt2.member_id  where t1.active_status\u003d1 and date(dateadd(hour,1,t1.active_time))\u003ccurrent_date\\nGROUP BY 1\\n),\\nwithdraw_data_total as (\\nselect  dateadd(day,-1,current_date) as dt  ,count(DISTINCT t1.member_id) as withdraw_users  ,sum(t1.amount/100.0) as withdraw_amts\\n,sum(t1.amount/100.0) as sum_withdraw_amts\\nfrom report_mysql_ng.t_ok_card_invite_activity_withdraw t1\\nwhere t1.withdraw_status\u003d1 and  date(dateadd(hour,1,t1.create_time))\u003ccurrent_date\\nGROUP BY 1\\n)\\n\\nselect t.*,t1.invite_users,t1.friend_users,t1.new_invite_users,t1.new_friend_users,t1.target_friend_users\\n,t1.sum_invite_users,t1.sum_target_friend_users,t2.active_users,t2.newregist_active_users,t2.oldregist_active_users\\n,t2.sum_active_users,round(t2.active_users::float/t1.target_friend_users,4) as active_rate\\n,round(t2.sum_active_users::float/t1.sum_target_friend_users,4) as sum_active_rate\\n,t3.withdraw_users,t3.withdraw_amts,t3.sum_withdraw_amts,\u00271\u0027 time_type\\nfrom regist_data_day t\\nleft join  invite_data_day t1  on t.dt\u003dt1.dt\\nleft join active_data_day t2   on t1.dt\u003dt2.dt\\nleft join withdraw_data_day t3   on t1.dt \u003d t3.dt\\n\\n\\n\\n-----------------------------------------------------------------------------------------------------------------------\\n-----------------------------------------------------------------------------------------------------------------------\\n--周\\nunion all\\n\\nselect t.*,t1.invite_users,t1.friend_users,t1.new_invite_users,t1.new_friend_users,t1.target_friend_users\\n,t1.sum_invite_users,t1.sum_target_friend_users,t2.active_users,t2.newregist_active_users,t2.oldregist_active_users\\n,t2.sum_active_users,round(t2.active_users::float/t1.target_friend_users,4) as active_rate\\n,round(t2.sum_active_users::float/t1.sum_target_friend_users,4) as sum_active_rate\\n,t3.withdraw_users,t3.withdraw_amts,t3.sum_withdraw_amts,\u00272\u0027 time_type\\nfrom regist_data_week t\\nleft join  invite_data_week t1  on t.dt\u003dt1.dt\\nleft join active_data_week t2   on t1.dt\u003dt2.dt\\nleft join withdraw_data_week t3   on t1.dt \u003d t3.dt\\n\\n-----------------------------------------------------------------------------------------------------------------------\\n-----------------------------------------------------------------------------------------------------------------------\\n--月\\nunion all\\n\\n\\n\\nselect t.*,t1.invite_users,t1.friend_users,t1.new_invite_users,t1.new_friend_users,t1.target_friend_users\\n,t1.sum_invite_users,t1.sum_target_friend_users,t2.active_users,t2.newregist_active_users,t2.oldregist_active_users\\n,t2.sum_active_users,round(t2.active_users::float/t1.target_friend_users,4) as active_rate\\n,round(t2.sum_active_users::float/t1.sum_target_friend_users,4) as sum_active_rate\\n,t3.withdraw_users,t3.withdraw_amts,t3.sum_withdraw_amts,\u00273\u0027 time_type\\nfrom regist_data_month t\\nleft join  invite_data_month t1  on t.dt\u003dt1.dt\\nleft join active_data_month t2   on t1.dt\u003dt2.dt\\nleft join withdraw_data_month t3   on t1.dt \u003d t3.dt\\n\\n\\n-----------------------------------------------------------------------------------------------------------------------\\n-----------------------------------------------------------------------------------------------------------------------\\n--汇总\\nunion all\\n\\n\\nselect t.*,t1.invite_users,t1.friend_users,t1.new_invite_users,t1.new_friend_users,t1.target_friend_users\\n,t1.sum_invite_users,t1.sum_target_friend_users,t2.active_users,t2.newregist_active_users,t2.oldregist_active_users\\n,t2.sum_active_users,round(t2.active_users::float/t1.target_friend_users,4) as active_rate\\n,round(t2.sum_active_users::float/t1.sum_target_friend_users,4) as sum_active_rate\\n,t3.withdraw_users,t3.withdraw_amts,t3.sum_withdraw_amts,\u00276\u0027 time_type\\nfrom regist_data_total t\\nleft join  invite_data_total t1  on t.dt\u003dt1.dt\\nleft join active_data_total t2   on t1.dt\u003dt2.dt\\nleft join withdraw_data_total t3   on t1.dt \u003d t3.dt\\n\",\"preStatements\":[],\"sqlType\":\"1\",\"receivers\":\"\",\"datasource\":3,\"showType\":\"TABLE\",\"localParams\":[],\"datasourceName\":\"mysql_conn\"},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":1,\"taskInstancePriority\":\"MEDIUM\",\"name\":\"dws_okcard_referearn_detail\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"dws_okcard_referearn_user_distribute\"],\"id\":\"tasks-2-1cea9\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SQL\",\"params\":{\"postStatements\":[],\"connParams\":\"\",\"receiversCc\":\"\",\"udfs\":\"\",\"type\":\"POSTGRESQL\",\"title\":\"\",\"sql\":\"--需求方：陈晓\\n--开发：grace 20211228\\n--okc转化数据\\n--1.3 授信拦截用户分析\\n\\n--用户分类：有锁、非锁\\n--授信拦截用户总数\\n--Palmpay黑名单拦截用户数\\n--OKC黑名单拦截 BLACK_LIST_USER\\n--金融大数据黑名单拦截用户数\\n--无锁手机 NO_LOCK_EMPTY_CONTACT_ERROR、NO_LOCK_RE_ACTIVE_ERROR\\n--手机锁已激活用户数 ACTIVATED_BUT_NOT_OK_CARD\\n--手机锁激活失败\\n--开户失败 OPEN_ACCOUNT_REJECT\\n\\n\\n--用户手机不支持手机锁 MOBILE_PHONE_THRESHOLD(true),\\n--设备手机锁已被激活，但不是okCard激活 ACTIVATED_BUT_NOT_OK_CARD(true),\\n--黑名单用户 BLACK_LIST_USER(false),\\n--EB在贷  EB_USER(true),\\n--ebx用户 EBX_USER(true),\\n--palmPay风控不通过 PALM_PAY_RISK_REJECT(true),\\n--开户拒绝 OPEN_ACCOUNT_REJECT(true),\\n--开户冻结 OPEN_ACCOUNT_FREEZE(true),\\n--PrePay逾期用户  PRE_PAY_OVERDUE(true),\\n--激活，风控参数缺失 ACTIVE_RISK_PARAM_ERROR(true),\\n--目标用户 TARGET_CUSTOMER(true),\\n--惩罚期用户 CLOSE_RE_APPLY_DAYS(true),\\n--非锁缺失联系人信息 NO_LOCK_EMPTY_CONTACT_ERROR(true),\\n--非锁重新授信报错 NO_LOCK_RE_ACTIVE_ERROR(true),\\n--该设备被其他手机号激活了  ACTIVATED_OTHER_PHONE_ERROR(true),\\n\\ndelete from tb_bidata.dws_okcard_block_user;\\n\\ninsert into tb_bidata.dws_okcard_block_user\\n\\nwith latest_reject as (select * from\\n(select member_id,create_time,user_tag,phone_lock_flag,row_number() over(partition by member_id order by create_time desc) rn\\nfrom etl_dwd.ng_okcard_apply_log where apply_status\u003c\u003e1 --- 开户失败的申请\\n) p where p.rn \u003d 1)\\n\\nselect date(t1.create_time) dt\\n,t1.phone_lock_flag||\u0027\u0027 phone_lock_flags\\n,user_tag\\n,count(1) block_user\\n,\u00271\u0027 time_type\\n,\u0027NG\u0027 country_code\\nfrom latest_reject t1 group by 1,2,3;\\n\\n------------------------------------------------------------------------------------------------------------------------\\n------------------------------------------------------------------------------------------------------------------------\\n--1.6 移除用户分析\\n-- 移除时间\\n-- 移除用户总数\\n-- 用户当前账期逾期天数超过1天\\n-- 用户当前账期逾期天数超过5天\\n-- 用户当前账期逾期天数超过20天\\n-- 激活成功后未交易用户数\\n\\ndelete from tb_bidata.dws_okcard_remove_user;\\n\\ninsert into tb_bidata.dws_okcard_remove_user\\n\\nwith remove_user as (\\nselect * from (\\nselect t1.memberId member_id,t2.card_no,date(t1.createTime) remove_dt\\n,row_number() over(partition by t1.memberId order by t1.createTime desc) rn\\nfrom report_mongo.ng_device_operation_log t1\\nleft join etl_dwd.ng_okcard_account t2 on t1.memberId \u003d t2.cid\\nwhere t1.type\u003d\u0027remove_lock\u0027) p where p.rn \u003d 1 )--最近一次移除时间\\n\\n,remove_user_trans as (\\nselect t1.remove_dt\\n,count(distinct t1.member_id) total_remove_user--移除用户总数\\n--激活成功后未交易用户数\\n,count(distinct case when a.cid is not null and t2.payer_member_id is null then t1.member_id else null end) credit_no_trans_user\\nfrom remove_user t1\\nleft join etl_dwd.ng_okcard_account a on t1.member_id\u003d a.cid\\nleft join etl_dwb.ng_okcard_transaction t2 on t1.member_id\u003dt2.payer_member_id and t2.pay_status\u003d1\\ngroup by 1 )\\n\\n--账单日 - 逾期天数\\n,debit_bill as (\\nselect t.card_no,t.bill_date,\\ncase when t.stauts\u003d2 then datediff(day,t.repayment_date,current_date)---stauts\u003d2：逾期待还\\nwhen t.bill_status\u003d1 and t.stauts in (0,3) then datediff(day,t.repayment_date,date(t.update_time))--bill_status\u003d1：已出账\\nelse 0 end as overdue_day--逾期天数\\nfrom etl_dwd.ng_okcard_debit_bill t)\\n\\n\\nselect t1.remove_dt\\n,a.bill_date\\n,t2.total_remove_user total_remove_users--移除日期当天移除的用户总数 移除用户总数\\n,t2.credit_no_trans_user credit_no_trans_users--移除日期当天移除的用户中 激活成功后未交易用户数\\n,count(distinct case when a.overdue_day \u003e1 then a.card_no else null end) overdue_lt_1_day\\n,count(distinct case when a.overdue_day \u003e5 then a.card_no else null end) overdue_lt_5_day\\n,count(distinct case when a.overdue_day \u003e20 then a.card_no else null end) overdue_lt_20_day\\n,\u00271\u0027 time_type\\n,\u0027NG\u0027 country_code\\nfrom remove_user t1\\nleft join debit_bill a on t1.card_no \u003d a.card_no\\nleft join remove_user_trans t2 on t1.remove_dt \u003d t2.remove_dt\\ngroup by 1,2,3,4;\\n------------------------------------------------------------------------------------------------------------------------\\n------------------------------------------------------------------------------------------------------------------------\",\"preStatements\":[],\"sqlType\":\"1\",\"receivers\":\"\",\"datasource\":3,\"showType\":\"TABLE\",\"localParams\":[],\"datasourceName\":\"mysql_conn\"},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":1,\"taskInstancePriority\":\"MEDIUM\",\"name\":\"dws_okcard_funnel\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"dws_okcard_referearn_user_distribute\"],\"id\":\"tasks-6520\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SQL\",\"params\":{\"postStatements\":[],\"connParams\":\"\",\"receiversCc\":\"\",\"udfs\":\"\",\"type\":\"POSTGRESQL\",\"title\":\"\",\"sql\":\"--------------------------------------------------------------------------------------------------------\\n----贷后人工监控  20220126\\n--------------------------------------------------------------------------------------------------------\\n-- 回款金额统计口径:不包括提前部分还款金额  20220629 ng_okcard_bill_allocated_record_slice\\n-- 当前回款用户归属：取最进一个跟进的follower且follower跟进时间 \u003c\u003d3 天   20220629\\n--------------------------------------------------------------------------------------------------------\\n\\n--\u00272022-07-20\u0027 只更新\u00272022-07-20\u0027 之后的数据，历史数据的  总回收率 \u003d 最近3天回收金额/总欠款 的统计口径\\n--\u00272022-07-20\u0027 之后的  总回收率 \u003d 当天归属该follower的案件在当天的总回款金额 /当天跟进的案件在当天的总欠款金额（切片表）\\ndelete from tb_bidata.dws_okcard_case_monitor where dt \u003e\u003d \u00272022-07-20\u0027 ;\\n\\ninsert into tb_bidata.dws_okcard_case_monitor\\n\\nwith allocate_slice as (\\nselect * from etl_dwd.ng_okcard_bill_allocated_record_slice where business_type \u003d 6\\n)\\n\\n,water as (--每个账单的还款情况\\nselect a.repay_date dt\\n,a.bill_id\\n,a.stauts\\n,sum(a.principal_amt) principal_amt\\n,sum(a.penalty_amt) penalty_amt\\n,sum(a.amount) amount\\nfrom etl_dwb.ng_okcard_repay_water a\\nwhere a.repay_date \u003e a.bill_date group by 1,2,3 )\\n\\n--每天催收员跟进过的案件 case_remark is not null\\n,follow as (\\nselect dateadd(hour,1,create_time) create_time,follower,bill_id,case_remark,dateadd(hour,1,update_time) update_time\\nfrom report_mysql_ng.t_okcard_bill_follow_record where dateadd(hour,1,create_time) \u003c current_date and business_type \u003d 6\\n)\\n--1、汇总的情况：\\n,allocates as (\\nselect a.dt\\n,follower\\n,count(*) total_cases  --总在库案件数\\n,sum(b.outstanding_amount)/100.0 total_outstanding_amount_1 --当天开始时的 总欠款金额\\n\\n--added on 20220722 by grace\\n,sum(w.amount)/100.0 day_total_repay_amt  --当天归属该follower的案件在当天的总回款金额\\n,sum(case when w.stauts \u003d2 then w.amount else 0 end)/100.0 day_partial_repay_amt  --当天归属该follower的案件在当天的部分还款金额\\n--,sum(case when b.stauts\u003d2 then nvl(b.paid_principal,0)+nvl(b.paid_penalty,0) else 0 end)/100.0 partital_repay_amt--部分还款金额 --催收员名下 allocate 所有的部分还款\\n\\n,nvl(total_outstanding_amount_1,0) total_outstanding_amount --当天开始时的 总欠款金额\\nfrom allocate_slice a\\ninner join etl_dwd.ng_okcard_debit_bill_slice b on a.bill_id \u003d b.id and b.dt \u003d a.dt\\nleft join water w on a.bill_id \u003d w.bill_id and w.dt \u003d a.dt\\ngroup by 1,2\\n)\\n\\n--2、未跟进的情况：\\n,unflollow as (\\nselect a.follower,a.bill_id,a.create_time\\nfrom allocate_slice a --report_mysql_ng.t_okcard_bill_allocated_record a\\nleft join follow b on a.bill_id\u003db.bill_id where a.dt \u003d current_date and b.bill_id is null\\nunion\\nselect a.follower,a.bill_id,a.create_time from follow a\\nwhere a.case_remark is null\\n)\\n\\n,unflollow_repay as (\\nselect date(a.create_time) dt\\n,follower\\n,sum(b.amount)/100.0 unfollow_repay_amt --未跟进已还款金额\\n,count(distinct case when b.stauts\u003d3 then b.bill_id else null end) unfollow_repay_case--未跟进已结清总案件数\\n,count(distinct case when b.stauts\u003d2 and b.amount\u003e0 then b.bill_id else null end) unfollow_partial_case--未跟进部分还款案件数\\nfrom unflollow a inner join (select bill_id,max(stauts) stauts,sum(amount) amount from water group by 1) b on a.bill_id \u003d b.bill_id --and b.dt \u003d date(a.create_time)\\ngroup by 1,2\\n)\\n\\n--3、跟进的情况：\\n,followers as (\\nselect date(f.create_time) dt --跟进日期\\n,f.follower\\n\\n,count(distinct case when b.stauts\u003d3 then f.bill_id else null end)  close_case--（跟进过的案件）已结清人数 follow表的已结清\\n\\n--案件跟进\\n,count(distinct case when f.case_remark is not null then f.bill_id else null end) cover_cases  ----跟进案件数\\n,sum(case when f.case_remark is not null then b.outstanding_amount else 0 end)/100.0 outstanding_amount_follow  ----跟进案件-未还总金额\\n,count(case when f.case_remark is not null then f.bill_id else null end) remark_numbers  --备注量\\n\\n,sum(case when f.case_remark is not null then w.amount else 0 end)/100.0 follow_repayment_amt-- 已跟进回款金额;已经跟进的回款金额\\n,count(distinct case when w.amount \u003e0 and f.case_remark is not null then f.bill_id else null end) follow_repayment_cases --已跟进总回款案件数 已经跟进的回款案件数\\n,count(distinct case when w.amount \u003e0 and f.case_remark is not null and b.stauts\u003d2 then f.bill_id else null end) follow_partial_repayment_cases  --部分还款数量 跟进过的案件中的部分还款人数\\n\\n,count(distinct case when b.stauts\u003d3 and f.case_remark is not null then f.bill_id else null end)  follow_recovery_close  --已跟进的结清案件数\\n\\nfrom follow f\\nleft join water w on f.bill_id \u003d w.bill_id and date(f.create_time) \u003d w.dt\\nleft join etl_dwd.ng_okcard_debit_bill_slice b on f.bill_id \u003d b.id and date(f.create_time) \u003d b.dt  -- b.dt \u003d current_date\\nwhere date(f.create_time) \u003e\u003d \u00272022-07-20\u0027\\ngroup by 1,2\\n)\\n\\n---added by grace 20220713  (最近3天) ---start\\n--总回收率 \u003d 跟进日当天的最近3天 跟进过的案件的回款/ \u003c总欠款金额\u003e\\n--总计的部分还款 \u003d 跟进日当天的最近3天 还款且未结清，且还款时间在还款日之后/\u003c总欠款金额\u003e\\n\\n--催收员 最近三天跟进的账单,在今天的还款情况\\n,latest_3_days as (\\nselect a.dt-1 dts\\n,a.follower\\n,sum(a.total_repay_amount)/100.0 total_repay_amount_3 --跟进日当天的最近3天 跟进过的案件的回款\\n,sum(case when a.stauts \u003d 2 then a.total_repay_amount else 0 end )/100.0 partial_repay_amount_3 --跟进日当天的最近3天 跟进过的案件的回款\\nfrom etl_dwb.ng_okcard_bill_follow_record a\\nwhere a.business_type \u003d 6\\ngroup by 1,2\\n)\\n---added by grace 20220713  (最近3天) ---end\\n\\n--跟进时间\\n,follow_time as (\\nselect date(a.create_time) dt\\n,follower\\n,max(a.create_time) last_remark_time --最后一条备注时间\\n,avg(datediff(second,a.create_time,a.update_time)) avg_remark_time --平均跟进时间\\n,min(a.create_time)  early_login_time--当天最早登陆系统时间\\nfrom follow a\\nwhere a.case_remark is not null group by 1,2\\n)\\n\\nselect a.dt\\n,a.follower\\n,nvl(nvl(e.total_cases,a.cover_cases),0) total_cases_1  --总在库案件数(未还款在库的案件数 总案件数  --\\t allocate 当天的记录\\n,nvl(nvl(e.total_outstanding_amount,a.outstanding_amount_follow),0) total_outstanding_amount_1 --总欠款金额 --待还金额 --\\t allocate 当天的记录\\n\\n,a.cover_cases  ----跟进案件数 已跟进案件总数\\n,1.0*a.cover_cases/nullif(total_cases_1,0) covery_case_rate  --?覆盖率  \u003d  跟进案件数/未还款在库的案件数\\n,a.remark_numbers--备注量\\n\\n--,1.0*a.close_case/nullif(e.total_cases,0) total_repay_rate-- 总回收率 \u003d 跟进日当天的最近3天 跟进过的案件的回款/ \u003c总欠款金额\u003e\\n--,1.0*e.partital_repay_amt/nullif(e.total_outstanding_amount+e.partital_repay_amt,0) partial_repay_rate --总计的部分还款占比（跟进+未跟进）;部分还款金额/总欠款金额\\n\\n--updated on 20220722 by grace\\n,1.0*e.day_total_repay_amt / nullif(total_outstanding_amount_1,0) total_repay_rate-- 总回收率 \u003d 当天跟进的案件总回款金额/ 当天跟进的案件在当天的总欠款金额（切片表）\\n,1.0*e.day_partial_repay_amt/nullif(total_outstanding_amount_1,0) partial_repay_rate --总计的部分还款占比 \u003d 当天跟进的案件部分回款金额 / 当天跟进的案件在当天的总欠款金额（切片表）\\n\\n,a.follow_repayment_amt-- 已跟进回款金额;已经跟进的回款金额\\n,a.follow_repayment_cases --已跟进总回款案件数 已经跟进的回款案件数\\n,a.follow_partial_repayment_cases  follow_partial_repay_case--部分还款数量 跟进过的案件中的部分还款人数\\n,1.0*a.follow_recovery_close/nullif(a.cover_cases,0)  follow_recovery_rate  --人工跟进回款率 \u003d 已跟进的结清案件数/已跟进案件总数\\n\\n,d.unfollow_repay_amt --未跟进已还款金额\\n,d.unfollow_repay_case--未跟进已结清总案件数\\n,d.unfollow_partial_case --未跟进部分还款案件数\\n\\n,c.last_remark_time --最后一条备注时间\\n,c.avg_remark_time --平均跟进时间\\n,c.early_login_time  --当天最早登陆系统时间\\n\\n,\u00271\u0027 time_type\\n,\u0027NG\u0027 country_code\\n\\n--added on 20220722 by grace\\n,tt.total_repay_amount_3  --近3天案件总回款：跟进日当天的最近3天 跟进过的案件的 总回款\\n,tt.partial_repay_amount_3 --近3天案件部分回款：跟进日当天的最近3天 跟进过的案件的 部分回款\\n\\nfrom followers a\\nleft join latest_3_days tt on a.follower \u003d tt.follower and a.dt \u003d tt.dts\\nleft join allocates e on a.follower \u003d e.follower and a.dt \u003d e.dt\\nleft join unflollow_repay d on a.follower \u003d d.follower and a.dt \u003d d.dt\\nleft join follow_time c on a.dt \u003d c.dt and a.follower\u003dc.follower\\n\\n;\\n\\n\\n--------------------------------------------------------------------------------------------------------\\n----case sates （联系结果）rate%（取当天有跟进过并取最后一个状态/已经跟进案件数总数）  20220126\\n--------------------------------------------------------------------------------------------------------\\n--PTP\\t.case_status字段为1的数量\\n--postpone\\t .case_status 字段为2的数量\\n--refuse to pay\\t .case_status 字段为4的数量\\n--not cooperated\\t .case_status 字段为5的数量\\n--didnn\u0027t take loan\\t .case_status 字段为6的数量\\n--complain\\t .case_status 字段为7的数量\\n--didn\u0027t pick up\\t .case_status 字段为8的数量\\n--switched off\\t .case_status 字段为9的数量\\n--busy tone\\t .case_status 字段为10的数量\\n--can\u0027t be reach\\t .case_status 字段为11的数量\\n\\ndelete from tb_bidata.dws_okcard_case_status;\\n\\ninsert into tb_bidata.dws_okcard_case_status\\n\\nselect follower\\n,case_status\\n,count(bill_id) follow_cnt\\nfrom report_mysql_ng.t_okcard_bill_follow_record where   business_type \u003d 6\\n\\ngroup by 1,2;\\n\\n---------------------------------------------------------------------------------------------------------------------------\\n---20220310 贷后二期\\n--各渠道催回率报表\\n--新增有无锁 20220607\\n---------------------------------------------------------------------------------------------------------------------------\\n\\ndelete from tb_bidata.dws_okcard_case_dpd;\\n\\ninsert into tb_bidata.dws_okcard_case_dpd\\n\\nwith\\n--每天每个账单的还款情况\\nwater as (\\nselect a.repay_date dt\\n,a.bill_id\\n,sum(a.principal_amt) principal_amt\\n,sum(a.penalty_amt) penalty_amt\\n,sum(a.interest_amt) interest_amt\\n,sum(a.extent_amt) extent_amt\\n,sum(a.installment_amt) installment_amt\\n,sum(a.overpayment_amt) overpayment_amt\\n,sum(a.amount) amount\\nfrom etl_dwb.ng_okcard_repay_water a group by 1,2\\n)\\n\\n--每天催收员跟进过的案件 case_remark is not null\\n,follow as (\\nselect create_time,follower,bill_id,case_remark,update_time,case_status\\nfrom report_mysql_ng.t_okcard_bill_follow_record where   business_type \u003d 6\\n)\\n--应还本金\\t逾期金额\\t已还本金\\t已还罚息\\n\\n--2、未跟进的情况（非人工跟进）：\\n,unflollow as (\\nselect a.follower,a.bill_id\\nfrom report_mysql_ng.t_okcard_bill_allocated_record a\\nleft join follow b on a.bill_id\u003db.bill_id where b.bill_id is null\\nunion\\nselect a.follower,a.bill_id from follow a where a.case_remark is null\\n)\\n\\n,unflollow_repay as (\\nselect b.dt\\n,b.phone_lock_flag\\n,b.bill_date\\n,datediff(day,b.repayment_date,b.dt) dpd_level\\n,count(distinct a.bill_id) case_cnt\\n,sum(b.used_amount)/100.0   used_amt --应还本金\\n,sum(b.unpaid_principal)/100.0 unpaid_principal --逾期金额\\n,sum(b.paid_principal)/100.0 paid_principal --已还本金\\n,sum(b.paid_penalty)/100.0 paid_penalty --已还罚息\\n,sum(w.amount) yesterday_repay_amt\\n\\nfrom unflollow a inner join etl_dwd.ng_okcard_debit_bill_slice b on a.bill_id \u003d b.id --and b.dt \u003d current_date\\nleft join water w on a.bill_id\u003dw.bill_id and w.dt \u003d b.dt-1\\ngroup by 1,2,3,4\\n)\\n\\n--3、跟进的情况：\\n,follower_repay as (\\nselect b.dt\\n,b.phone_lock_flag\\n,b.bill_date\\n,datediff(day,b.repayment_date,b.dt) dpd_level\\n,count(distinct f.bill_id) case_cnt\\n,sum(b.used_amount)/100.0   used_amt --应还本金\\n,sum(b.unpaid_principal)/100.0 unpaid_principal --逾期金额\\n,sum(b.paid_principal)/100.0 paid_principal --已还本金\\n,sum(b.paid_penalty)/100.0 paid_penalty --已还罚息\\n,sum(w.amount) yesterday_repay_amt\\n\\n,1.0*count(*)/count(distinct f.bill_id) avg_follow_cnt--平均跟进次数\\n,count(distinct case when f.case_status\u003d1 then f.bill_id else null end) valid_follow_cnt\\nfrom follow f\\nleft join etl_dwd.ng_okcard_debit_bill_slice b on f.bill_id \u003d b.id --and b.dt \u003d current_date\\nleft join water w on f.bill_id\u003dw.bill_id and w.dt \u003d b.dt-1\\ngroup by 1,2,3,4\\n)\\n\\nselect a.*\\n,0 paid_interest\\n,\u00271\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,\u0027okc_follow\u0027 stat_type\\nfrom follower_repay a\\nunion all\\nselect a.*\\n,0 avg_follow_cnt\\n,0 valid_follow_cnt\\n,0 paid_interest\\n,\u00271\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,\u0027okc_unfollow\u0027 stat_type\\nfrom unflollow_repay a;\\n\\n------------------------------------------------------------------------------------------------------------------------------\\n---有锁PT触发情况\\n------------------------------------------------------------------------------------------------------------------------------\\n--\\t触发手机锁：\\n--水印watermark_lock\\n--外呼call_lock\\n--弹窗popup_lock\\n--短信sms_lock\\n--白名单whitelist_lock\\n--黑名单whitelist_lock\\n--呼入call_in_lock\\n--未触发\\n--------------------------------------------------------------------------------------------------------------\\n\\ndelete from tb_bidata.dws_okcard_case_trigger where dt \u003d current_date;\\n\\ninsert into tb_bidata.dws_okcard_case_trigger\\n\\nwith triggers as (\\n-- 会存在调用出现重复的情况\\nselect * from (select create_time,mobile_status,device_tag,watermark_lock\\n,call_lock,auto_popup_lock,sms_lock,app_whitelist_lock,app_blacklist_lock,call_in_lock\\n,row_number() over(partition by device_tag order by create_time desc) rn\\nfrom report_mysql_ng.t_paytrigger_device_status_daily ) p where p.rn \u003d1\\n)\\n,tmp as (\\nselect create_time,mobile_status,device_tag,\u0027watermark_lock\u0027   trigger_type,watermark_lock  trigger_result from triggers\\nunion all\\nselect create_time,mobile_status,device_tag,\u0027call_lock\u0027   trigger_type,call_lock  trigger_result from triggers\\nunion all\\nselect create_time,mobile_status,device_tag,\u0027auto_popup_lock\u0027   trigger_type,auto_popup_lock  trigger_result from triggers\\nunion all\\nselect create_time,mobile_status,device_tag,\u0027sms_lock\u0027   trigger_type,sms_lock  trigger_result from triggers\\nunion all\\nselect create_time,mobile_status,device_tag,\u0027app_whitelist_lock\u0027   trigger_type,app_whitelist_lock  trigger_result from triggers\\nunion all\\nselect create_time,mobile_status,device_tag,\u0027call_in_lock\u0027   trigger_type,call_in_lock  trigger_result from triggers\\nunion all\\nselect create_time,mobile_status,device_tag,\u0027app_blacklist_lock\u0027   trigger_type,app_blacklist_lock  trigger_result from triggers\\n)\\n\\n,member_device as (\\nselect * from (select a.*\\n,row_number() over(partition by devicetag order by createtime desc) rn\\nfrom report_mongo.ng_member_device a ) p where p.rn\u003d1\\n)\\n\\n,--每天每个账单的还款情况\\nwater as (\\nselect a.repay_date dt\\n,a.bill_id\\n,sum(a.principal_amt) principal_amt\\n,sum(a.penalty_amt) penalty_amt\\n,sum(a.interest_amt) interest_amt\\n,sum(a.extent_amt) extent_amt\\n,sum(a.installment_amt) installment_amt\\n,sum(a.overpayment_amt) overpayment_amt\\n,sum(a.amount) amount\\nfrom etl_dwb.ng_okcard_repay_water a group by 1,2)\\n\\nselect d.dt\\n,d.bill_date\\n,a.trigger_type\\n,datediff(day,d.repayment_date,d.dt) dpd_level\\n,count(distinct d.id) trigged_case_cnt --触发案件数\\n,count(distinct case when a.trigger_result\u003d\u0027true\u0027 then d.id else null end) exe_case_cnt --执行案件数\\n,sum(d.used_amount)/100.0 used_amount --应还本金\\n,sum(d.unpaid_principal)/100.0 unpaid_principal --逾期金额\\n,sum(d.paid_principal)/100.0 paid_principal --已还本金\\n,sum(d.paid_penalty)/100.0 paid_penalty --已还罚息\\n,sum(w.amount)/100.0 yesterday_repay_amt --昨日回收金额\\n,\u00271\u0027 time_type\\n,\u0027NG\u0027 country_code\\nfrom tmp a left join member_device b on a.device_tag\u003db.devicetag\\ninner join etl_dwd.ng_okcard_account ac on b.memberid \u003d ac.cid and ac.account_status\u003c\u003e5\\ninner join etl_dwd.ng_okcard_debit_bill_slice d on ac.card_no\u003dd.card_no\\ninner join water w on d.id \u003d w.bill_id and w.dt \u003d d.dt - 1\\nwhere d.bill_date\u003c\u003dcurrent_date and d.dt \u003d current_date group by 1,2,3,4;\\n\\n------------------------------------------------------------------------------------------------------------------------\\n--当前PT执行情况\\n------------------------------------------------------------------------------------------------------------------------\\n--账单日，总订单量、曾经逾期人数、当前逾期人数 （除了前三列，其余统计均为所有当前逾期客户，取手机锁最新的状态即可）\\n--客户端实际状态为锁的数量(lockState\u003d4000数量)\\n--服务端当前下发状态 server_state\u003d4000数量\\n--手机状态为锁状态数量 mobile_status\u003d1000\\n--服务端下发 的锁定状态数量 server_lock_status\u003d1000\\n--水印锁数量watermark_lock\\n--外呼锁数量call_lock\\n--弹窗锁数量popup_lock\\n--短信锁数量sms_lock\\n--白名单锁数量whitelist_lock\\n--黑名单锁数量whitelist_lock\\n--呼入锁数量call_in_lock\\n--\\ndelete from  tb_bidata.dws_okcard_case_trigger_exe;\\n\\ninsert into  tb_bidata.dws_okcard_case_trigger_exe\\n\\nwith triggers as (\\n-- 会存在调用出现重复的情况\\nselect * from (select  a.*,row_number() over(partition by device_tag order by create_time desc) rn\\nfrom report_mysql_ng.t_paytrigger_device_status_daily a) p where p.rn \u003d1)\\n\\n,member_device as (\\nselect * from (select a.*\\n,row_number() over(partition by devicetag order by createtime desc) rn\\nfrom report_mongo.ng_member_device a ) p where p.rn\u003d1\\n)\\n\\nselect d.bill_date\\n,count(distinct d.id) total_bills  --总订单量\\n,count(distinct ever_d.id) ever_overdue_user--曾经逾期人数\\n,count(distinct case when d.stauts\u003d2 then d.id else null end) current_overdue_user--当前逾期人数\\n,\\nsum(case when a.lock_state\u003d4000 then 1 else 0 end) lockstate_4000_cnt,\\nsum(case when a.server_state\u003d4000 then 1 else 0 end) server_state_4000_cnt,\\nsum(case when a.mobile_status\u003d1000 then 1 else 0 end) mobile_status_1000_cnt,\\nsum(case when a.server_lock_status\u003d1000 then 1 else 0 end) server_lock_status_1000_cnt,\\n\\nsum(case when a.watermark_lock\u003d\u0027true\u0027 then 1 else 0 end) watermark_lock_true_cnt,\\nsum(case when a.call_lock\u003d\u0027true\u0027 then 1 else 0 end) call_lock_true_cnt,\\nsum(case when a.auto_popup_lock\u003d\u0027true\u0027 then 1 else 0 end) auto_popup_lock_true_cnt,\\nsum(case when a.sms_lock\u003d\u0027true\u0027 then 1 else 0 end) sms_lock_true_cnt,\\nsum(case when a.app_whitelist_lock\u003d\u0027true\u0027 then 1 else 0 end) app_whitelist_lock_true_cnt,\\nsum(case when a.app_blacklist_lock\u003d\u0027true\u0027 then 1 else 0 end) app_blacklist_lock_true_cnt,\\nsum(case when a.call_in_lock\u003d\u0027true\u0027 then 1 else 0 end) call_in_lock_true_cnt\\n\\n,\u00271\u0027 time_type\\n,\u0027NG\u0027 country_code\\n\\nfrom triggers a left join member_device b on a.device_tag\u003db.devicetag\\ninner join etl_dwd.ng_okcard_account ac on b.memberid \u003d ac.cid --and ac.account_status\u003c\u003e5\\ninner join etl_dwd.ng_okcard_debit_bill_slice d on ac.card_no\u003dd.card_no and d.dt \u003d current_date\\ninner join etl_dwd.ng_okcard_debit_bill_slice ever_d on ac.card_no\u003dever_d.card_no and ever_d.dt \u003d ever_d.repayment_date+1 and ever_d.stauts\u003d2\\nwhere d.bill_date\u003c\u003dcurrent_date group by 1 ;\\n\\n\",\"preStatements\":[],\"sqlType\":\"1\",\"receivers\":\"\",\"datasource\":3,\"showType\":\"TABLE\",\"localParams\":[],\"datasourceName\":\"mysql_conn\"},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":1,\"taskInstancePriority\":\"MEDIUM\",\"name\":\"dws_okcard_credit_manage\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"dws_okcard_repay\"],\"id\":\"tasks-20232\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SQL\",\"params\":{\"postStatements\":[],\"connParams\":\"\",\"receiversCc\":\"\",\"udfs\":\"\",\"type\":\"POSTGRESQL\",\"title\":\"\",\"sql\":\"---20220121 需求方 陈樱樱，陈章敏\\n--新增OKC注册来源\\n\\ndelete from tb_bidata.dws_user_register_channel where dt \u003e\u003d current_date-3;\\n\\ninsert into tb_bidata.dws_user_register_channel\\nwith applys as (\\nselect * from etl_dwd.ng_okcard_apply_log where create_time\u003ecurrent_date-7)\\n\\nselect date(register_time) dt\\n,case when a.first_channel\u003d\u0027MGM-activities\u0027 and a.second_channel\u003d\u0027ReferEarn\u0027 then  \u0027ReferEarn\u0027\\nwhen a.first_channel\u003d\u0027MGM-activities\u0027 and a.second_channel\u003d\u0027Cash Spree\u0027 then  \u0027cash_spree\u0027\\nwhen a.first_channel\u003d\u0027MGM-activities\u0027 and a.second_channel\u003d\u0027AwoofMoni\u0027 then \u0027AwoofMoni\u0027\\nwhen a.first_channel\u003d\u0027MGM-activities\u0027 and a.second_channel\u003d\u0027Invitation code\u0027 then  \u0027Invitation_code\u0027\\nwhen a.first_channel\u003d\u0027Natural\u0027 then \u0027自然流量\u0027\\nwhen a.first_channel\u003d\u0027Platform Cooperator\u0027 then \u0027平台合作类\u0027\\nwhen a.first_channel\u003d\u0027Online Merchant\u0027 then \u0027线上商户推广\u0027\\nwhen a.first_channel\u003d\u0027Ads Campaign\u0027  then \u0027广告投放\u0027\\nwhen a.first_channel\u003d\u0027Silent\u0027  then \u0027金融静默用户\u0027\\nwhen a.first_channel\u003d\u0027Online Palmpay\u0027 then \u0027端内场景拉新\u0027\\nwhen a.first_channel\u003d\u0027Pre_install\u0027 then \u0027外部平台预安装类\u0027\\nwhen a.first_channel\u003d\u0027BTL\u0027 then \u0027线下推广\u0027\\nwhen a.first_channel\u003d\u0027MobileWallet\u0027 then \u0027MobileWallet\u0027\\nwhen a.first_channel\u003d\u0027QRcard\u0027 then \u0027QRcard\u0027\\nwhen a.first_channel\u003d\u0027partner\u0027 then \u0027partner\u0027\\nwhen a.first_channel\u003d\u0027Other\u0027 or a.first_channel is null then \u0027Other\u0027 end as regist_type\\n,count(distinct a.member_id) register_user\\n,count(distinct case when b.phone_lock_flag\u003d0 then b.member_id else null end) okc_target_user --目标用户有锁用户\\n,count(distinct case when b.phone_lock_flag\u003d1 then b.member_id else null end) okc_notlock_user --目标用户无锁用户\\n,1.0*okc_target_user/nullif(register_user,0) target_ratio\\n,count(distinct case when date(ap.create_time)\u003ddate(a.register_time) then ap.member_id else null end ) regist_apply_user --当日申请OKC用户\\n,count(distinct case when b.member_id is not null and date(ap.create_time)\u003ddate(a.register_time) then ap.member_id else null end ) target_regist_apply_user--目标用户-\u003e当日申请OKC用户\\n,count(distinct case when b.member_id is not null then c.cid else null end) target_credit_user\\n,count(distinct case when date(c.create_time)\u003ddate(a.register_time) then c.cid else null end) target_credit_user_day --当日授信成功人数\\n,1.0*target_credit_user/nullif(okc_target_user,0) target_credit_ratio\\n\\n--每日注册有锁且授信用户\\n--每日注册无锁且授信用户\\n,count(distinct case when b.phone_lock_flag\u003d0 and date(c.create_time)\u003ddate(a.register_time) then c.cid else null end) lock_credit_user_day --每日注册有锁且授信用户\\n,count(distinct case when b.phone_lock_flag\u003d1 and date(c.create_time)\u003ddate(a.register_time) then c.cid else null end) not_lock_credit_user_day --每日注册无锁且授信用户\\n\\nfrom etl_dwm.ng_member_tags_detail a\\nleft join etl_dwd.ng_okcard_target_user  b on a.member_id\u003db.member_id\\nleft join applys ap on a.member_id\u003dap.member_id --and ap.apply_status\u003d1\\nleft join etl_dwd.ng_okcard_account c on a.member_id\u003dc.cid and c.account_status\u003c\u003e5\\nwhere a.register_time \u003e\u003d current_date - 3 group by 1,2;\\n\\n\\n--------------------------------------------------------------------------------------------------------------------\\n-- 20220402：目标用户（有锁+非锁白名单），申请、授信、交易、入金 start\\n--------------------------------------------------------------------------------------------------------------------\\n\\ndelete from tb_bidata.dws_okcard_user_ap_crdit;\\n\\ninsert into tb_bidata.dws_okcard_user_ap_crdit\\n\\nwith tmp as (\\nselect a.create_time,a.member_id,ob.member_id ob_member_id,ap.member_id ap_member_id,c.payer_member_id,c.trans_type,ac.cid\\n,case when ob.phone_lock_flag is not null then ob.phone_lock_flag else \u0027未标记\u0027 end phone_lock_flag\\n,c.update_time c_update_time,ap.create_time ap_update_time,ac.create_time ac_update_time\\nfrom etl_dwd.ng_member a\\nleft join etl_dwd.ng_okcard_target_user ob on a.member_id \u003d ob.member_id --目标用户（有锁+非锁白名单）  --added on 20220402\\nleft join etl_dwb.ng_pay_flow_palmpay c on  a.member_id \u003d c.payer_member_id\\nleft join etl_dwd.ng_okcard_apply_log ap on  a.member_id\u003dap.member_id\\nleft join etl_dwd.ng_okcard_account ac on  a.member_id\u003dac.cid\\nwhere a.create_time \u003e\u003d\u00272021-07-01\u0027\\n)\\n\\nselect date(a.create_time) dt\\n,count(distinct a.member_id) pp_register_user\\n,count(distinct a.ob_member_id) ob_user --目标用户数 (目标用户数)\\n,count(distinct case when date(a.create_time)\u003ddate(a.c_update_time) then a.payer_member_id else null end ) pp_trans_user --当日有端内交易 人数\\n,count(distinct case when a.trans_type\u003d\u002701\u0027 and date(a.create_time)\u003ddate(a.c_update_time) then a.payer_member_id else null end ) pp_fund_user --当日入金 人数\\n,count(distinct case when date(a.create_time)\u003ddate(a.ap_update_time) then a.ap_member_id else null end) apply_user --当日申请OKC\\n,count(distinct case when date(a.create_time)\u003ddate(a.ac_update_time) then a.cid else null end) credit_user --当日授信成功\\n,\u00271\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,a.phone_lock_flag\\nfrom tmp a group by 1,10\\nunion all\\n\\nselect dateadd(day,-7,next_day(a.create_time,\u0027Su\u0027)) dt\\n,count(distinct a.member_id) pp_register_user\\n,count(distinct a.ob_member_id) ob_user --目标用户数 (目标用户数)\\n,count(distinct case when dateadd(day,-7,next_day(a.create_time,\u0027Su\u0027))\u003ddateadd(day,-7,next_day(a.c_update_time,\u0027Su\u0027)) then a.payer_member_id else null end ) pp_trans_user --当日有端内交易 人数\\n,count(distinct case when a.trans_type\u003d\u002701\u0027 and dateadd(day,-7,next_day(a.create_time,\u0027Su\u0027))\u003ddateadd(day,-7,next_day(a.c_update_time,\u0027Su\u0027)) then a.payer_member_id else null end ) pp_fund_user --当日入金 人数\\n,count(distinct case when dateadd(day,-7,next_day(a.create_time,\u0027Su\u0027))\u003ddateadd(day,-7,next_day(a.ap_update_time,\u0027Su\u0027)) then a.ap_member_id else null end) apply_user --当日申请OKC\\n,count(distinct case when dateadd(day,-7,next_day(a.create_time,\u0027Su\u0027))\u003ddateadd(day,-7,next_day(a.ac_update_time,\u0027Su\u0027)) then a.cid else null end) credit_user --当日授信成功\\n,\u00272\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,a.phone_lock_flag\\nfrom tmp a group by 1,10\\n\\nunion all\\nselect last_day(a.create_time) dt\\n,count(distinct a.member_id) pp_register_user\\n,count(distinct a.ob_member_id) ob_user --目标用户数 (目标用户数)\\n,count(distinct case when last_day(a.create_time)\u003dlast_day(a.c_update_time) then a.payer_member_id else null end ) pp_trans_user --当日有端内交易 人数\\n,count(distinct case when a.trans_type\u003d\u002701\u0027 and last_day(a.create_time)\u003dlast_day(a.c_update_time) then a.payer_member_id else null end ) pp_fund_user --当日入金 人数\\n,count(distinct case when last_day(a.create_time)\u003dlast_day(a.ap_update_time) then a.ap_member_id else null end) apply_user --当日申请OKC\\n,count(distinct case when last_day(a.create_time)\u003dlast_day(a.ac_update_time) then a.cid else null end) credit_user --当日授信成功\\n,\u00273\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,a.phone_lock_flag\\nfrom tmp a group by 1,10\\n\\nunion all\\nselect date(concat(to_char(a.create_time, \u0027YYYY\u0027),\u0027-01-01\u0027)) dt\\n,count(distinct a.member_id) pp_register_user\\n,count(distinct a.ob_member_id) ob_user --目标用户数 (目标用户数)\\n,count(distinct case when date(concat(to_char(a.create_time, \u0027YYYY\u0027),\u0027-01-01\u0027))\u003ddate(concat(to_char(a.c_update_time, \u0027YYYY\u0027),\u0027-01-01\u0027)) then a.payer_member_id else null end ) pp_trans_user --当日有端内交易 人数\\n,count(distinct case when a.trans_type\u003d\u002701\u0027 and date(concat(to_char(a.create_time, \u0027YYYY\u0027),\u0027-01-01\u0027))\u003dlast_day(a.c_update_time) then a.payer_member_id else null end ) pp_fund_user --当日入金 人数\\n,count(distinct case when date(concat(to_char(a.create_time, \u0027YYYY\u0027),\u0027-01-01\u0027))\u003ddate(concat(to_char(a.ap_update_time, \u0027YYYY\u0027),\u0027-01-01\u0027)) then a.ap_member_id else null end) apply_user --当日申请OKC\\n,count(distinct case when date(concat(to_char(a.create_time, \u0027YYYY\u0027),\u0027-01-01\u0027))\u003ddate(concat(to_char(a.ac_update_time, \u0027YYYY\u0027),\u0027-01-01\u0027)) then a.cid else null end) credit_user --当日授信成功\\n,\u00275\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,a.phone_lock_flag\\nfrom tmp a group by 1,10;\\n\\n--------------------------------------------------------------------------------------------------------------------\\n-- 20220402：目标用户（有锁+非锁白名单），申请、授信、交易、入金 end\\n--------------------------------------------------------------------------------------------------------------------\\n\\n\\n\",\"preStatements\":[],\"sqlType\":\"1\",\"receivers\":\"\",\"datasource\":3,\"showType\":\"TABLE\",\"localParams\":[],\"datasourceName\":\"mysql_conn\"},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":1,\"taskInstancePriority\":\"MEDIUM\",\"name\":\"dws_okcard_user_register\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"dws_okcard_user\"],\"id\":\"tasks-19350\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SQL\",\"params\":{\"postStatements\":[],\"connParams\":\"\",\"receiversCc\":\"\",\"udfs\":\"\",\"type\":\"POSTGRESQL\",\"title\":\"\",\"sql\":\"\\n----------------------------------------------------------------------------------------------------------------------\\n--需求：还款 repayment data ~~ start\\n----------------------------------------------------------------------------------------------------------------------\\ndelete from tb_bidata.dws_okcard_repay_detail;\\n\\ninsert into tb_bidata.dws_okcard_repay_detail\\n--balance_type：0：信用账户，1：溢缴款账户\\nwith tmp as ( select * from etl_dwb.ng_okcard_repay_method )\\n\\n,tmp_water as (\\nselect a.bill_id,a.pay_id\\n,sum(a.principal_amt) principal_amt\\n,sum(a.penalty_amt) penalty_amt\\n,sum(a.interest_amt) interest_amt\\n,sum(a.extent_amt) extent_amt\\n,sum(a.installment_amt) installment_amt\\n,sum(a.overpayment_amt) overpayment_amt\\n,sum(a.amount) amount\\nfrom etl_dwb.ng_okcard_repay_water a group by 1,2 )\\n\\n,tmp_close as (select * from etl_dwd.ng_okcard_debit_bill_slice where dt \u003d current_date --and stauts \u003d 3 --需要用到所有的bill_id以取bill_date\\n)\\n\\nselect date(t1.repay_date) repay_date\\n,t2.bill_date\\n,t1.repay_method\\n,t1.payer_account_type\\n,sum(t1.business_amount)/100.0 repay_tot_amt --还款总金额  --BI还款金额，财务在使用\\n,sum(t.principal_amt)/100.0 principal_amt --还款本金 --BI还款金额，财务在使用\\n,sum(t.penalty_amt)/100.0 penalty_amt --还款罚息 --BI还款金额，财务在使用\\n,sum(t.extent_amt)/100.0 extent_amt\\n,sum(t.installment_amt)/100.0 installment_amt\\n,sum(t.overpayment_amt)/100.0 overpayment_amt --溢缴款\\n,count(distinct t1.payer_member_id) repay_user --还款人数\\n,count(distinct case when t.amount\u003e0 and t2.stauts\u003d3 then t2.card_no end) close_user --结清人数--count(distinct t2.card_no)\\n,count(distinct t.pay_id) repay_cnt\\n,\u00271\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\nfrom tmp_water t\\ninner join tmp t1 on t.pay_id \u003d t1.order_pay_id\\nleft join tmp_close t2 on t.bill_id \u003d t2.id\\ngroup by 1,2,3,4,t1.phone_lock_flag\\n\\nunion all\\nselect dateadd(day,-7,next_day(t1.repay_date,\u0027Su\u0027)) repay_date\\n,t2.bill_date\\n,t1.repay_method\\n,t1.payer_account_type\\n,sum(t1.business_amount)/100.0 repay_tot_amt --还款总金额\\n,sum(t.principal_amt)/100.0 principal_amt --还款本金\\n,sum(t.penalty_amt)/100.0 penalty_amt --还款罚息\\n,sum(t.extent_amt)/100.0 extent_amt\\n,sum(t.installment_amt)/100.0 installment_amt\\n,sum(t.overpayment_amt)/100.0 overpayment_amt --溢缴款\\n,count(distinct t1.payer_member_id) repay_user --还款人数\\n,count(distinct case when t.amount\u003e0 and t2.stauts\u003d3 then t2.card_no end)  close_user --结清人数--count(distinct t2.card_no)\\n,count(distinct t.pay_id) repay_cnt\\n,\u00272\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\nfrom tmp_water t\\ninner join tmp t1 on t.pay_id \u003d t1.order_pay_id\\nleft join tmp_close t2 on t.bill_id \u003d t2.id\\ngroup by 1,2,3,4,t1.phone_lock_flag\\n\\nunion all\\nselect last_day(t1.repay_date) repay_date\\n,t2.bill_date\\n,t1.repay_method\\n,t1.payer_account_type\\n,sum(t1.business_amount)/100.0 repay_tot_amt --还款总金额\\n,sum(t.principal_amt)/100.0 principal_amt --还款本金\\n,sum(t.penalty_amt)/100.0 penalty_amt --还款罚息\\n,sum(t.extent_amt)/100.0 extent_amt\\n,sum(t.installment_amt)/100.0 installment_amt\\n,sum(t.overpayment_amt)/100.0 overpayment_amt --溢缴款\\n,count(distinct t1.payer_member_id) repay_user --还款人数\\n,count(distinct case when t.amount\u003e0 and t2.stauts\u003d3 then t2.card_no end)  close_user --结清人数--count(distinct t2.card_no)\\n,count(distinct t.pay_id) repay_cnt\\n,\u00273\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\nfrom tmp_water t\\ninner join tmp t1 on t.pay_id \u003d t1.order_pay_id\\nleft join tmp_close t2 on t.bill_id \u003d t2.id\\ngroup by 1,2,3,4,t1.phone_lock_flag\\n\\n----------------------------------------------------------------------------------------------------------------------\\n--added on 20211221 新增还款总人数，不区分 主动还款 和 代扣\\nunion all\\nselect date(t1.repay_date) repay_date\\n,t2.bill_date\\n,null repay_method\\n,-99 payer_account_type\\n,sum(t1.business_amount)/100.0 repay_tot_amt --还款总金额\\n,sum(t.principal_amt)/100.0 principal_amt --还款本金\\n,sum(t.penalty_amt)/100.0 penalty_amt --还款罚息\\n,sum(t.extent_amt)/100.0 extent_amt\\n,sum(t.installment_amt)/100.0 installment_amt\\n,sum(t.overpayment_amt)/100.0 overpayment_amt --溢缴款\\n,count(distinct t1.payer_member_id) repay_user --还款人数\\n,count(distinct case when t.amount\u003e0 and t2.stauts\u003d3 then t2.card_no end) close_user --结清人数--count(distinct t2.card_no)\\n,count(distinct t.pay_id) repay_cnt\\n,\u00271-1\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,null phone_lock_flag\\nfrom tmp_water t\\ninner join tmp t1 on t.pay_id \u003d t1.order_pay_id\\nleft join tmp_close t2 on t.bill_id \u003d t2.id\\ngroup by 1,2,3,4\\n\\nunion all\\nselect dateadd(day,-7,next_day(t1.repay_date,\u0027Su\u0027)) repay_date\\n,t2.bill_date\\n,null repay_method\\n,-99 payer_account_type\\n,sum(t1.business_amount)/100.0 repay_tot_amt --还款总金额\\n,sum(t.principal_amt)/100.0 principal_amt --还款本金\\n,sum(t.penalty_amt)/100.0 penalty_amt --还款罚息\\n,sum(t.extent_amt)/100.0 extent_amt\\n,sum(t.installment_amt)/100.0 installment_amt\\n,sum(t.overpayment_amt)/100.0 overpayment_amt --溢缴款\\n,count(distinct t1.payer_member_id) repay_user --还款人数\\n,count(distinct case when t.amount\u003e0 and t2.stauts\u003d3 then t2.card_no end) close_user --结清人数--count(distinct t2.card_no)\\n,count(distinct t.pay_id) repay_cnt\\n,\u00271-2\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,null phone_lock_flag\\nfrom tmp_water t\\ninner join tmp t1 on t.pay_id \u003d t1.order_pay_id\\nleft join tmp_close t2 on t.bill_id \u003d t2.id\\ngroup by 1,2,3,4\\n\\nunion all\\nselect last_day(t1.repay_date) repay_date\\n,t2.bill_date\\n,null repay_method\\n,-99 payer_account_type\\n,sum(t1.business_amount)/100.0 repay_tot_amt --还款总金额\\n,sum(t.principal_amt)/100.0 principal_amt --还款本金\\n,sum(t.penalty_amt)/100.0 penalty_amt --还款罚息\\n,sum(t.extent_amt)/100.0 extent_amt\\n,sum(t.installment_amt)/100.0 installment_amt\\n,sum(t.overpayment_amt)/100.0 overpayment_amt --溢缴款\\n,count(distinct t1.payer_member_id) repay_user --还款人数\\n,count(distinct case when t.amount\u003e0 and t2.stauts\u003d3 then t2.card_no end) close_user --结清人数--count(distinct t2.card_no)\\n,count(distinct t.pay_id) repay_cnt\\n,\u00271-3\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,null phone_lock_flag\\nfrom tmp_water t\\ninner join tmp t1 on t.pay_id \u003d t1.order_pay_id\\nleft join tmp_close t2 on t.bill_id \u003d t2.id\\ngroup by 1,2,3,4;\\n\\n---------------------------------------------------------------------------------------------------------\\n---20220309：只区分 主动还款 和 自动代扣\\n---------------------------------------------------------------------------------------------------------\\ninsert into tb_bidata.dws_okcard_repay_detail\\nwith tmp as ( select * from etl_dwb.ng_okcard_repay_method )\\n\\n,tmp_water as (\\nselect a.bill_id,a.pay_id\\n,sum(a.principal_amt) principal_amt\\n,sum(a.penalty_amt) penalty_amt\\n,sum(a.interest_amt) interest_amt\\n,sum(a.extent_amt) extent_amt\\n,sum(a.installment_amt) installment_amt\\n,sum(a.overpayment_amt) overpayment_amt\\n,sum(a.amount) amount\\nfrom etl_dwb.ng_okcard_repay_water a group by 1,2 )\\n\\n,tmp_close as (select * from etl_dwd.ng_okcard_debit_bill_slice where dt \u003d current_date --and stauts \u003d 3 --需要用到所有的bill_id以取bill_date\\n)\\n\\nselect date(t1.repay_date) repay_date\\n,date(\u00271919-01-01\u0027) bill_date\\n,t1.repay_method\\n,-9 payer_account_type\\n,sum(t1.business_amount)/100.0 repay_tot_amt --还款总金额\\n,sum(t.principal_amt)/100.0 principal_amt --还款本金\\n,sum(t.penalty_amt)/100.0 penalty_amt --还款罚息\\n,sum(t.extent_amt)/100.0 extent_amt\\n,sum(t.installment_amt)/100.0 installment_amt\\n,sum(t.overpayment_amt)/100.0 overpayment_amt --溢缴款\\n,count(distinct t1.payer_member_id) repay_user --还款人数\\n,count(distinct case when t.amount\u003e0 and t2.stauts\u003d3  then t2.card_no end) close_user --结清人数--count(distinct t2.card_no)\\n,count(distinct t.pay_id) repay_cnt\\n,\u00271_1\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,-9 phone_lock_flag\\nfrom tmp_water t\\ninner join tmp t1 on t.pay_id \u003d t1.order_pay_id\\nleft join tmp_close t2 on t.bill_id \u003d t2.id\\ngroup by 1,2,3,4\\n\\nunion all\\nselect dateadd(day,-7,next_day(t1.repay_date,\u0027Su\u0027)) repay_date\\n,date(\u00271919-01-01\u0027) bill_date\\n,t1.repay_method\\n,-9 payer_account_type\\n,sum(t1.business_amount)/100.0 repay_tot_amt --还款总金额\\n,sum(t.principal_amt)/100.0 principal_amt --还款本金\\n,sum(t.penalty_amt)/100.0 penalty_amt --还款罚息\\n,sum(t.extent_amt)/100.0 extent_amt\\n,sum(t.installment_amt)/100.0 installment_amt\\n,sum(t.overpayment_amt)/100.0 overpayment_amt --溢缴款\\n,count(distinct t1.payer_member_id) repay_user --还款人数\\n,count(distinct case when t.amount\u003e0 and t2.stauts\u003d3  then t2.card_no end) close_user --结清人数--count(distinct t2.card_no)\\n,count(distinct t.pay_id) repay_cnt\\n,\u00271_2\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,-9 phone_lock_flag\\nfrom tmp_water t\\ninner join tmp t1 on t.pay_id \u003d t1.order_pay_id\\nleft join tmp_close t2 on t.bill_id \u003d t2.id\\ngroup by 1,2,3,4\\n\\nunion all\\nselect last_day(t1.repay_date) repay_date\\n,date(\u00271919-01-01\u0027) bill_date\\n,t1.repay_method\\n,-9 payer_account_type\\n,sum(t1.business_amount)/100.0 repay_tot_amt --还款总金额\\n,sum(t.principal_amt)/100.0 principal_amt --还款本金\\n,sum(t.penalty_amt)/100.0 penalty_amt --还款罚息\\n,sum(t.extent_amt)/100.0 extent_amt\\n,sum(t.installment_amt)/100.0 installment_amt\\n,sum(t.overpayment_amt)/100.0 overpayment_amt --溢缴款\\n,count(distinct t1.payer_member_id) repay_user --还款人数\\n,count(distinct case when t.amount\u003e0 and t2.stauts\u003d3  then t2.card_no end) close_user --结清人数--count(distinct t2.card_no)\\n,count(distinct t.pay_id) repay_cnt\\n,\u00271_3\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,-9 phone_lock_flag\\nfrom tmp_water t\\ninner join tmp t1 on t.pay_id \u003d t1.order_pay_id\\nleft join tmp_close t2 on t.bill_id \u003d t2.id\\ngroup by 1,2,3,4 ;\\n----------------------------------------------------------------------------------------------------------------------\\n--需求：还款 repayment data ~~ end\\n----------------------------------------------------------------------------------------------------------------------\\n\\n\\n\",\"preStatements\":[],\"sqlType\":\"1\",\"receivers\":\"\",\"datasource\":3,\"showType\":\"TABLE\",\"localParams\":[],\"datasourceName\":\"mysql_conn\"},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":1,\"taskInstancePriority\":\"HIGHEST\",\"name\":\"dws_okcard_repay\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"dws_okcard_overdue_dpd\"],\"id\":\"tasks-3360\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SQL\",\"params\":{\"postStatements\":[],\"connParams\":\"\",\"receiversCc\":\"\",\"udfs\":\"\",\"type\":\"POSTGRESQL\",\"title\":\"\",\"sql\":\"----------------------------------------------------------------------------------------------------------------------\\n--20210907 \\n--account_status：0 valid（有效）,1 overdue（逾期）,2 invalid,3 not_bind_card,4 frozen（冻结）,5 disable（禁用）\\ndelete from tb_bidata.dws_okcard_account_info where report_date \u003d dateadd(day,-1,current_date);\\n\\ninsert into tb_bidata.dws_okcard_account_info\\n\\nselect dateadd(day,-1,t1.dt) report_date\\n,t1.account_status\\n,count(distinct t1.card_no) user_cnt\\n,sum(t1.credit_quota)/100  credit_quota --当前授信额度\\n,sum(t1.available_balance)/100 available_balance --当前可用余额\\n,sum(t1.overpayment_balance)/100 overpayment_balance --当前溢缴款余额\\n,\u00271\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,p.phone_lock_flag\\nfrom tb_bidata.t_credit_card_account_slice t1\\ninner join etl_dwd.ng_okcard_account p on t1.card_no \u003d p.card_no\\nwhere t1.account_type\u003d6 and t1.dt\u003dcurrent_date\\ngroup by 1,2,p.phone_lock_flag;\\n\\n----------------------------------------------------------------------------------------------------------------------\\n---20220101\\n----------------------------------------------------------------------------------------------------------------------\\n-- 1.2 ---当天，最近1天，7天，30天 授信额度 分布\\ndelete from tb_bidata.dws_okcard_credit_amt_dist where report_date \u003d dateadd(day,-1,current_date);\\n\\ninsert into tb_bidata.dws_okcard_credit_amt_dist\\n\\nwith credit_data as (select t1.create_time dt,t1.card_no,t1.cid\\n,t1.credit_limit_postpay\\n,t1.phone_lock_flag\\n,case when t1.credit_limit_postpay \u003c\u003d100000 then \u00270-1000\u0027\\n\\t  when t1.credit_limit_postpay \u003c\u003d200000 then \u00271000-2000\u0027\\n\\t  when t1.credit_limit_postpay \u003c\u003d300000 then \u00272000-3000\u0027\\n\\t  when t1.credit_limit_postpay \u003c\u003d400000 then \u00273000-4000\u0027\\n\\t  when t1.credit_limit_postpay \u003c\u003d500000 then \u00274000-5000\u0027\\n\\t  when t1.credit_limit_postpay \u003c\u003d600000 then \u00275000-6000\u0027\\n\\t  else \u00276000+\u0027 end credit_type\\n,row_number() over(partition by t1.card_no order by t1.create_time) rn\\nfrom etl_dwd.ng_okcard_application t1\\nwhere t1.status\u003d2 and t1.cid not like \u0027%_del\u0027\\n)\\n\\nselect dateadd(day,-1,current_date) report_date\\n,\u002730d\u0027 stat_type\\n,t1.credit_type\\n,count(1)   users\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\nfrom credit_data t1\\nwhere t1.rn \u003d 1 and t1.dt between dateadd(day,-30,current_date) and current_date\\ngroup by 1,2,3,t1.phone_lock_flag\\nunion all\\nselect  dateadd(day,-1,current_date) report_date\\n, \u00277d\u0027 stat_type\\n,t1.credit_type\\n,count(1)   users\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\nfrom credit_data t1\\nwhere  t1.rn \u003d 1 and t1.dt between dateadd(day,-7,current_date) and current_date\\ngroup by 1,2,3,t1.phone_lock_flag\\nunion all\\nselect  dateadd(day,-1,current_date) report_date\\n, \u00271d\u0027 stat_type\\n,t1.credit_type\\n,count(1)   users\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\nfrom credit_data t1\\nwhere  t1.rn \u003d 1 and t1.dt between dateadd(day,-1,current_date) and current_date\\ngroup by 1,2,3,t1.phone_lock_flag\\nunion all\\nselect  dateadd(day,-1,current_date) report_date\\n, \u00270d\u0027 stat_type\\n,t1.credit_type\\n,count(1)   users\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\nfrom credit_data t1\\nwhere t1.rn \u003d 1 and  date(t1.dt) \u003d dateadd(day,-1,current_date)\\ngroup by 1,2,3,t1.phone_lock_flag ;\\n----------------------------------------------------------------------------------------------------------------------\\n----------------------------------------------------------------------------------------------------------------------\\n\\n\",\"preStatements\":[],\"sqlType\":\"1\",\"receivers\":\"\",\"datasource\":3,\"showType\":\"TABLE\",\"localParams\":[],\"datasourceName\":\"mysql_conn\"},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":\"0\",\"taskInstancePriority\":\"MEDIUM\",\"name\":\"dws_okcard_account_quota\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"dws_okcard_vintage\"],\"id\":\"tasks-58143\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SQL\",\"params\":{\"postStatements\":[],\"connParams\":\"\",\"receiversCc\":\"\",\"udfs\":\"\",\"type\":\"POSTGRESQL\",\"title\":\"\",\"sql\":\"--20210818\\n--\\n----------------------------------------------------------------------------------------------------------------------\\n--需求：逾期率 overdue data 以及 资金 funding data  ~~ start\\n----------------------------------------------------------------------------------------------------------------------\\ndelete from tb_bidata.dws_okcard_overdue_dpd where report_date \u003d dateadd(day,-1,current_date);\\n\\ninsert into tb_bidata.dws_okcard_overdue_dpd\\nwith tmp_first as (\\nselect a.*,row_number() over(partition by a.card_no order by bill_date) rn\\nfrom etl_dwd.ng_okcard_debit_bill_slice a\\nwhere a.dt \u003d current_date and a.used_amount \u003e 0 )\\n\\n\\nselect dateadd(day,-1,t.dt) report_date --数据切片日期\\n,t.bill_date --- bi筛选逻辑：  dpd1: bill_date \u003d report_date -1 ；dpd2: bill_date \u003d report_date -2\\n,case when t1.card_no is not null and t1.bill_date is not null and t1.repayment_date \u003d\u00272021-10-01\u0027 then \u0027新用户_1001\u0027\\n      when t1.card_no is not null and t1.bill_date is not null then \u0027新用户\u0027\\n\\t  else \u0027老用户\u0027 end old_new_flag\\n,datediff(day,t.repayment_date,t.dt) dpd_level-- dpd_level \u003e 90 为 坏账金额\\n\\n,datediff(day,t.bill_date,t.dt) bill_days --回收天数：账单日距离当前\\n\\n----本金\\n,sum(t.used_amount)/100.0  used_amt--应还本金--放款本金\\n\\n,sum(t.paid_principal)/100.0 paid_principal_amt--已还本金\\n,sum(t.unpaid_principal)/100.0 unpaid_principal_amt--待还本金（逾期本金）\\n\\n----罚息\\n,sum(t.paid_penalty)/100.0 paid_penalty_amt--已还罚息\\n,sum(t.unpaid_penalty)/100.0 unpaid_penalty_amt--待还罚息\\n\\n-------------------------------------------------------------------------------------------------------------------------------\\n-- 人数：应还人数\\t已还清人数\\t逾期人数\\tDPD1\\tDPD2\\t。。。\\tDPD30\\tM1\\tM2\\tM3\\tM3+\\n--status:0 未欠款，1 未逾期待还，2 逾期待还，3 已还清 ***已出账单后还清的话，stauts \u003d 3（已还清），未出账单就还清的话，status \u003d 0（未欠款）\\n--------------------------------------------------------------------------------------------------------------------------------\\t\\t\\t\\t\\t\\t\\tDPD31~60\\tDPD61~90\\tDPD91~120\\tDPD121+\\n,sum(case when t.used_amount \u003e 0 then 1 else 0 end) outstanding_user--**应还人数（outstanding_amount：待还金额\u003d待还本金+待还利息+待还罚息）\\n,sum(case when t.stauts \u003d 3 then 1 else 0 end) closed_user -- 已还清人数  stauts \u003d 3（已还清）\\n,sum(case when t.stauts \u003d 2 or t.outstanding_amount\u003e0 then 1 else 0 end) overdue_user -- 逾期待还人数   stauts \u003d 2 逾期待还 --20211101 由逾期更新为逾期待还\\n\\n,count(*) dpd_user\\n\\n,\u0027NG\u0027 country_code\\n,t.phone_lock_flag\\n,mn.mobile_money_account_tier --added on 20220105 by grace, meirong demand\\n,ai.systemtype\\n\\n--20220613 grace\\n----展期\\n,sum(t.extension_service_fee)/100.0 paid_extension_service_amt\\n----线下分期\\n,sum(t.paid_installment_service_fee)/100.0 paid_installment_service_amt\\n,sum(t.unpaid_installment_service_fee)/100.0 unpaid_installment_service_amt\\n\\nfrom (select * from etl_dwd.ng_okcard_debit_bill_slice where dt \u003d current_date and used_amount\u003e0) t\\nleft join (select * from tmp_first where rn \u003d 1) t1 on t.card_no\u003dt1.card_no and t.bill_date\u003dt1.bill_date\\n\\nleft join etl_dwd.ng_okcard_account b on t.card_no\u003db.card_no\\nleft join etl_dwd.ng_member mn on b.cid \u003d mn.member_id\\nleft join etl_dwb.ng_credit_user_android_ios ai on b.cid\u003dai.member_id and ai.loan_product\u003d\u0027OKC\u0027\\n\\ngroup by 1,2,3,4,5,t.phone_lock_flag,mn.mobile_money_account_tier,ai.systemtype ;\\n\\n----------------------------------------------------------------------------------------------------------------------\\n--需求：逾期率 overdue data 以及 资金 funding data ~~ end\\n----------------------------------------------------------------------------------------------------------------------\\n\\n\\n---------------------------------------------------------------------------------\\n---------------------------------------------------------------------------------\\n-- okcard  bill 逾期\\ndelete from tb_bidata.dws_okcard_overdue;\\n\\ninsert into tb_bidata.dws_okcard_overdue\\n\\nwith tmp as (select bill_date\\n,datediff(day,repayment_date,current_date) day_diffs\\n,outstanding_amount\\n,stauts\\n,used_amount\\n,unpaid_principal\\n,unpaid_penalty\\n,phone_lock_flag\\nfrom etl_dwd.ng_okcard_debit_bill)--20210729更新为ods表\\n\\nselect last_day(dateadd(day,-1,t1.bill_date)) mon,\\nsum(t1.used_amount/100.0) as used_amt,\\nsum(t1.unpaid_principal/100.0) as unpaid_principal_amt,\\nsum(t1.unpaid_penalty/100.0) as unpaid_penalty_amt,\\nsum(case when t1.outstanding_amount\u003e0 and t1.stauts\u003d2\\nand t1.day_diffs BETWEEN 1 and 30 then t1.outstanding_amount end)/100.0 M1_unpaid_amt,\\nsum(case when t1.outstanding_amount\u003e0 and t1.stauts\u003d2\\nand t1.day_diffs BETWEEN 31 and 60 then t1.outstanding_amount end)/100.0 M2_unpaid_amt,\\nsum(case when t1.outstanding_amount\u003e0 and t1.stauts\u003d2\\nand t1.day_diffs BETWEEN 61 and 90 then t1.outstanding_amount end)/100.0 M3_unpaid_amt,\\nsum(case when t1.outstanding_amount\u003e0 and t1.stauts\u003d2\\nand t1.day_diffs \u003e90  then t1.outstanding_amount end)/100.0 WO_unpaid_amt\\n,round( M1_unpaid_amt / used_amt,4) as M1_unpaid_rate\\n,round( M2_unpaid_amt / used_amt,4) as M2_unpaid_rate\\n,round( M3_unpaid_amt / used_amt,4) as M3_unpaid_rate\\n,round( WO_unpaid_amt / used_amt,4) as WO_unpaid_rate\\n,\u00273\u0027 time_type\\n,\u0027NG\u0027 country_code\\n,t1.phone_lock_flag\\nfrom tmp t1 GROUP BY 1,t1.phone_lock_flag ;\\n\\n\",\"preStatements\":[],\"sqlType\":\"1\",\"receivers\":\"\",\"datasource\":3,\"showType\":\"TABLE\",\"localParams\":[],\"datasourceName\":\"mysql_conn\"},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":1,\"taskInstancePriority\":\"HIGHEST\",\"name\":\"dws_okcard_overdue_dpd\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"dwb_credit\"],\"id\":\"tasks-48304\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SQL\",\"params\":{\"postStatements\":[],\"connParams\":\"\",\"receiversCc\":\"\",\"udfs\":\"\",\"type\":\"POSTGRESQL\",\"title\":\"\",\"sql\":\"\\n------------------------------------------------------------------------------------------------------------------------\\n--20210726 --OK Card财务取数模板 start\\n------------------------------------------------------------------------------------------------------------------------\\n\\n-- okcard 支付交易\\ndelete from tb_bidata.dws_okcard_pay_channel where report_date\u003e\u003d dateadd(month,-1,last_day(current_date-1))+1;\\n\\ninsert into tb_bidata.dws_okcard_pay_channel\\n\\nselect last_day(t1.update_time) report_date\\n,t2.pay_channels\\n,count(1) txn_cnts\\n,sum(t1.pay_amount)/100.0 pay_amount\\n,sum(t1.business_amount)/100.0 business_amount\\n,sum(t1.coupon_amount)/100.0 coupon_amount\\n,sum(t1.loyalty_amount)/100.0 loyalty_amount\\n,\u00273\u0027 time_type\\n,\u0027NG\u0027 country_code\\nfrom (select * from etl_dwb.ng_okcard_transaction where pay_status \u003d 1 and update_time\u003e\u003ddateadd(month,-1,last_day(current_date-1))+1 ) t1\\ninner join (select t.pay_id,listagg(t.pay_channel,\u0027,\u0027) pay_channels from etl_dwd.ng_t_pay_sub_dms t\\nwhere update_time \u003e\u003d current_date-33 group by 1) t2 on t1.pay_id \u003dt2.pay_id group by 1,2;\\n\\n\\n\\n---------------------------------------------------------------------------------\\n-- okcard bill 还款 提供给志彬，在可视化直接处理\\n--select last_day(dateadd(day,-1,t1.bill_date)) report_date\\n--,sum(t1.paid_principal)/100.0 paid_principal_amt\\n--,sum(t1.paid_penalty)/100.0 paid_penalty_amt\\n--,sum(t1.unpaid_penalty)/100.0 unpaid_penalty_amt\\n--,\u00273\u0027 time_type\\n--,\u0027NG\u0027 country_code\\n--from report_mysql_ng.t_debit_bill t1\\n--where t1.account_type\u003d6 group by 1\\n---------------------------------------------------------------------------------------------\\n---------------------------------------------------------------------------------------------\\n--- 20210825 财务二期\\n--- 取数表信息：订单表+流水表\\n--- 主动还款信息中的  总还款 \u003d 还款中罚息 + 还款中本金 + 还款溢缴款\\ndelete from tb_bidata.dws_okcard_repay_amount where report_date\u003e\u003d dateadd(month,-1,last_day(current_date-1))+1;\\n\\ninsert into tb_bidata.dws_okcard_repay_amount\\n\\nselect  last_day(dateadd(hour,1,t1.update_time)) report_date\\n,sum(t1.amount)/100.0 back_amt--总还款   --财务使用 BI：运营成本-okcard财务\\n,sum(t2.paid_penalty)  penalty_amt--还款中罚息\\n,sum(t2.paid_principal)  principal_amt--还款中本金\\n,sum(t2.overpayment)  over_amt --还款溢缴款\\n,\u00273\u0027 time_type\\n,\u0027NG\u0027 country_code\\nfrom report_mongo.ng_t_postpay_order t1\\nleft join (select t.pay_id,sum(case when t.account_type\u003d3 then t.amount/100.0 end) as paid_penalty,\\nsum(case when t.account_type\u003d6 and t.balance_type\u003d0 then t.amount/100.0 end) as paid_principal,\\nsum(case when t.account_type\u003d6 and t.balance_type\u003d1 then t.amount/100.0 end) as overpayment\\nfrom report_mysql_ng.t_credit_account_flow t\\n--(\\n--select * from report_mysql_ng.t_credit_account_flow\\n--union\\n-- select * from report_mysql_ng.t_credit_account_flow_20210707\\n--union\\n-- select * from report_mysql_ng.t_credit_account_flow_20210713\\n--union\\n-- select * from report_mysql_ng.t_credit_account_flow_20210715\\n--union\\n-- select * from report_mysql_ng.t_credit_account_flow_20210716\\n--union\\n-- select * from report_mysql_ng.t_credit_account_flow_20210719\\n--union\\n-- select * from report_mysql_ng.t_credit_account_flow_20210720\\n--union\\n-- select * from report_mysql_ng.t_credit_account_flow_20210728\\n-- ) t\\nwhere create_time\u003ecurrent_date - 33\\n and t.biz_type in (2,4) and t.dc_type\u003d\u0027C\u0027 and t.account_type in (3,6) GROUP BY 1\\n) t2 on t1.pay_id \u003dt2.pay_id\\nwhere t1.operation_type in (2,4) and t1.account_type\u003d6\\nand last_day(dateadd(hour,1,t1.update_time)) \u003e\u003d dateadd(month,-1,last_day(current_date-1))+1 GROUP BY 1\\n;\\n\\n------------------------------------------------------------------------------------------------------------------------\\n--20210726 --OK Card财务取数模板 end\\n------------------------------------------------------------------------------------------------------------------------\\n\",\"preStatements\":[],\"sqlType\":\"1\",\"receivers\":\"\",\"datasource\":3,\"showType\":\"TABLE\",\"localParams\":[],\"datasourceName\":\"mysql_conn\"},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":1,\"taskInstancePriority\":\"MEDIUM\",\"name\":\"dws_okcard_finance\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"dws_okcard_account_quota\"],\"id\":\"tasks-30982\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SQL\",\"params\":{\"postStatements\":[],\"connParams\":\"\",\"receiversCc\":\"\",\"udfs\":\"\",\"type\":\"POSTGRESQL\",\"title\":\"\",\"sql\":\"--奖励类型\\t奖励金额（设置的奖励面值）\\t奖励人数（领取奖励的人数）\\t发放数量\\t券核销人数\\t券核销数量\\t核销金额\\t券核销人数占比\\t券核销数量占比\\n--20220314\\ndelete from tb_bidata.dws_okcard_spin_new_cost;\\n\\ninsert into tb_bidata.dws_okcard_spin_new_cost\\n\\nwith coupon as (select * from report_mysql_ng.t_coupon  a\\nwhere a.act_no\u003d\u0027OKC-Luckygame\u0027  and create_time\u003e\u003d\u00272022-01-26\u0027  )\\n\\n,cash as (select * from report_mongo.ng_luck_user_product a\\nwhere activity_no \u003d\u0027OKC-LuckyGame\u0027 and type\u003d\u0027cash\u0027  and create_time\u003e\u003d\u00272022-01-26\u0027 )\\n---券 面额\\nselect date(a.create_time) report_date\\n,\u0027coupon\u0027 award_type\\n,a.nomina_value/100 amount_type\\n,count(distinct a.member_id) total_send_user--\\t券领取人数\\n,count(*) total_send_cnt--发放数量\\n,count(distinct case when a.status\u003d\u0027Consumed\u0027 then a.member_id else null end) consume_user--\\t券核销人数\\n,sum( case when a.status\u003d\u0027Consumed\u0027 then 1 else 0 end) consume_coupon--\\t券核销数量\\n,sum( case when a.status\u003d\u0027Consumed\u0027 then a.nomina_value else null end)/100 consume_amount--\\t核销金额\\n,1.0*consume_user/nullif(total_send_user,0) consume_user_rate  --\\t核销率 人数\\n,1.0*consume_coupon/nullif(total_send_cnt,0)  consume_cnt_rate--\\t核销率 券数量\\n,\u00271\u0027 time_type\\n,\u0027NG\u0027 country_code\\nfrom coupon a\\ngroup by 1,2,3\\nunion all\\n--现金\\nselect date(a.create_time) report_date\\n,\u0027cash\u0027 award_type\\n,amount/100 amount_type\\n,count(distinct member_id) total_send_user\\n,count(*) total_send_cnt\\n,total_send_user consume_user\\n,total_send_cnt consume_coupon\\n,sum(amount)/100.0  consume_amount\\n,1.0*consume_user/nullif(total_send_user,0) consume_user_rate  --\\t核销率 人数\\n,1.0*consume_coupon/nullif(total_send_cnt,0)  consume_cnt_rate--\\t核销率 券数量\\n,\u00271\u0027 time_type\\n,\u0027NG\u0027 country_code\\nfrom cash a group by 1,2,3\\n\\nunion all\\n---周\\n---券 面额\\nselect dateadd(day,-7,next_day(a.create_time,\u0027Su\u0027)) report_date\\n,\u0027coupon\u0027 award_type\\n,a.nomina_value/100 amount_type\\n,count(distinct a.member_id) total_send_user--\\t券领取人数\\n,count(*) total_send_cnt--发放数量\\n,count(distinct case when a.status\u003d\u0027Consumed\u0027 then a.member_id else null end) consume_user--\\t券核销人数\\n,sum( case when a.status\u003d\u0027Consumed\u0027 then 1 else 0 end) consume_coupon--\\t券核销数量\\n,sum( case when a.status\u003d\u0027Consumed\u0027 then a.nomina_value else null end)/100 consume_amount--\\t核销金额\\n,1.0*consume_user/nullif(total_send_user,0) consume_user_rate  --\\t核销率 人数\\n,1.0*consume_coupon/nullif(total_send_cnt,0)  consume_cnt_rate--\\t核销率 券数量\\n,\u00272\u0027 time_type\\n,\u0027NG\u0027 country_code\\nfrom coupon a\\ngroup by 1,2,3\\n\\nunion all\\n--现金\\nselect dateadd(day,-7,next_day(a.create_time,\u0027Su\u0027)) report_date\\n,\u0027cash\u0027 award_type\\n,amount/100 amount_type\\n,count(distinct member_id) total_send_user\\n,count(*) total_send_cnt\\n,total_send_user consume_user\\n,total_send_cnt consume_coupon\\n,sum(amount)/100.0  consume_amount\\n,1.0*consume_user/nullif(total_send_user,0) consume_user_rate  --\\t核销率 人数\\n,1.0*consume_coupon/nullif(total_send_cnt,0)  consume_cnt_rate--\\t核销率 券数量\\n,\u00272\u0027 time_type\\n,\u0027NG\u0027 country_code\\nfrom cash a group by 1,2,3\\n\\nunion all\\n--月\\n---券 面额\\nselect last_day(a.create_time) report_date\\n,\u0027coupon\u0027 award_type\\n,a.nomina_value/100 amount_type\\n,count(distinct a.member_id) total_send_user--\\t券领取人数\\n,count(*) total_send_cnt--发放数量\\n,count(distinct case when a.status\u003d\u0027Consumed\u0027 then a.member_id else null end) consume_user--\\t券核销人数\\n,sum( case when a.status\u003d\u0027Consumed\u0027 then 1 else 0 end) consume_coupon--\\t券核销数量\\n,sum( case when a.status\u003d\u0027Consumed\u0027 then a.nomina_value else null end)/100 consume_amount--\\t核销金额\\n,1.0*consume_user/nullif(total_send_user,0) consume_user_rate  --\\t核销率 人数\\n,1.0*consume_coupon/nullif(total_send_cnt,0)  consume_cnt_rate--\\t核销率 券数量\\n,\u00273\u0027 time_type\\n,\u0027NG\u0027 country_code\\nfrom coupon a\\ngroup by 1,2,3\\n\\nunion all\\n--现金\\nselect last_day(a.create_time) report_date\\n,\u0027cash\u0027 award_type\\n,amount/100 amount_type\\n,count(distinct member_id) total_send_user\\n,count(*) total_send_cnt\\n,total_send_user consume_user\\n,total_send_cnt consume_coupon\\n,sum(amount)/100.0  consume_amount\\n,1.0*consume_user/nullif(total_send_user,0) consume_user_rate  --\\t核销率 人数\\n,1.0*consume_coupon/nullif(total_send_cnt,0)  consume_cnt_rate--\\t核销率 券数量\\n,\u00273\u0027 time_type\\n,\u0027NG\u0027 country_code\\nfrom cash a group by 1,2,3;\\n\\n\\n\",\"preStatements\":[],\"sqlType\":\"1\",\"receivers\":\"\",\"datasource\":3,\"showType\":\"TABLE\",\"localParams\":[],\"datasourceName\":\"mysql_conn\"},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":1,\"taskInstancePriority\":\"MEDIUM\",\"name\":\"dws_okcard_activity\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"dws_okcard_user_register\"],\"id\":\"tasks-15616\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SQL\",\"params\":{\"postStatements\":[],\"connParams\":\"\",\"receiversCc\":\"\",\"udfs\":\"\",\"type\":\"POSTGRESQL\",\"title\":\"\",\"sql\":\"--20220418 grace\\ndelete from tb_bidata.dws_okcard_cuishou_monitor where report_date \u003d current_date-1;\\n\\ninsert into tb_bidata.dws_okcard_cuishou_monitor\\n\\nwith tmp as (\\nselect a.*\\n,row_number() over(partition by a.card_no order by a.bill_date ) rn\\n\\nfrom etl_dwd.ng_okcard_debit_bill_slice a  where a.dt \u003d current_date and a.used_amount \u003e 0 )\\n\\n,overdue as (\\nselect a.dt\\n,a.bill_date\\n,a.phone_lock_flag\\n,case when b.id is not null then \u0027new\u0027 else \u0027old\u0027 end user_type\\n,count(distinct a.card_no) overdue_user --当期逾期客户数\\n,sum(a.unpaid_principal)/100 unpaid_principals  --逾期金额\\nfrom tmp a\\nleft join (select * from tmp where rn \u003d 1 ) b on a.id \u003d b.id\\nwhere a.stauts \u003d 2 group by 1,2,3,4 )\\n\\n,--当天回款账单情况\\nwater as (select a.bill_id\\n,sum(a.principal_amt) principal_amt\\n,sum(a.penalty_amt) penalty_amt\\n,sum(a.interest_amt) interest_amt\\n,sum(a.extent_amt) extent_amt\\n,sum(a.installment_amt) installment_amt\\n,sum(a.overpayment_amt) overpayment_amt\\n,sum(a.amount) amount\\nfrom etl_dwb.ng_okcard_repay_water a\\nwhere a.repay_date \u003d current_date - 1 group by 1 )\\n\\n--1、人工跟进跟进的情况：\\n--人工跟进量\\t人工催回金额\\t人工催回率\\n--当日催回客户数\\t当日催回金额\\t人数催回率\\t金额催回率\\n\\n,follower as (\\nselect date(dateadd(hour,1,f.create_time)) dt --跟进日期\\n,b.bill_date\\n,q.phone_lock_flag\\n,case when q.rn \u003d 1 and q.id is not null then \u0027new\u0027 else \u0027old\u0027 end user_type\\n,count(distinct f.bill_id) cover_cases  ----人工跟进量\\n,count(distinct case when w.amount \u003e0 then f.bill_id else null end) follow_repay_case -- 人工催回账单量 当日催回客户数\\n,1.0*follow_repay_case/cover_cases follow_user_repay_rate--人工催回率 人数催回率\\n,sum(w.amount)/100.0 follow_repayment_amt-- 人工催回金额  当日催回金额  金额催回率\\n,sum(b.unpaid_principal)/100 unpaid_principals  --逾期金额\\nfrom report_mysql_ng.t_okcard_bill_follow_record f\\nleft join water w on f.bill_id\u003dw.bill_id\\ninner join tmp b on f.bill_id \u003d b.id and b.stauts \u003d 2\\ninner join tmp q on f.bill_id\u003dq.id\\nwhere f.business_type \u003d 6 and f.case_remark is not null and date(dateadd(hour,1,f.create_time)) \u003d current_date-1 group by 1,2,3,4\\n\\n)\\n\\n,tmp_list1 as (\\nselect date(create_time) dt,bill_id from report_mysql_ng.t_okcard_bill_follow_record\\nwhere case_remark is not null and business_type \u003d 6 group by 1,2\\n)\\n\\n--2、ivr\\n,ivr as (\\nselect a.create_time,b.card_no,c.id,c.bill_date,c.unpaid_principal\\nfrom report_mysql_ng.t_call_record_94ai a\\ninner join etl_dwd.ng_okcard_account b on concat(\u002702340\u0027,a.number1)\u003db.mobile_no\\ninner join tmp c on b.card_no\u003dc.card_no and c.stauts \u003d 2\\nwhere b.account_status\u003c\u003e 5 and date(dateadd(hour,1,a.create_time))\u003d current_date-1  )\\n\\n,ivr_repay as (\\nselect date(a.create_time) dt --ivr时间\\n,a.bill_date\\n,q.phone_lock_flag\\n,case when q.rn \u003d 1 and q.id is not null then \u0027new\u0027 else \u0027old\u0027 end user_type\\n,count(distinct a.id) cover_cases  ----ivr跟进量\\n,count(distinct case when w.amount \u003e0 then a.id else null end) follow_repay_case -- ivr催回账单量 当日催回客户数\\n,1.0*follow_repay_case/cover_cases follow_user_repay_rate--ivr催回率 人数催回率\\n,sum(w.amount)/100.0 follow_repayment_amt-- ivr催回金额  当日催回金额  金额催回率\\n,sum(a.unpaid_principal)/100 unpaid_principals  --逾期金额\\n\\nfrom ivr a\\nleft join water w on a.id\u003dw.bill_id\\ninner join tmp q on a.id\u003dq.id\\nleft join tmp_list1 c on a.id\u003dc.bill_id\\nwhere c.bill_id is null group by 1,2,3,4\\n)\\n\\n,tmp_list2 as (\\nselect date(create_time) dt,bill_id from report_mysql_ng.t_okcard_bill_follow_record\\nwhere business_type \u003d 6 and case_remark is not null group by 1,2\\nunion all\\nselect date(a.create_time) dt,a.id bill_id from report_mysql_ng.t_call_record_94ai  a\\ninner join etl_dwd.ng_cashloan_account b on concat(\u002702340\u0027,a.number1)\u003db.mobile_no group by 1,2\\n)\\n\\n--3、sms\\n,sms as (\\nselect a.create_time,b.card_no,c.id,c.bill_date,c.unpaid_principal\\nfrom etl_dwd.ng_t_send_message_detail a\\ninner join etl_dwd.ng_okcard_account b on concat(\u00270\u0027,a.mobile_no) \u003d b.mobile_no\\ninner join tmp c on b.card_no\u003dc.card_no and c.stauts \u003d 2\\nwhere b.account_status\u003c\u003e 5 and a.status\u003d0 and a.template_code in (\u00275039\u0027,\u00275027\u0027)\\nand date(a.create_time)\u003d current_date-1  )\\n\\n,sms_repay as (\\nselect date(a.create_time) dt --ivr时间\\n,a.bill_date\\n,q.phone_lock_flag\\n,case when q.rn \u003d 1 and q.id is not null then \u0027new\u0027 else \u0027old\u0027 end user_type\\n,count(distinct a.id) cover_cases  ----ivr跟进量\\n,count(distinct case when w.amount \u003e0 then a.id else null end) follow_repay_case -- ivr催回账单量 当日催回客户数\\n,1.0*follow_repay_case/cover_cases follow_user_repay_rate--ivr催回率 人数催回率\\n,sum(w.amount)/100.0 follow_repayment_amt-- ivr催回金额  当日催回金额  金额催回率\\n,sum(a.unpaid_principal)/100 unpaid_principals  --逾期金额\\n\\nfrom sms a\\nleft join water w on a.id\u003dw.bill_id\\ninner join tmp q on a.id\u003dq.id\\nleft join tmp_list2 c on a.id\u003dc.bill_id\\nwhere c.bill_id is null group by 1,2,3,4\\n)\\n\\nselect a.dt-1 report_date  --日期\\n,a.bill_date  --账单日\\n,a.phone_lock_flag  --业务客群1\\n,a.user_type --业务客群2\\n,a.overdue_user --当期逾期客户数\\n,a.unpaid_principals unpaid_principal--逾期金额\\n,nvl(b.unpaid_principals,0)+nvl(c.unpaid_principals,0)+nvl(d.unpaid_principals,0) total_cover_unpaid_principal --当日覆盖逾期金额\\n,1.0*total_cover_unpaid_principal/nullif(unpaid_principal,0) cover_od_amt_rate --当日逾期金额覆盖率\\n,nvl(b.cover_cases,0)+nvl(c.cover_cases,0)+nvl(d.cover_cases,0) total_cover_cases  --当日催收覆盖客户数\\n\\n,1.0*total_cover_cases/nullif(overdue_user,0) cover_od_user_rate --当日逾期客户数覆盖率\\n\\n,b.cover_cases follow_total_case ---人工跟进量\\n,b.follow_user_repay_rate follow_repay_user_rate ---人工催回率\\n,b.follow_repayment_amt follow_repay_amt         --- 人工催回金额\\n,b.follow_repay_case follow_repay_case\\t\\t\\t ---人工催回案件数 当日催回客户数\\n,c.cover_cases ivr_total_case                    --- ivr跟进量\\n,c.follow_user_repay_rate ivr_repay_user_rate    --- ivr催回率\\n,c.follow_repayment_amt ivr_repay_amt            --- ivr催回金额\\n,c.follow_repay_case ivr_repay_case\\t\\t\\t     --- ivr催回案件数\\n,d.cover_cases sms_total_case                    --- 短信跟进量\\n,d.follow_user_repay_rate sms_repay_user_rate    --- 短信催回率\\n,d.follow_repayment_amt sms_repay_amt            --- 短信催回金额\\n,d.follow_repay_case sms_repay_case\\t\\t\\t     --- 短信催回案件数\\n,1.0*(nvl(b.follow_repay_case,0)+nvl(c.follow_repay_case,0)+nvl(d.follow_repay_case,0))/nullif(total_cover_cases,0) total_repay_user_rate--人数催回率\\n\\n,\u00271\u0027 time_type\\n,\u0027NG\u0027 country_code\\nfrom overdue a\\nleft join follower b on a.dt-1 \u003d b.dt  and a.bill_date \u003d b.bill_date and a.user_type\u003db.user_type and a.phone_lock_flag\u003db.phone_lock_flag\\nleft join ivr_repay c on a.dt-1 \u003d c.dt and a.bill_date \u003d c.bill_date and a.user_type\u003dc.user_type and a.phone_lock_flag\u003dc.phone_lock_flag\\nleft join sms_repay d on a.dt-1 \u003d c.dt and a.bill_date \u003d d.bill_date and a.user_type\u003dd.user_type and a.phone_lock_flag\u003dd.phone_lock_flag;\\n\",\"preStatements\":[],\"sqlType\":\"1\",\"receivers\":\"\",\"datasource\":3,\"showType\":\"TABLE\",\"localParams\":[],\"datasourceName\":\"mysql_conn\"},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":1,\"taskInstancePriority\":\"MEDIUM\",\"name\":\"dws_okcard_credit_manage_monitor\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"dws_okcard_credit_manage\"],\"id\":\"tasks-70324\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"DEPENDENT\",\"params\":{},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":\"0\",\"taskInstancePriority\":\"HIGH\",\"name\":\"dwb_credit\",\"dependence\":{\"dependTaskList\":[{\"dependItemList\":[{\"dateValue\":\"last1Days\",\"definitionName\":\"dwb_business_credit\",\"depTasks\":\"ALL\",\"projectName\":\"ETL_DWB\",\"projectId\":64,\"cycle\":\"day\",\"definitionId\":377}],\"relation\":\"AND\"}],\"relation\":\"AND\"},\"retryInterval\":\"1\",\"preTasks\":[],\"id\":\"tasks-19861\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SQL\",\"params\":{\"postStatements\":[],\"connParams\":\"\",\"receiversCc\":\"\",\"udfs\":\"\",\"type\":\"POSTGRESQL\",\"title\":\"\",\"sql\":\"delete from tb_bidata.dws_okcard_close_trans;\\n\\ninsert into tb_bidata.dws_okcard_close_trans\\n\\nwith close_bill as ( \\nselect a.id,a.card_no,a.update_time close_time,row_number() over(partition by a.card_no order by a.bill_date ) rn\\nfrom etl_dwd.ng_okcard_debit_bill a where a.stauts\u003d3 and a.used_amount\u003e 0 and a.bill_status \u003d 1\\n) \\n,every_bill_first_trans as ( \\nselect b.card_no,b.bill_id,min(create_time) bill_first_trans_time \\n,row_number() over(partition by b.card_no order by bill_first_trans_time) rn\\nfrom etl_dwd.ng_okcard_order b where b.operation_type in (1,16) and b.status \u003d 1 group by 1,2\\n)\\n\\n,tmp as (\\nselect a.card_no,a.close_time,b.bill_first_trans_time \\nfrom close_bill a  \\nleft join every_bill_first_trans b on a.card_no \u003d b.card_no and a.rn \u003d b.rn - 1\\n)\\n\\nselect date(b.close_time) close_date \\n,count(distinct b.card_no) total_close_user\\n,count(distinct case when datediff(day,b.close_time,b.bill_first_trans_time) \u003c\u003d 1 then b.card_no else null end) trans_user_1day\\n,count(distinct case when datediff(day,b.close_time,b.bill_first_trans_time) \u003c\u003d 3 then b.card_no else null end) trans_user_3day\\n,count(distinct case when datediff(day,b.close_time,b.bill_first_trans_time) \u003c\u003d 5 then b.card_no else null end) trans_user_5day\\n,count(distinct case when datediff(day,b.close_time,b.bill_first_trans_time) \u003c\u003d 7 then b.card_no else null end) trans_user_7day\\n,count(distinct case when datediff(day,b.close_time,b.bill_first_trans_time) \u003c\u003d 15 then b.card_no else null end) trans_user_15day\\n,count(distinct case when datediff(day,b.close_time,b.bill_first_trans_time) \u003c\u003d 30 then b.card_no else null end) trans_user_30day\\n\\n,1.0*trans_user_1day/total_close_user trans_user_1day_rate\\n,1.0*trans_user_3day/total_close_user trans_user_3day_rate\\n,1.0*trans_user_5day/total_close_user trans_user_5day_rate\\n,1.0*trans_user_7day/total_close_user trans_user_7day_rate\\n,1.0*trans_user_15day/total_close_user trans_user_15day_rate\\n,1.0*trans_user_30day/total_close_user trans_user_30day_rate\\n\\n,\u0027NG\u0027 country_code\\n,\u00271\u0027 time_type\\nfrom tmp b group by 1\\n\\n;\\n\\n\",\"preStatements\":[],\"sqlType\":\"1\",\"receivers\":\"\",\"datasource\":3,\"showType\":\"TABLE\",\"localParams\":[],\"datasourceName\":\"mysql_conn\"},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":1,\"taskInstancePriority\":\"MEDIUM\",\"name\":\"dws_okcard_close_trans\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"dws_okcard_overdue_dpd\"],\"id\":\"tasks-38489\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SQL\",\"params\":{\"postStatements\":[],\"connParams\":\"\",\"receiversCc\":\"\",\"udfs\":\"\",\"type\":\"POSTGRESQL\",\"title\":\"\",\"sql\":\"\\n--20220819\\n--PP Flexi MAU\\n--Wallet Flexi MAU\\n--Flexi 放款\\n--Flexi 营收 t1\\n--\\ndelete from tb_bidata.dws_ng_flexi_kpi where mth \u003d last_day(current_date-1);\\n\\ninsert into tb_bidata.dws_ng_flexi_kpi\\n\\nwith tmp as(\\nselect *\\n,case when trans_type \u003c\u003e \u002724\u0027 and app_source not in (4,5,6) then \u0027pp\u0027 else \u0027wa\u0027 end appsource\\nfrom etl_dwb.ng_credit_transaction where pay_status \u003d 1 and last_day(update_time) \u003d last_day(current_date - 1)\\n)\\n\\n,tmp1 as (\\nselect last_day(update_time) mth\\n,date(update_time) as dt\\n,sum(pay_amount)/100.0 as flex_dau_amt  --当天放款金额\\n,sum(flex_dau_amt) over(order by dt ROWS UNBOUNDED PRECEDING) flex_mau_amt --当月截止到当天的累计放款金额\\nfrom tmp t1  group by 1,2\\n)\\n\\n,tmp1_busi as (\\nselect last_day(update_time) mth\\n,date(update_time) as dt\\n,case when trans_type \u003d\u0027j6\u0027 then \u0027cl\u0027 else \u0027okc\u0027 end busi_type\\n,sum(pay_amount)/100.0 as flex_dau_amt  --当天放款金额\\n,sum(flex_dau_amt) over(partition by busi_type order by dt ROWS UNBOUNDED PRECEDING) flex_mau_amt --当月截止到当天的累计放款金额\\nfrom tmp t1  group by 1,2,3\\n)\\n\\n,tmp13 as (\\nselect last_day(update_time) mth\\n,date(update_time) as dt\\n,count(distinct payer_member_id) as flexi_dau_pp --当月当天首次交易用户数\\n,sum(flexi_dau_pp) over(order by dt ROWS UNBOUNDED PRECEDING) flexi_mau_pp-- PalmPay Flexi MAU --当月累计交易用户数\\nfrom (select * from (select *,row_number() over(partition by payer_member_id order by update_time) rn\\nfrom tmp where appsource \u003d \u0027pp\u0027 ) p where p.rn \u003d 1) t1 group by 1,2\\n)\\n\\n,tmp14 as (\\nselect last_day(update_time) mth\\n,date(update_time) as dt\\n,count(distinct payer_member_id) as flexi_dau_wallet--当月当天首次交易用户数\\n,sum(flexi_dau_wallet) over(order by dt ROWS UNBOUNDED PRECEDING) flexi_mau_wallet -- Wallet Flexi MAU --当月累计交易用户数\\nfrom (select * from (select *,row_number() over(partition by payer_member_id order by update_time) rn\\nfrom tmp where appsource \u003d \u0027wa\u0027 ) p where p.rn \u003d 1) t1 group by 1,2\\n)\\n\\n,tmp_water as (\\nselect last_day(report_date) mth\\n,date(report_date) as dt\\n,sum(total_avenue) as flexi_dau_avenue --当天收益\\n,sum(flexi_dau_avenue) over(order by dt ROWS UNBOUNDED PRECEDING) flexi_mau_avenue --当月截止到当天的累计收益\\nfrom tb_bidata.dws_credit_avenue where last_day(report_date) \u003d last_day(current_date - 1) group by 1,2\\n)\\n\\n\\nselect t11.mth  --月份 flex_mau_amt\\n,t11.dt\\n--信用支付\\n,t13.flexi_dau_pp --当月当天首次交易用户数\\n,t13.flexi_mau_pp --实际值：PalmPay Flexi  MAU --当月累计交易用户数\\n,a2.target flexi_pp_mau_target--目标值：PalmPay Flexi  MAU\\n,1.0*flexi_mau_pp/a2.target flexi_pp_mau_meet_rate  --目标达成率\\n\\n,t14.flexi_dau_wallet --当月当天首次交易用户数\\n,t14.flexi_mau_wallet --实际值：Wallet Flexi  MAU--当月累计交易用户数\\n,a3.target flexi_wallet_mau_target--目标值：Wallet Flexi  MAU\\n,1.0*flexi_mau_wallet/a3.target flexi_wallet_mau_meet_rate  --目标达成率\\n\\n,t11.flex_dau_amt/rr.us --当天放款金额\\n,t11.flex_mau_amt/rr.us flex_mau_amts --实际值：当月放款金额--当月截止到当天的累计放款金额\\n,b1.target flexi_loan_amt_doller_target--目标值：当月放款金额\\n,1.0*flex_mau_amts/cast(b1.target as integer) flexi_loan_amt_meet_rate--目标达成率\\n\\n,f.flexi_dau_avenue/rr.us flexi_dau_avenue--当天收益\\n,f.flexi_mau_avenue/rr.us flexi_mau_avenues--实际值：当月营收（利息收入）--当月截止到当天的累计收益\\n,c1.target flexi_income_amt_doller_target--目标值：当月营收（利息收入）\\n,1.0*flexi_mau_avenues/cast(c1.target as integer) flexi_income_amt_meet_rate--目标达成率\\n\\n--20220908 added by grace\\n,aa.flex_dau_amt/rr.us  cl_flex_dau_amt--当天放款金额\\n,aa.flex_mau_amt/rr.us  cl_flex_mau_amt--实际值：当月放款金额--当月截止到当天的累计放款金额\\n,1.0*cl_flex_mau_amt/cast(b1.target as integer) cl_flexi_loan_amt_meet_rate--目标达成率\\n\\n,bb.flex_dau_amt/rr.us  okc_flex_dau_amt--当天放款金额\\n,bb.flex_mau_amt/rr.us  okc_flex_mau_amt--实际值：当月放款金额--当月截止到当天的累计放款金额\\n,1.0*okc_flex_mau_amt/cast(b1.target as integer) okc_flexi_loan_amt_meet_rate--目标达成率\\n\\nfrom tmp1 t11\\nleft join (select * from tmp1_busi where busi_type\u003d\u0027cl\u0027) aa  on t11.dt \u003d aa.dt and t11.mth \u003d aa.mth\\nleft join (select * from tmp1_busi where busi_type\u003d\u0027okc\u0027) bb on t11.dt \u003d bb.dt and t11.mth \u003d bb.mth\\nleft join tmp_water f on t11.dt \u003d f.dt and t11.mth \u003d f.mth\\nleft join tmp13 t13 on t13.dt \u003d t11.dt and t11.mth \u003d t13.mth\\nleft join tmp14 t14 on t14.dt \u003d t11.dt and t11.mth \u003d t14.mth\\nleft join (select * from tb_bidata.palmpay_kpi where kpi_name\u003d\u0027flexi_pp_mau\u0027 ) a2 on t13.mth \u003ddate(a2.meet_date)\\nleft join (select * from tb_bidata.palmpay_kpi where kpi_name\u003d\u0027flexi_wallet_mau\u0027 ) a3 on t14.mth \u003ddate(a3.meet_date)\\nleft join (select * from tb_bidata.palmpay_kpi where kpi_name\u003d\u0027当月放款金额\u0027 ) b1 on t11.mth \u003ddate(b1.meet_date)\\nleft join (select * from tb_bidata.palmpay_kpi where kpi_name\u003d\u0027当月营收（利息收入）\u0027 ) c1 on t11.mth \u003ddate(c1.meet_date)\\n\\nleft join tb_bidata.dws_exchange_rate rr on t11.mth \u003d last_day(rr.report_date)\\n\\n;\\n \\n\\n\\n\\n\\n------------------------------------------------------------------------------------------------------------------------------------\\n-- 20220916 Palmpay MTU\\n-- 当月当天首次交易用户数 构成：新、老、回流\\n-- 缺口测算分析\\n------------------------------------------------------------------------------------------------------------------------------------\\ndelete from tb_bidata.dws_ng_flexi_kpi_palmpay_detail;\\n\\ninsert into tb_bidata.dws_ng_flexi_kpi_palmpay_detail\\n\\nwith flexi_pp as(\\nselect * ,last_day(update_time) mth_\\nfrom etl_dwb.ng_credit_transaction\\nwhere pay_status \u003d 1 and trans_type \u003c\u003e \u002724\u0027 and app_source not in (4,5,6) --and last_day(update_time) \u003e\u003d\u00272022-06-01\u0027\\n)\\n\\n,flexi_pp_mth_day as (\\nselect t1.mth_ mth\\n,date(t1.update_time) as dt\\n,t1.payer_member_id --当月首次交易的用户\\n,case when ac.card_no is not null then \u0027new_credit\u0027 else \u0027old_credit\u0027 end credit_flag --当天交易用户 是否为 当天授信用户\\nfrom (select * from (select *,row_number() over(partition by mth_,payer_member_id order by update_time) rn from flexi_pp ) p where p.rn \u003d 1) t1\\n\\nleft join etl_dwd.ng_okcard_account ac on t1.payer_account_id \u003d ac.card_no and date(t1.update_time) \u003d date(ac.create_time)\\n\\nwhere mth_ \u003e\u003d\u00272022-06-01\u0027\\n)\\n------------------------------------------------\\n,tmp as (\\nselect payer_member_id,last_day(update_time) as dd,count(*) as cnt,sum(pay_amount)/100.0 as amt\\nfrom flexi_pp t group by 1,2\\n)\\n\\n---月度交易用户标签\\n,tmp2_month as (\\nselect t1.dd mth,t1.payer_member_id\\n,case when last_day(t4.fisrt_day) \u003d t1.dd then \u0027first_new_user\u0027   --本月首次交易用户\\n\\t  when last_day(t4.fisrt_day) \u003c\u003e t1.dd and t3.payer_member_id is not null then \u0027old\u0027 --老用户\\n\\t  else \u0027huiliu\u0027 end user_flag  --回流用户\\nfrom tmp t1 left join tmp t2 on t1.payer_member_id \u003d t2.payer_member_id and t1.dd \u003d last_day(dateadd(mon,-1,t2.dd)) --次月是否留存\\nleft join tmp t3 on t1.payer_member_id \u003d t3.payer_member_id and t1.dd \u003d last_day(dateadd(mon,1,t3.dd))  --前一个月是否有交易\\nleft join (select payer_member_id ,min(update_time) fisrt_day from flexi_pp group by 1) t4 on t1.payer_member_id \u003d t4.payer_member_id\\ngroup by 1,2,3\\n)\\n\\nselect a.mth,a.dt\\n\\n--日维度拆解的 本月首次交易的 新、老、回流\\n,count( distinct case when b.user_flag \u003d \u0027first_new_user\u0027 then b.payer_member_id else null end)  mth_first_trans_user--本月首次交易新用户\\n,count( distinct case when b.user_flag \u003d \u0027first_new_user\u0027 and a.credit_flag \u003d \u0027new_credit\u0027 then b.payer_member_id else null end)  mth_first_trans_newcredit--本月首次交易新用户_当天授信\\n,mth_first_trans_user - mth_first_trans_newcredit mth_first_trans_oldcredit  --本月首次交易新用户_历史授信\\n\\n,count( distinct case when b.user_flag \u003d \u0027old\u0027 then b.payer_member_id else null end)  mth_old_trans_user--老用户\\n,count( distinct case when b.user_flag \u003d \u0027huiliu\u0027 then b.payer_member_id else null end)  mth_huiliu_trans_user--回流用户\\n\\n,count(distinct b.payer_member_id) dau_user --当月当天首次交易的用户\\n\\n\\n--MTU 累计交易的  新、老、回流\\n,sum(mth_first_trans_user) over(partition by a.mth order by a.dt ROWS UNBOUNDED PRECEDING)  acc_mth_first_trans_user  --本月累计首次交易新用户\\n,sum(mth_old_trans_user) over(partition by a.mth order by a.dt ROWS UNBOUNDED PRECEDING)  acc_mth_old_trans_user   --本月累计老用户\\n,sum(mth_huiliu_trans_user) over(partition by a.mth order by a.dt ROWS UNBOUNDED PRECEDING)  acc_mth_huiliu_trans_user --本月累计回流用户\\n,sum(dau_user) over(partition by a.mth order by a.dt ROWS UNBOUNDED PRECEDING)  acc_dau_user --本月累计交易的用户\\n\\n,\u00271\u0027 time_type\\n,\u0027NG\u0027 country_code\\n\\nfrom flexi_pp_mth_day a\\nleft join tmp2_month b on a.payer_member_id \u003d b.payer_member_id and a.mth \u003d b.mth\\ngroup by 1,2\\n\\n;\\n\\n------------------------------------------------------------------------------------------------------------------------------------\\n------------------------------------------------------------------------------------------------------------------------------------\\n\\n\\n\\n\\n\\n\",\"preStatements\":[],\"sqlType\":\"1\",\"receivers\":\"\",\"datasource\":3,\"showType\":\"TABLE\",\"localParams\":[],\"datasourceName\":\"mysql_conn\"},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":1,\"taskInstancePriority\":\"MEDIUM\",\"name\":\"dws_flexi_kpi\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"dwb_credit\"],\"id\":\"tasks-63567\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SQL\",\"params\":{\"postStatements\":[],\"connParams\":\"\",\"receiversCc\":\"\",\"udfs\":\"\",\"type\":\"POSTGRESQL\",\"title\":\"\",\"sql\":\"---20220908 grace  渗透率\\n\\n---BI数据集名称：flexi_in_palmpay\\n\\ndelete from tb_bidata.dws_ng_okcard_in_palmpay;\\n\\ninsert into tb_bidata.dws_ng_okcard_in_palmpay\\n\\nwith aa as (\\nselect trans_type from etl_dwb.ng_okcard_transaction\\nwhere create_time\u003e current_date - 7 group by 1\\n)\\n\\n,tmp as (\\nselect a.*,tt.trans_name,ac.cid,tu.member_id target_user_id,a.pay_amount/rr.us_rate pay_amount_dollar\\nfrom etl_dwb.ng_pay_flow_palmpay a\\nleft join etl_dwd.ng_desc_trans_type tt on a.trans_type \u003d tt.trans_type\\nleft join etl_dwd.ng_okcard_account ac on a.payer_member_id \u003d ac.cid and ac.create_time \u003c a.update_time\\nleft join etl_dwd.ng_okcard_target_user tu on a.payer_member_id \u003d tu.member_id and tu.create_time \u003c a.update_time\\nleft join (select last_day(report_date) dt,us us_rate from tb_bidata.dws_exchange_rate) rr on last_day(a.update_time) \u003d rr.dt\\nwhere a.trans_type in (select trans_type from aa )\\nand a.update_time \u003c current_date and last_day(a.update_time) \u003e\u003d add_months(last_day(current_date),-4) )\\n\\nselect date(a.update_Time) dt\\n,a.trans_name\\n,count(distinct payer_member_id) pp_users\\n,count(distinct case when a.cid is null then a.target_user_id else null end) pp_trans_notcredit_target_user  --Palmpay交易人数中未授信的Flexi目标人数\\n,count(distinct a.cid ) pp_trans_credited_target_user  --Palmpay交易人数中Flexi已授信人数\\n\\n,count(distinct case when a.payer_account_type in (28,36) then payer_member_id else null end) flexi_user\\n,round(1.0*flexi_user/nullif(pp_users,0),2) flexi_pp_user_ratio\\n\\n,count(*) pp_cnt\\n,sum(case when a.payer_account_type in (28,36) then 1 else 0 end) flexi_cnt\\n,round(1.0*flexi_cnt/nullif(pp_cnt,0),2) flexi_pp_cnt_ratio\\n\\n,sum(pay_amount_dollar)/100 pp_amt\\n,sum(case when a.payer_account_type in (28,36) then pay_amount_dollar else 0 end)/100 flexi_amt\\n,round(1.0*flexi_amt/nullif(pp_amt,0),2) flexi_pp_amt_ratio\\n,\u00271\u0027 time_type\\nfrom tmp a group by 1,2\\n\\nunion all\\nselect dateadd(day,-7,next_day(a.update_Time,\u0027Su\u0027))  dt\\n,a.trans_name\\n,count(distinct payer_member_id) pp_users\\n,count(distinct case when a.cid is null then a.target_user_id else null end) pp_trans_notcredit_target_user  --Palmpay交易人数中未授信的Flexi目标人数\\n,count(distinct a.cid ) pp_trans_credited_target_user  --Palmpay交易人数中Flexi已授信人数\\n\\n,count(distinct case when a.payer_account_type in (28,36) then payer_member_id else null end) flexi_user\\n,round(1.0*flexi_user/nullif(pp_users,0) ,2) flexi_pp_user_ratio\\n\\n,count(*) pp_cnt\\n,sum(case when a.payer_account_type in (28,36) then 1 else 0 end) flexi_cnt\\n,round(1.0*flexi_cnt/nullif(pp_cnt,0),2) flexi_pp_cnt_ratio\\n\\n,sum(pay_amount_dollar)/100 pp_amt\\n,sum(case when a.payer_account_type in (28,36) then pay_amount_dollar else 0 end)/100 flexi_amt\\n,round(1.0*flexi_amt/nullif(pp_amt,0),2) flexi_pp_amt_ratio\\n,\u00272\u0027 time_type\\nfrom tmp a group by 1,2\\n\\nunion all\\nselect last_day(a.update_Time) dt\\n,a.trans_name\\n,count(distinct payer_member_id) pp_users\\n,count(distinct case when a.cid is null then a.target_user_id else null end) pp_trans_notcredit_target_user  --Palmpay交易人数中未授信的Flexi目标人数\\n,count(distinct a.cid ) pp_trans_credited_target_user  --Palmpay交易人数中Flexi已授信人数\\n\\n,count(distinct case when a.payer_account_type in (28,36) then payer_member_id else null end) flexi_user\\n,round(1.0*flexi_user/nullif(pp_users,0) ,2) flexi_pp_user_ratio\\n\\n,count(*) pp_cnt\\n,sum(case when a.payer_account_type in (28,36) then 1 else 0 end) flexi_cnt\\n,round(1.0*flexi_cnt/nullif(pp_cnt,0),2) flexi_pp_cnt_ratio\\n\\n,sum(pay_amount_dollar)/100 pp_amt\\n,sum(case when a.payer_account_type in (28,36) then pay_amount_dollar else 0 end)/100 flexi_amt\\n,round(1.0*flexi_amt/nullif(pp_amt,0),2) flexi_pp_amt_ratio\\n,\u00273\u0027 time_type\\nfrom tmp a group by 1,2\\n;\\n\\n\\n----汇总：不区分交易类型\\ninsert into tb_bidata.dws_ng_okcard_in_palmpay\\n\\nwith aa as (\\nselect trans_type from etl_dwb.ng_okcard_transaction\\nwhere create_time\u003e current_date - 7 group by 1\\n)\\n\\n,tmp as (\\nselect a.*,ac.cid,tu.member_id target_user_id,a.pay_amount/rr.us_rate pay_amount_dollar\\nfrom etl_dwb.ng_pay_flow_palmpay a\\nleft join etl_dwd.ng_okcard_account ac on a.payer_member_id \u003d ac.cid and ac.create_time \u003c a.update_time\\nleft join etl_dwd.ng_okcard_target_user tu on a.payer_member_id \u003d tu.member_id and tu.create_time \u003c a.update_time\\nleft join (select last_day(report_date) dt,us us_rate from tb_bidata.dws_exchange_rate) rr on last_day(a.update_time) \u003d rr.dt\\nwhere a.trans_type in (select trans_type from aa )\\nand a.update_time \u003c current_date and last_day(a.update_time) \u003e\u003d add_months(last_day(current_date),-4) )\\n\\nselect date(a.update_Time) dt\\n,\u0027Overall\u0027 trans_name\\n,count(distinct payer_member_id) pp_users\\n,count(distinct case when a.cid is null then a.target_user_id else null end) pp_trans_notcredit_target_user  --Palmpay交易人数中未授信的Flexi目标人数\\n,count(distinct a.cid ) pp_trans_credited_target_user  --Palmpay交易人数中Flexi已授信人数\\n\\n,count(distinct case when a.payer_account_type in (28,36) then payer_member_id else null end) flexi_user\\n,round(1.0*flexi_user/nullif(pp_users,0),2) flexi_pp_user_ratio\\n\\n,count(*) pp_cnt\\n,sum(case when a.payer_account_type in (28,36) then 1 else 0 end) flexi_cnt\\n,round(1.0*flexi_cnt/nullif(pp_cnt,0),2) flexi_pp_cnt_ratio\\n\\n,sum(pay_amount_dollar)/100 pp_amt\\n,sum(case when a.payer_account_type in (28,36) then pay_amount_dollar else 0 end)/100 flexi_amt\\n,round(1.0*flexi_amt/nullif(pp_amt,0),2) flexi_pp_amt_ratio\\n,\u00271\u0027 time_type\\nfrom tmp a group by 1,2\\n\\nunion all\\nselect dateadd(day,-7,next_day(a.update_Time,\u0027Su\u0027))  dt\\n,\u0027Overall\u0027 trans_name\\n,count(distinct payer_member_id) pp_users\\n,count(distinct case when a.cid is null then a.target_user_id else null end) pp_trans_notcredit_target_user  --Palmpay交易人数中未授信的Flexi目标人数\\n,count(distinct a.cid ) pp_trans_credited_target_user  --Palmpay交易人数中Flexi已授信人数\\n\\n,count(distinct case when a.payer_account_type in (28,36) then payer_member_id else null end) flexi_user\\n,round(1.0*flexi_user/nullif(pp_users,0) ,2) flexi_pp_user_ratio\\n\\n,count(*) pp_cnt\\n,sum(case when a.payer_account_type in (28,36) then 1 else 0 end) flexi_cnt\\n,round(1.0*flexi_cnt/nullif(pp_cnt,0),2) flexi_pp_cnt_ratio\\n\\n,sum(pay_amount_dollar)/100 pp_amt\\n,sum(case when a.payer_account_type in (28,36) then pay_amount_dollar else 0 end)/100 flexi_amt\\n,round(1.0*flexi_amt/nullif(pp_amt,0),2) flexi_pp_amt_ratio\\n,\u00272\u0027 time_type\\nfrom tmp a group by 1,2\\n\\nunion all\\nselect last_day(a.update_Time) dt\\n,\u0027Overall\u0027 trans_name\\n,count(distinct payer_member_id) pp_users\\n,count(distinct case when a.cid is null then a.target_user_id else null end) pp_trans_notcredit_target_user  --Palmpay交易人数中未授信的Flexi目标人数\\n,count(distinct a.cid ) pp_trans_credited_target_user  --Palmpay交易人数中Flexi已授信人数\\n\\n,count(distinct case when a.payer_account_type in (28,36) then payer_member_id else null end) flexi_user\\n,round(1.0*flexi_user/nullif(pp_users,0) ,2) flexi_pp_user_ratio\\n\\n,count(*) pp_cnt\\n,sum(case when a.payer_account_type in (28,36) then 1 else 0 end) flexi_cnt\\n,round(1.0*flexi_cnt/nullif(pp_cnt,0),2) flexi_pp_cnt_ratio\\n\\n,sum(pay_amount_dollar)/100 pp_amt\\n,sum(case when a.payer_account_type in (28,36) then pay_amount_dollar else 0 end)/100 flexi_amt\\n,round(1.0*flexi_amt/nullif(pp_amt,0),2) flexi_pp_amt_ratio\\n,\u00273\u0027 time_type\\nfrom tmp a group by 1,2\\n;\\n\\n\",\"preStatements\":[],\"sqlType\":\"1\",\"receivers\":\"\",\"datasource\":3,\"showType\":\"TABLE\",\"localParams\":[],\"datasourceName\":\"mysql_conn\"},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":1,\"taskInstancePriority\":\"MEDIUM\",\"name\":\"dws_okcard_in_palmpay\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"dws_okcard_user\"],\"id\":\"tasks-19851\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SQL\",\"params\":{\"postStatements\":[],\"connParams\":\"\",\"receiversCc\":\"\",\"udfs\":\"\",\"type\":\"POSTGRESQL\",\"title\":\"\",\"sql\":\"---------------------------------------------------------------------------------------------------\\n---20220908 grace\\n---------------------------------------------------------------------------------------------------\\n--日期\\t日、月\\n--PP注册-PP激活\\t当天注册PP当天交易激活\\n--PP总注册-Flexi授信\\t授信指当天注册当天授信\\n--PP有锁注册-Flexi授信\\n--PP无锁注册-Flexi授信\\n--PP总激活-Flexi授信\\t当天交易激活当天授信\\n--PP有锁激活-Flexi授信\\n--PP无锁激活-Flexi授信\\n--PP活跃（存量目标用户）-Flexi授信\\t当天交易且授信\\n--PP有锁活跃-Flexi授信\\n--PP无锁活跃-Flexi授信\\n---------------------------------------------------------------------------------------------------\\ndelete from tb_bidata.dws_okcard_op_register_trans_credit where time_type \u003d \u00271\u0027 and dt \u003e\u003d current_date - 5;\\n\\ninsert into tb_bidata.dws_okcard_op_register_trans_credit\\n\\nwith register_trans_credit as (\\nselect date(m.create_time) dt\\n,count(distinct m.member_id) pp_register_user\\n,count(distinct case when date(m.create_time) \u003d date(tu.create_time) then m.member_id else null end ) pp_register_user_target  --pp注册当天即成为目标用户\\n\\n,count(distinct f.payer_member_id) register_pptrans_user  --PP注册-PP激活：当天注册PP当天交易激活\\n,count(distinct case when date(m.create_time) \u003d date(tu.create_time) then f.payer_member_id else null end) register_pptrans_user_target  --PP注册-PP激活：当天注册PP当天交易激活，且当天即成为 目标用户\\n,count(distinct case when date(m.create_time) \u003d date(tu.create_time) and tu.phone_lock_flag \u003d 0 then f.payer_member_id else null end) register_pptrans_user_target_lock  --PP注册-PP激活：当天注册PP当天交易激活，且当天即成为 目标用户\\n,count(distinct case when date(m.create_time) \u003d date(tu.create_time) and tu.phone_lock_flag \u003d 1 then f.payer_member_id else null end) register_pptrans_user_target_notlock  --PP注册-PP激活：当天注册PP当天交易激活，且当天即成为 目标用户\\n\\n,count(distinct ac.cid) pp_register_credited_user --PP总注册-Flexi授信： 当天注册当天授信\\n,count(distinct case when ac.phone_lock_flag \u003d 0 then ac.cid else null end ) pp_register_credited_user_lock --PP有锁注册-Flexi授信：授信指当天注册当天授信 -有锁\\n,count(distinct case when ac.phone_lock_flag \u003d 1 then ac.cid else null end ) pp_register_credited_user_notlock --PP无锁注册-Flexi授信：授信指当天注册当天授信  -无锁\\n\\nfrom etl_dwd.ng_member m\\nleft join etl_dwb.ng_palmpay_first_txn f on m.member_id \u003d f.payer_member_id and date(m.create_time) \u003d date(f.first_trans_time)\\nleft join etl_dwd.ng_okcard_account ac on m.member_id \u003d ac.cid and date(m.create_time) \u003d date(ac.create_time)\\nleft join etl_dwd.ng_okcard_target_user tu on m.member_id \u003d tu.member_id\\nwhere m.create_time \u003e\u003d current_date - 5 group by 1\\n)\\n\\n,transacted_credit as (\\nselect date(f.first_trans_time) dt\\n,count(distinct f.payer_member_id) pp_first_user  --palmpay交易激活用户\\n\\n,count(distinct case when tu.create_time\u003cf.first_trans_time then f.payer_member_id else null end) pp_first_user_target  --palmpay交易激活用户，且为目标用户\\n,count(distinct case when tu.create_time\u003cf.first_trans_time and tu.phone_lock_flag \u003d 0 then f.payer_member_id else null end) pp_first_user_target_lock  --palmpay交易激活用户，且为目标用户\\n,count(distinct case when tu.create_time\u003cf.first_trans_time and tu.phone_lock_flag \u003d 1 then f.payer_member_id else null end) pp_first_user_target_notlock  --palmpay交易激活用户，且为目标用户\\n\\n,count(distinct ac.cid) transacted_credit_user --PP总激活-Flexi授信 :当天交易激活当天授信\\n,count(distinct case when ac.phone_lock_flag \u003d 0 then ac.cid else null end ) pp_first_credited_lock_user    --PP有锁激活-Flexi授信 :当天交易激活当天授信  -有锁\\n,count(distinct case when ac.phone_lock_flag \u003d 1 then ac.cid else null end ) pp_first_credited_notlock_user --PP无锁激活-Flexi授信 :当天交易激活当天授信   -无锁\\n\\nfrom etl_dwb.ng_palmpay_first_txn f\\nleft join etl_dwd.ng_okcard_target_user tu on f.payer_member_id \u003d tu.member_id\\nleft join etl_dwd.ng_okcard_account ac on f.payer_member_id \u003d ac.cid and date(f.first_trans_time) \u003d date(ac.create_time)\\nwhere f.first_trans_time \u003e\u003d current_date - 6 group by 1\\n)\\n\\n,active_trans_credit_day as (\\nselect date(f.update_time) dt\\n,count(distinct f.payer_member_id) pp_trans_user  --palmpay交易用户\\n\\n,count(distinct case when tu.create_time \u003c f.update_time and ac.cid is null then f.payer_member_id else null end) pp_trans_user_target  --palmpay交易用户，且为 未授信 目标用户\\n\\n,count(distinct case when tu.create_time \u003c f.update_time and tu.phone_lock_flag \u003d 0 and ac.cid is null then f.payer_member_id else null end) pp_trans_user_target_lock  --palmpay交易用户，且为 未授信 目标用户，且有锁\\n,count(distinct case when tu.create_time \u003c f.update_time and tu.phone_lock_flag \u003d 1 and ac.cid is null then f.payer_member_id else null end) pp_trans_user_target_notlock  --palmpay交易用户，且为 未授信 目标用户，且无锁\\n\\nfrom etl_dwb.ng_pay_flow_palmpay f\\nleft join etl_dwd.ng_okcard_target_user tu on f.payer_member_id \u003d tu.member_id\\nleft join etl_dwd.ng_okcard_account ac on f.payer_member_id \u003d ac.cid and ac.create_time \u003c f.update_time\\nwhere f.update_time \u003e\u003d current_date - 6 group by 1\\n)\\n\\n\\nselect a.dt,a.pp_register_user,a.pp_register_user_target,a.register_pptrans_user,a.register_pptrans_user_target\\n,a.register_pptrans_user_target_lock,a.register_pptrans_user_target_notlock\\n,a.pp_register_credited_user,a.pp_register_credited_user_lock,a.pp_register_credited_user_notlock\\n\\n,b.pp_first_user,b.pp_first_user_target,b.pp_first_user_target_lock,b.pp_first_user_target_notlock,b.transacted_credit_user,b.pp_first_credited_lock_user,b.pp_first_credited_notlock_user\\n\\n,c.pp_trans_user,c.pp_trans_user_target,c.pp_trans_user_target_lock,c.pp_trans_user_target_notlock\\n\\n,\u00271\u0027 time_type\\n,\u0027NG\u0027 country_code\\n\\nfrom register_trans_credit a\\nleft join transacted_credit b on a.dt \u003d b.dt\\nleft join active_trans_credit_day c on a.dt \u003d c.dt\\n\\n;\\n\\n\\n------------------------------------------------------------------------------------------------------------\\n--月度指标\\n------------------------------------------------------------------------------------------------------------\\ndelete from tb_bidata.dws_okcard_op_register_trans_credit where time_type \u003d \u00273\u0027;\\n\\ninsert into tb_bidata.dws_okcard_op_register_trans_credit\\n\\nwith active_trans_credit_mth as (\\nselect last_day(f.update_time) dt\\n,count(distinct f.payer_member_id) pp_trans_user  --palmpay交易用户\\n\\n,count(distinct case when last_day(tu.create_time) \u003c last_day(f.update_time) and ac.cid is null then f.payer_member_id else null end) pp_trans_user_target  --palmpay交易用户，且为 未授信 目标用户\\n\\n,count(distinct case when last_day(tu.create_time) \u003c last_day(f.update_time) and ac.cid is null and tu.phone_lock_flag \u003d 0 then f.payer_member_id else null end) pp_trans_user_target_lock  --palmpay交易用户，且为 未授信 目标用户，且有锁\\n,count(distinct case when last_day(tu.create_time) \u003c last_day(f.update_time) and ac.cid is null and tu.phone_lock_flag \u003d 1 then f.payer_member_id else null end) pp_trans_user_target_notlock  --palmpay交易用户，且为 未授信 目标用户，且无锁\\n\\nfrom etl_dwb.ng_pay_flow_palmpay f\\nleft join etl_dwd.ng_okcard_target_user tu on f.payer_member_id \u003d tu.member_id\\nleft join etl_dwd.ng_okcard_account ac on f.payer_member_id \u003d ac.cid and last_day(ac.create_time) \u003c last_day(f.update_time)\\nwhere f.update_time \u003e\u003d \u00272022-07-01\u0027 group by 1\\n)\\n\\n\\nselect last_day(a.dt) dts\\n,sum(a.pp_register_user) pp_register_user\\n,sum(a.pp_register_user_target) pp_register_user_target\\n,sum(a.register_pptrans_user) register_pptrans_user\\n,sum(a.register_pptrans_user_target) register_pptrans_user_target\\n,sum(a.register_pptrans_user_target_lock) register_pptrans_user_target_lock\\n,sum(a.register_pptrans_user_target_notlock) register_pptrans_user_target_notlock\\n,sum(a.pp_register_credited_user) pp_register_credited_user\\n\\n,sum(a.pp_register_credited_user_lock) pp_register_credited_user_lock\\n,sum(a.pp_register_credited_user_notlock) pp_register_credited_user_notlock\\n\\n\\n,sum(a.pp_first_user) pp_first_user\\n,sum(a.pp_first_user_target) pp_first_user_target\\n,sum(a.pp_first_user_target_lock) pp_first_user_target_lock\\n,sum(a.pp_first_user_target_notlock) pp_first_user_target_notlock\\n,sum(a.transacted_credit_user) transacted_credit_user\\n,sum(a.pp_first_credited_lock_user) pp_first_credited_lock_user\\n,sum(a.pp_first_credited_notlock_user) pp_first_credited_notlock_user\\n\\n,max(c.pp_trans_user) pp_trans_user\\n,max(c.pp_trans_user_target) pp_trans_user_target\\n,max(c.pp_trans_user_target_lock) pp_trans_user_target_lock\\n,max(c.pp_trans_user_target_notlock) pp_trans_user_target_notlock\\n\\n,\u00273\u0027 time_type\\n,\u0027NG\u0027 country_code\\n\\nfrom tb_bidata.dws_okcard_op_register_trans_credit  a\\nleft join active_trans_credit_mth c on last_day(a.dt) \u003d c.dt\\ngroup by 1\\n\\n;\\n\\n\\n\\n\",\"preStatements\":[],\"sqlType\":\"1\",\"receivers\":\"\",\"datasource\":3,\"showType\":\"TABLE\",\"localParams\":[],\"datasourceName\":\"mysql_conn\"},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":1,\"taskInstancePriority\":\"MEDIUM\",\"name\":\"dws_okcard_operation\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"dws_okcard_in_palmpay\"],\"id\":\"tasks-16137\",\"workerGroup\":\"default\"}],\"timeout\":0}",
    "processDefinitionLocations": "{\"tasks-24651\":{\"name\":\"dws_okcard_user\",\"targetarr\":\"tasks-19861\",\"nodenumber\":\"5\",\"x\":226,\"y\":414},\"tasks-40537\":{\"name\":\"dws_okcard_bill\",\"targetarr\":\"tasks-96807\",\"nodenumber\":\"5\",\"x\":466,\"y\":86},\"tasks-18892\":{\"name\":\"dws_okcard_dim\",\"targetarr\":\"tasks-24651\",\"nodenumber\":\"1\",\"x\":650,\"y\":247},\"tasks-45412\":{\"name\":\"dws_okcard_retention\",\"targetarr\":\"tasks-96807\",\"nodenumber\":\"4\",\"x\":322,\"y\":0},\"tasks-29131\":{\"name\":\"dws_okcard_vintage\",\"targetarr\":\"tasks-24651\",\"nodenumber\":\"1\",\"x\":482,\"y\":393},\"tasks-96807\":{\"name\":\"dws_okcard_transaction\",\"targetarr\":\"tasks-19861\",\"nodenumber\":\"6\",\"x\":167,\"y\":103},\"tasks-2-10r42k\":{\"name\":\"dws_okcard_referearn_user_distribute\",\"targetarr\":\"tasks-18892\",\"nodenumber\":\"6\",\"x\":923,\"y\":251},\"tasks-2-2x63m8\":{\"name\":\"dws_okcard_referearn_bill_history_distribute\",\"targetarr\":\"tasks-2-10r42k\",\"nodenumber\":\"0\",\"x\":1206,\"y\":406},\"tasks-2-552559\":{\"name\":\"dws_okcard_referearn_amount_distribute\",\"targetarr\":\"tasks-2-10r42k\",\"nodenumber\":\"0\",\"x\":1203,\"y\":311},\"tasks-2-13q2wc\":{\"name\":\"dws_okcard_referearn_cnt_distribute\",\"targetarr\":\"tasks-2-10r42k\",\"nodenumber\":\"0\",\"x\":1077,\"y\":28},\"tasks-2-3gy2ci\":{\"name\":\"dws_okcard_referearn_cnt_distribute_dt\",\"targetarr\":\"tasks-2-10r42k\",\"nodenumber\":\"0\",\"x\":1190,\"y\":120},\"tasks-2-1cea9\":{\"name\":\"dws_okcard_referearn_detail\",\"targetarr\":\"tasks-2-10r42k\",\"nodenumber\":\"0\",\"x\":1187,\"y\":220},\"tasks-6520\":{\"name\":\"dws_okcard_funnel\",\"targetarr\":\"tasks-2-10r42k\",\"nodenumber\":\"2\",\"x\":897,\"y\":24},\"tasks-20232\":{\"name\":\"dws_okcard_credit_manage\",\"targetarr\":\"tasks-3360\",\"nodenumber\":\"3\",\"x\":591,\"y\":150},\"tasks-19350\":{\"name\":\"dws_okcard_user_register\",\"targetarr\":\"tasks-24651\",\"nodenumber\":\"1\",\"x\":488,\"y\":487},\"tasks-3360\":{\"name\":\"dws_okcard_repay\",\"targetarr\":\"tasks-48304\",\"nodenumber\":\"3\",\"x\":406,\"y\":253},\"tasks-58143\":{\"name\":\"dws_okcard_account_quota\",\"targetarr\":\"tasks-29131\",\"nodenumber\":\"1\",\"x\":665,\"y\":359},\"tasks-48304\":{\"name\":\"dws_okcard_overdue_dpd\",\"targetarr\":\"tasks-19861\",\"nodenumber\":\"3\",\"x\":220,\"y\":280},\"tasks-30982\":{\"name\":\"dws_okcard_finance\",\"targetarr\":\"tasks-58143\",\"nodenumber\":\"0\",\"x\":877,\"y\":383},\"tasks-15616\":{\"name\":\"dws_okcard_activity\",\"targetarr\":\"tasks-19350\",\"nodenumber\":\"0\",\"x\":711,\"y\":487},\"tasks-70324\":{\"name\":\"dws_okcard_credit_manage_monitor\",\"targetarr\":\"tasks-20232\",\"nodenumber\":\"0\",\"x\":740,\"y\":27},\"tasks-19861\":{\"name\":\"dwb_credit\",\"targetarr\":\"\",\"nodenumber\":\"6\",\"x\":38,\"y\":362},\"tasks-38489\":{\"name\":\"dws_okcard_close_trans\",\"targetarr\":\"tasks-48304\",\"nodenumber\":\"0\",\"x\":351,\"y\":162},\"tasks-63567\":{\"name\":\"dws_flexi_kpi\",\"targetarr\":\"tasks-19861\",\"nodenumber\":\"0\",\"x\":151,\"y\":581},\"tasks-19851\":{\"name\":\"dws_okcard_in_palmpay\",\"targetarr\":\"tasks-24651\",\"nodenumber\":\"1\",\"x\":320,\"y\":567},\"tasks-16137\":{\"name\":\"dws_okcard_operation\",\"targetarr\":\"tasks-19851\",\"nodenumber\":\"0\",\"x\":951,\"y\":584}}",
    "processDefinitionName": "dws_business_okcard_import_1665651205812",
    "projectName": "project_a",
    "scheduleCrontab": "0 15 0 * * ? *",
    "scheduleEndTime": "2121-07-04 00:00:00",
    "scheduleFailureStrategy": "CONTINUE",
    "scheduleProcessInstancePriority": "HIGHEST",
    "scheduleReleaseState": "OFFLINE",
    "scheduleStartTime": "2021-07-04 00:00:00",
    "scheduleWarningGroupId": 2,
    "scheduleWarningType": "FAILURE",
    "scheduleWorkerGroupName": "default",
    "processDefinitionId": 2
  },
  {
    "processDefinitionConnects": "[{\"endPointSourceId\":\"tasks-51935\",\"endPointTargetId\":\"tasks-60537\"},{\"endPointSourceId\":\"tasks-51935\",\"endPointTargetId\":\"tasks-88301\"},{\"endPointSourceId\":\"tasks-51935\",\"endPointTargetId\":\"tasks-51187\"},{\"endPointSourceId\":\"tasks-51935\",\"endPointTargetId\":\"tasks-42705\"},{\"endPointSourceId\":\"tasks-60537\",\"endPointTargetId\":\"tasks-97378\"},{\"endPointSourceId\":\"tasks-42705\",\"endPointTargetId\":\"tasks-30412\"},{\"endPointSourceId\":\"tasks-44512\",\"endPointTargetId\":\"tasks-51935\"},{\"endPointSourceId\":\"tasks-31713\",\"endPointTargetId\":\"tasks-42705\"}]",
    "processDefinitionJson": "{\"tenantId\":1,\"globalParams\":[{\"prop\":\"flow_param_0\",\"direct\":\"IN\",\"type\":\"VARCHAR\",\"value\":\"111\"}],\"tasks\":[{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"shell\",\"runFlag\":\"NORMAL\",\"type\":\"SHELL\",\"params\":{\"rawScript\":\"whoami\",\"localParams\":[{\"prop\":\"shell_arg0\",\"direct\":\"IN\",\"type\":\"VARCHAR\",\"value\":\"arg0\"}],\"resourceList\":[]},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":\"0\",\"taskInstancePriority\":\"MEDIUM\",\"name\":\"shell_0\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"depend_task_0\"],\"id\":\"tasks-51935\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"PYTHON\",\"params\":{\"rawScript\":\"import sys\\n\\nprint(\\\"HELLO:\\\" + sys.argv[0])\",\"localParams\":[{\"prop\":\"py_arg0\",\"direct\":\"IN\",\"type\":\"VARCHAR\",\"value\":\"sam.liux\"}],\"resourceList\":[]},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":\"0\",\"taskInstancePriority\":\"MEDIUM\",\"name\":\"py_0\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"shell_0\"],\"id\":\"tasks-60537\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SQL\",\"params\":{\"postStatements\":[],\"connParams\":\"\",\"receiversCc\":\"\",\"udfs\":\"\",\"type\":\"SPARK\",\"title\":\"\",\"sql\":\"show tables;\",\"preStatements\":[],\"sqlType\":\"0\",\"sendEmail\":false,\"receivers\":\"\",\"datasource\":1,\"displayRows\":10,\"limit\":10000,\"showType\":\"TABLE\",\"localParams\":[],\"datasourceName\":\"spark_conn\"},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":\"0\",\"taskInstancePriority\":\"MEDIUM\",\"name\":\"spark_sql_0\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"shell_0\"],\"id\":\"tasks-88301\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SQL\",\"params\":{\"postStatements\":[],\"connParams\":\"sql_param0\u003d11212\",\"receiversCc\":\"\",\"udfs\":\"1\",\"type\":\"HIVE\",\"title\":\"\",\"sql\":\"show tables;\",\"preStatements\":[],\"sqlType\":\"0\",\"sendEmail\":false,\"receivers\":\"\",\"datasource\":2,\"displayRows\":10,\"limit\":10000,\"showType\":\"TABLE\",\"localParams\":[],\"datasourceName\":\"hive_conn\"},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":\"0\",\"taskInstancePriority\":\"MEDIUM\",\"name\":\"hive_sql_0\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"shell_0\"],\"id\":\"tasks-51187\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"MR\",\"params\":{\"mainArgs\":\"arg1 arg2 arg3 ${cargs1}\",\"programType\":\"JAVA\",\"mainClass\":\"testMain\",\"appName\":\"testMr0\",\"mainJar\":{\"id\":4},\"localParams\":[{\"prop\":\"cargs1\",\"direct\":\"IN\",\"type\":\"VARCHAR\",\"value\":\"1\"}],\"others\":\"opt1 opt2\",\"resourceList\":[{\"res\":\"test_folder/commons-pool2-2.4.2.jar\",\"name\":\"commons-pool2-2.4.2.2.jar\",\"id\":4}]},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":\"0\",\"taskInstancePriority\":\"MEDIUM\",\"name\":\"mr_0\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"shell_0\",\"inner_flow_0\"],\"id\":\"tasks-42705\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SQOOP\",\"params\":{\"jobName\":\"testSqoop\",\"hadoopCustomParams\":[{\"prop\":\"hadooparg1\",\"direct\":\"IN\",\"type\":\"VARCHAR\",\"value\":\"hadooparg11111\"}],\"sourceType\":\"MYSQL\",\"targetType\":\"HIVE\",\"targetParams\":\"{\\\"hiveDatabase\\\":\\\"hive_db\\\",\\\"hiveTable\\\":\\\"hive_table_0\\\",\\\"createHiveTable\\\":true,\\\"dropDelimiter\\\":true,\\\"hiveOverWrite\\\":true,\\\"replaceDelimiter\\\":\\\",\\\",\\\"hiveTargetDir\\\":\\\"/tmp/hive\\\",\\\"hivePartitionKey\\\":\\\"id\\\",\\\"hivePartitionValue\\\":\\\"111\\\"}\",\"modelType\":\"import\",\"sourceParams\":\"{\\\"srcType\\\":\\\"MYSQL\\\",\\\"srcDatasource\\\":3,\\\"srcTable\\\":\\\"test_tbv\\\",\\\"srcQueryType\\\":\\\"0\\\",\\\"srcQuerySql\\\":\\\"\\\",\\\"srcColumnType\\\":\\\"1\\\",\\\"srcColumns\\\":\\\"id,user_id,name\\\",\\\"srcConditionList\\\":[],\\\"mapColumnHive\\\":[{\\\"prop\\\":\\\"int\\\",\\\"direct\\\":\\\"IN\\\",\\\"type\\\":\\\"VARCHAR\\\",\\\"value\\\":\\\"int\\\"}],\\\"mapColumnJava\\\":[{\\\"prop\\\":\\\"Integer\\\",\\\"direct\\\":\\\"IN\\\",\\\"type\\\":\\\"VARCHAR\\\",\\\"value\\\":\\\"Integer\\\"}]}\",\"jobType\":\"TEMPLATE\",\"localParams\":[],\"sqoopAdvancedParams\":[{\"prop\":\"sqooparg1\",\"direct\":\"IN\",\"type\":\"VARCHAR\",\"value\":\"sqooparg111111\"}],\"concurrency\":1},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":\"0\",\"taskInstancePriority\":\"MEDIUM\",\"name\":\"sqoop_form_0\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"mr_0\"],\"id\":\"tasks-30412\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SQOOP\",\"params\":{\"jobName\":\"testSqoopSqlMode\",\"hadoopCustomParams\":[{\"prop\":\"hadooparg1\",\"direct\":\"IN\",\"type\":\"VARCHAR\",\"value\":\"hadooparg1111\"}],\"sourceType\":\"MYSQL\",\"targetType\":\"HIVE\",\"targetParams\":\"{\\\"hiveDatabase\\\":\\\"hivedb\\\",\\\"hiveTable\\\":\\\"hive_table_0\\\",\\\"createHiveTable\\\":false,\\\"dropDelimiter\\\":false,\\\"hiveOverWrite\\\":true,\\\"replaceDelimiter\\\":\\\"\\\",\\\"hiveTargetDir\\\":\\\"\\\",\\\"hivePartitionKey\\\":\\\"\\\",\\\"hivePartitionValue\\\":\\\"\\\"}\",\"modelType\":\"import\",\"sourceParams\":\"{\\\"srcType\\\":\\\"MYSQL\\\",\\\"srcDatasource\\\":3,\\\"srcTable\\\":\\\"\\\",\\\"srcQueryType\\\":\\\"1\\\",\\\"srcQuerySql\\\":\\\"select * from table_1\\\",\\\"srcColumnType\\\":\\\"0\\\",\\\"srcColumns\\\":\\\"\\\",\\\"srcConditionList\\\":[],\\\"mapColumnHive\\\":[],\\\"mapColumnJava\\\":[]}\",\"jobType\":\"TEMPLATE\",\"localParams\":[],\"sqoopAdvancedParams\":[{\"prop\":\"sqooparg1\",\"direct\":\"IN\",\"type\":\"VARCHAR\",\"value\":\"sqooparg1111\"}],\"concurrency\":1},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":\"0\",\"taskInstancePriority\":\"MEDIUM\",\"name\":\"sqoop_sql_0\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"py_0\"],\"id\":\"tasks-97378\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"DEPENDENT\",\"params\":{},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":\"0\",\"taskInstancePriority\":\"MEDIUM\",\"name\":\"depend_task_0\",\"dependence\":{\"dependTaskList\":[{\"dependItemList\":[{\"dateValue\":\"today\",\"definitionName\":\"dws_business_okcard_import_1665651205812\",\"depTasks\":\"dws_okcard_user\",\"projectName\":\"project_a\",\"projectId\":1,\"cycle\":\"day\",\"definitionId\":2}],\"relation\":\"AND\"},{\"dependItemList\":[{\"dateValue\":\"today\",\"definitionName\":\"dws_business_okcard_import_1665651205812\",\"depTasks\":\"dws_okcard_bill\",\"projectName\":\"project_a\",\"projectId\":1,\"cycle\":\"day\",\"definitionId\":2}],\"relation\":\"AND\"},{\"dependItemList\":[{\"dateValue\":\"today\",\"definitionName\":\"dws_business_okcard_import_1665651205812\",\"depTasks\":\"ALL\",\"projectName\":\"project_a\",\"projectId\":1,\"cycle\":\"day\",\"definitionId\":2}],\"relation\":\"AND\"}],\"relation\":\"AND\"},\"retryInterval\":\"1\",\"preTasks\":[],\"id\":\"tasks-44512\",\"workerGroup\":\"default\"},{\"taskInstancePriority\":\"MEDIUM\",\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"name\":\"inner_flow_0\",\"description\":\"\",\"dependence\":{},\"preTasks\":[],\"id\":\"tasks-31713\",\"runFlag\":\"NORMAL\",\"workerGroup\":\"default\",\"type\":\"SUB_PROCESS\",\"params\":{\"processDefinitionId\":3},\"timeout\":{\"enable\":false,\"strategy\":\"\"}}],\"timeout\":0}",
    "processDefinitionLocations": "{\"tasks-51935\":{\"name\":\"shell_0\",\"targetarr\":\"tasks-44512\",\"nodenumber\":\"4\",\"x\":722,\"y\":300},\"tasks-60537\":{\"name\":\"py_0\",\"targetarr\":\"tasks-51935\",\"nodenumber\":\"1\",\"x\":1052,\"y\":388},\"tasks-88301\":{\"name\":\"spark_sql_0\",\"targetarr\":\"tasks-51935\",\"nodenumber\":\"0\",\"x\":799,\"y\":570},\"tasks-51187\":{\"name\":\"hive_sql_0\",\"targetarr\":\"tasks-51935\",\"nodenumber\":\"0\",\"x\":1119,\"y\":690},\"tasks-42705\":{\"name\":\"mr_0\",\"targetarr\":\"tasks-51935,tasks-31713\",\"nodenumber\":\"1\",\"x\":1218,\"y\":268},\"tasks-30412\":{\"name\":\"sqoop_form_0\",\"targetarr\":\"tasks-42705\",\"nodenumber\":\"0\",\"x\":1474,\"y\":297},\"tasks-97378\":{\"name\":\"sqoop_sql_0\",\"targetarr\":\"tasks-60537\",\"nodenumber\":\"0\",\"x\":1432,\"y\":459},\"tasks-44512\":{\"name\":\"depend_task_0\",\"targetarr\":\"\",\"nodenumber\":\"1\",\"x\":463,\"y\":453},\"tasks-31713\":{\"name\":\"inner_flow_0\",\"targetarr\":\"\",\"nodenumber\":\"1\",\"x\":939,\"y\":99}}",
    "processDefinitionName": "hello_flow_0",
    "projectName": "project_a",
    "processDefinitionId": 1
  },
  {
    "processDefinitionConnects": "[{\"endPointSourceId\":\"tasks-10670\",\"endPointTargetId\":\"tasks-31817\"}]",
    "processDefinitionJson": "{\"tenantId\":-1,\"globalParams\":[],\"tasks\":[{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SHELL\",\"params\":{\"rawScript\":\"printf 1\",\"localParams\":[],\"resourceList\":[]},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":\"0\",\"taskInstancePriority\":\"MEDIUM\",\"name\":\"jifeng-shell\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[],\"id\":\"tasks-10670\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SQL\",\"params\":{\"postStatements\":[],\"connParams\":\"\",\"receiversCc\":\"\",\"udfs\":\"\",\"type\":\"MYSQL\",\"title\":\"\",\"sql\":\"SELECT * FROM dual;\",\"preStatements\":[],\"sqlType\":\"0\",\"sendEmail\":false,\"receivers\":\"\",\"datasource\":3,\"displayRows\":10,\"limit\":10000,\"showType\":\"TABLE\",\"localParams\":[],\"datasourceName\":\"mysql_conn\"},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":\"0\",\"taskInstancePriority\":\"MEDIUM\",\"name\":\"jifeng-sql\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"jifeng-shell\"],\"id\":\"tasks-31817\",\"workerGroup\":\"default\"}],\"timeout\":0}",
    "processDefinitionLocations": "{\"tasks-10670\":{\"name\":\"jifeng-shell\",\"targetarr\":\"\",\"nodenumber\":\"1\",\"x\":215,\"y\":50},\"tasks-31817\":{\"name\":\"jifeng-sql\",\"targetarr\":\"tasks-10670\",\"nodenumber\":\"0\",\"x\":410,\"y\":194}}",
    "processDefinitionName": "继风-flow",
    "projectName": "project_a",
    "processDefinitionId": 4
  },
  {
    "processDefinitionConnects": "[{\"endPointSourceId\":\"tasks-31476\",\"endPointTargetId\":\"tasks-5-40hb8\"},{\"endPointSourceId\":\"tasks-31476\",\"endPointTargetId\":\"tasks-5-xa68v\"},{\"endPointSourceId\":\"tasks-31476\",\"endPointTargetId\":\"tasks-53336\"},{\"endPointSourceId\":\"tasks-31476\",\"endPointTargetId\":\"tasks-5-5vm314\"},{\"endPointSourceId\":\"tasks-31476\",\"endPointTargetId\":\"tasks-5-1262id\"}]",
    "processDefinitionJson": "{\"tenantId\":3,\"globalParams\":[{\"prop\":\"dt\",\"direct\":\"IN\",\"type\":\"VARCHAR\",\"value\":\"$[yyyyMMdd-1]\"}],\"tasks\":[{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"DEPENDENT\",\"params\":{},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":\"0\",\"taskInstancePriority\":\"MEDIUM\",\"name\":\"ai_feature\",\"dependence\":{\"dependTaskList\":[{\"dependItemList\":[{\"dateValue\":\"today\",\"definitionName\":\"ai_feature\",\"depTasks\":\"ALL\",\"projectName\":\"ai\",\"projectId\":10,\"cycle\":\"day\",\"definitionId\":888}],\"relation\":\"AND\"}],\"relation\":\"AND\"},\"retryInterval\":\"1\",\"preTasks\":[],\"id\":\"tasks-31476\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SPARK\",\"params\":{\"mainArgs\":\"${dt}\",\"driverMemory\":\"1G\",\"executorMemory\":\"2G\",\"programType\":\"PYTHON\",\"mainClass\":\"\",\"driverCores\":1,\"deployMode\":\"cluster\",\"executorCores\":2,\"appName\":\"ai_customer_mongo_spark\",\"mainJar\":{\"id\":557},\"sparkVersion\":\"SPARK2\",\"numExecutors\":2,\"localParams\":[],\"others\":\"--conf \\\"spark.pyspark.driver.python\u003d/bin/python3\\\" --conf \\\"spark.pyspark.python\u003d/bin/python3\\\" --conf \\\"spark.yarn.appMasterEnv.SPARK_HOME\u003d/usr/hdp/3.1.4.0-315/spark2\\\" --conf \\\"spark.executorEnv.SPARK_HOME\u003d/usr/hdp/3.1.4.0-315/spark2\\\"\",\"resourceList\":[{\"res\":\"ai_feature/customer_mongo.py\",\"name\":\"customer_mongo.py\",\"id\":557}]},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":\"0\",\"taskInstancePriority\":\"MEDIUM\",\"name\":\"ai_customer_mongo_spark\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"ai_feature\"],\"id\":\"tasks-53336\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SPARK\",\"params\":{\"mainArgs\":\"${dt}\",\"driverMemory\":\"512M\",\"executorMemory\":\"2G\",\"programType\":\"PYTHON\",\"mainClass\":\"\",\"driverCores\":1,\"deployMode\":\"cluster\",\"executorCores\":2,\"appName\":\"ai_order_mongo_spark\",\"mainJar\":{\"id\":559},\"sparkVersion\":\"SPARK2\",\"numExecutors\":2,\"localParams\":[],\"others\":\"--conf \\\"spark.pyspark.driver.python\u003d/bin/python3\\\" --conf \\\"spark.pyspark.python\u003d/bin/python3\\\" --conf \\\"spark.yarn.appMasterEnv.SPARK_HOME\u003d/usr/hdp/3.1.4.0-315/spark2\\\" --conf \\\"spark.executorEnv.SPARK_HOME\u003d/usr/hdp/3.1.4.0-315/spark2\\\"\",\"resourceList\":[{\"res\":\"ai_feature/order_mongo.py\",\"name\":\"order_mongo.py\",\"id\":559}]},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":\"0\",\"taskInstancePriority\":\"MEDIUM\",\"name\":\"ai_order_mongo_spark\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"ai_feature\"],\"id\":\"tasks-5-1262id\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SPARK\",\"params\":{\"mainArgs\":\"${dt}\",\"driverMemory\":\"2G\",\"executorMemory\":\"2G\",\"programType\":\"PYTHON\",\"mainClass\":\"\",\"driverCores\":1,\"deployMode\":\"cluster\",\"executorCores\":2,\"appName\":\"ai_merchant_mongo_spark\",\"mainJar\":{\"id\":558},\"sparkVersion\":\"SPARK2\",\"numExecutors\":2,\"localParams\":[],\"others\":\"--conf \\\"spark.pyspark.driver.python\u003d/bin/python3\\\" --conf \\\"spark.pyspark.python\u003d/bin/python3\\\" --conf \\\"spark.yarn.appMasterEnv.SPARK_HOME\u003d/usr/hdp/3.1.4.0-315/spark2\\\" --conf \\\"spark.executorEnv.SPARK_HOME\u003d/usr/hdp/3.1.4.0-315/spark2\\\"\",\"resourceList\":[{\"res\":\"ai_feature/merchant_mongo.py\",\"name\":\"merchant_mongo.py\",\"id\":558}]},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":\"0\",\"taskInstancePriority\":\"MEDIUM\",\"name\":\"ai_merchant_mongo_spark\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"ai_feature\"],\"id\":\"tasks-5-5vm314\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"\",\"runFlag\":\"NORMAL\",\"type\":\"SPARK\",\"params\":{\"mainArgs\":\"${dt}\",\"driverMemory\":\"2G\",\"executorMemory\":\"2G\",\"programType\":\"PYTHON\",\"mainClass\":\"\",\"driverCores\":1,\"deployMode\":\"cluster\",\"executorCores\":2,\"appName\":\"ai_merchant_redis_spark\",\"mainJar\":{\"id\":560},\"sparkVersion\":\"SPARK2\",\"numExecutors\":2,\"localParams\":[],\"others\":\"--conf \\\"spark.pyspark.driver.python\u003d/bin/python3\\\" --conf \\\"spark.pyspark.python\u003d/bin/python3\\\" --conf \\\"spark.yarn.appMasterEnv.SPARK_HOME\u003d/usr/hdp/3.1.4.0-315/spark2\\\" --conf \\\"spark.executorEnv.SPARK_HOME\u003d/usr/hdp/3.1.4.0-315/spark2\\\"\",\"resourceList\":[{\"res\":\"ai_feature/customer_mongo.py\",\"name\":\"customer_mongo.py\",\"id\":557}]},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":\"0\",\"taskInstancePriority\":\"MEDIUM\",\"name\":\"ai_merchant_redis_spark\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"ai_feature\"],\"id\":\"tasks-5-xa68v\",\"workerGroup\":\"default\"},{\"conditionResult\":{\"successNode\":[\"\"],\"failedNode\":[\"\"]},\"description\":\"ai_customer_redis_spark\",\"runFlag\":\"NORMAL\",\"type\":\"SPARK\",\"params\":{\"mainArgs\":\"${dt}\",\"driverMemory\":\"1G\",\"executorMemory\":\"2G\",\"programType\":\"PYTHON\",\"mainClass\":\"\",\"driverCores\":1,\"deployMode\":\"cluster\",\"executorCores\":2,\"appName\":\"ai_customer_redis_spark\",\"mainJar\":{\"id\":561},\"sparkVersion\":\"SPARK2\",\"numExecutors\":2,\"localParams\":[],\"others\":\"--conf \\\"spark.pyspark.driver.python\u003d/bin/python3\\\" --conf \\\"spark.pyspark.python\u003d/bin/python3\\\" --conf \\\"spark.yarn.appMasterEnv.SPARK_HOME\u003d/usr/hdp/3.1.4.0-315/spark2\\\" --conf \\\"spark.executorEnv.SPARK_HOME\u003d/usr/hdp/3.1.4.0-315/spark2\\\"\",\"resourceList\":[{\"res\":\"ai_feature/customer_redis.py\",\"name\":\"customer_redis.py\",\"id\":561}]},\"timeout\":{\"enable\":false,\"strategy\":\"\"},\"maxRetryTimes\":\"0\",\"taskInstancePriority\":\"MEDIUM\",\"name\":\"ai_customer_redis_spark\",\"dependence\":{},\"retryInterval\":\"1\",\"preTasks\":[\"ai_feature\"],\"id\":\"tasks-5-40hb8\",\"workerGroup\":\"default\"}],\"timeout\":0}",
    "processDefinitionLocations": "{\"tasks-31476\":{\"name\":\"ai_feature\",\"targetarr\":\"\",\"nodenumber\":\"0\",\"x\":170,\"y\":350},\"tasks-53336\":{\"name\":\"ai_customer_mongo_spark\",\"targetarr\":\"tasks-31476\",\"nodenumber\":\"0\",\"x\":495,\"y\":142},\"tasks-5-1262id\":{\"name\":\"ai_order_mongo_spark\",\"targetarr\":\"tasks-31476\",\"nodenumber\":\"0\",\"x\":497,\"y\":253},\"tasks-5-5vm314\":{\"name\":\"ai_merchant_mongo_spark\",\"targetarr\":\"tasks-31476\",\"nodenumber\":\"0\",\"x\":495,\"y\":361},\"tasks-5-xa68v\":{\"name\":\"ai_merchant_redis_spark\",\"targetarr\":\"tasks-31476\",\"nodenumber\":\"0\",\"x\":496,\"y\":470},\"tasks-5-40hb8\":{\"name\":\"ai_customer_redis_spark\",\"targetarr\":\"tasks-31476\",\"nodenumber\":\"0\",\"x\":497,\"y\":553}}",
    "processDefinitionName": "ai_order_schedule_feature_spark",
    "projectName": "ai",
    "scheduleCrontab": "0 0 5 1/1 * ? *",
    "scheduleEndTime": "2122-09-28 00:00:00",
    "scheduleFailureStrategy": "END",
    "scheduleProcessInstancePriority": "MEDIUM",
    "scheduleReleaseState": "OFFLINE",
    "scheduleStartTime": "2022-09-28 00:00:00",
    "scheduleWarningGroupId": 0,
    "scheduleWarningType": "NONE",
    "scheduleWorkerGroupName": "default",
    "processDefinitionId": 1142
  }
]